
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004500  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d8  080046d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080046ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080046ec  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c82b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001983  00000000  00000000  0002c867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bf3  00000000  00000000  0002f968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009608  00000000  00000000  0005655b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f76de  00000000  00000000  0005fb63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  001572bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004670 	.word	0x08004670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004670 	.word	0x08004670

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_Init+0x3c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <HAL_Init+0x3c>)
 80004d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004de:	2003      	movs	r0, #3
 80004e0:	f001 fc1e 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f80f 	bl	8000508 <HAL_InitTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f0:	2301      	movs	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	e001      	b.n	80004fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f6:	f003 ff5b 	bl	80043b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40022000 	.word	0x40022000

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_InitTick+0x6c>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_InitTick+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000528:	fbb1 f3f3 	udiv	r3, r1, r3
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fc1c 	bl	8001d6e <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10f      	bne.n	800055c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d809      	bhi.n	8000556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f001 fbf4 	bl	8001d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_InitTick+0x70>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	e007      	b.n	8000566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e004      	b.n	8000566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e001      	b.n	8000566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000004 	.word	0x20000004
 8000574:	20000008 	.word	0x20000008
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_IncTick+0x1c>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x20>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4413      	add	r3, r2
 800058a:	4a03      	ldr	r2, [pc, #12]	; (8000598 <HAL_IncTick+0x1c>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000028 	.word	0x20000028
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d004      	beq.n	80005dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_Delay+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4413      	add	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005dc:	bf00      	nop
 80005de:	f7ff ffdf 	bl	80005a0 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d8f7      	bhi.n	80005de <HAL_Delay+0x26>
  {
  }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	609a      	str	r2, [r3, #8]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000664:	b490      	push	{r4, r7}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3360      	adds	r3, #96	; 0x60
 8000676:	461a      	mov	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000680:	6822      	ldr	r2, [r4, #0]
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <LL_ADC_SetOffset+0x40>)
 8000684:	4013      	ands	r3, r2
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	430a      	orrs	r2, r1
 8000690:	4313      	orrs	r3, r2
 8000692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000696:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bc90      	pop	{r4, r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	03fff000 	.word	0x03fff000

080006a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80006a8:	b490      	push	{r4, r7}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	461a      	mov	r2, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc90      	pop	{r4, r7}
 80006ce:	4770      	bx	lr

080006d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80006d0:	b490      	push	{r4, r7}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3360      	adds	r3, #96	; 0x60
 80006e0:	461a      	mov	r2, r3
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006ea:	6823      	ldr	r3, [r4, #0]
 80006ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc90      	pop	{r4, r7}
 80006fe:	4770      	bx	lr

08000700 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000714:	2301      	movs	r3, #1
 8000716:	e000      	b.n	800071a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000726:	b490      	push	{r4, r7}
 8000728:	b084      	sub	sp, #16
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3330      	adds	r3, #48	; 0x30
 8000736:	461a      	mov	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	f003 030c 	and.w	r3, r3, #12
 8000742:	4413      	add	r3, r2
 8000744:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000746:	6822      	ldr	r2, [r4, #0]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	211f      	movs	r1, #31
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	401a      	ands	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0e9b      	lsrs	r3, r3, #26
 800075c:	f003 011f 	and.w	r1, r3, #31
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	f003 031f 	and.w	r3, r3, #31
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bc90      	pop	{r4, r7}
 8000776:	4770      	bx	lr

08000778 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000778:	b490      	push	{r4, r7}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3314      	adds	r3, #20
 8000788:	461a      	mov	r2, r3
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	0e5b      	lsrs	r3, r3, #25
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	4413      	add	r3, r2
 8000796:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000798:	6822      	ldr	r2, [r4, #0]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	0d1b      	lsrs	r3, r3, #20
 800079e:	f003 031f 	and.w	r3, r3, #31
 80007a2:	2107      	movs	r1, #7
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	401a      	ands	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	0d1b      	lsrs	r3, r3, #20
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc90      	pop	{r4, r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007e0:	43db      	mvns	r3, r3
 80007e2:	401a      	ands	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0318 	and.w	r3, r3, #24
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LL_ADC_SetChannelSingleDiff+0x44>)
 80007ec:	40d9      	lsrs	r1, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	400b      	ands	r3, r1
 80007f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007f6:	431a      	orrs	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	0007ffff 	.word	0x0007ffff

08000810 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f003 031f 	and.w	r3, r3, #31
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	6093      	str	r3, [r2, #8]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800087c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000880:	d101      	bne.n	8000886 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80008a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008d0:	d101      	bne.n	80008d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80008d2:	2301      	movs	r3, #1
 80008d4:	e000      	b.n	80008d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008f8:	f043 0201 	orr.w	r2, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800091c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000920:	f043 0202 	orr.w	r2, r3, #2
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b01      	cmp	r3, #1
 8000946:	d101      	bne.n	800094c <LL_ADC_IsEnabled+0x18>
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <LL_ADC_IsEnabled+0x1a>
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	2b02      	cmp	r3, #2
 800096c:	d101      	bne.n	8000972 <LL_ADC_IsDisableOngoing+0x18>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <LL_ADC_IsDisableOngoing+0x1a>
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000994:	f043 0204 	orr.w	r2, r3, #4
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009bc:	f043 0210 	orr.w	r2, r3, #16
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d101      	bne.n	80009e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a0a:	f043 0220 	orr.w	r2, r3, #32
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	d101      	bne.n	8000a36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e134      	b.n	8000cc8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f003 fcc3 	bl	80043f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fef1 	bl	800086c <LL_ADC_IsDeepPowerDownEnabled>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fed7 	bl	8000848 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff0c 	bl	80008bc <LL_ADC_IsInternalRegulatorEnabled>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d113      	bne.n	8000ad2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fef0 	bl	8000894 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ab4:	4b86      	ldr	r3, [pc, #536]	; (8000cd0 <HAL_ADC_Init+0x28c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	099b      	lsrs	r3, r3, #6
 8000aba:	4a86      	ldr	r2, [pc, #536]	; (8000cd4 <HAL_ADC_Init+0x290>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	099b      	lsrs	r3, r3, #6
 8000ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ac4:	e002      	b.n	8000acc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f9      	bne.n	8000ac6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fef0 	bl	80008bc <LL_ADC_IsInternalRegulatorEnabled>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10d      	bne.n	8000afe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae6:	f043 0210 	orr.w	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f043 0201 	orr.w	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff64 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 8000b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f040 80cf 	bne.w	8000cb6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 80cb 	bne.w	8000cb6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b28:	f043 0202 	orr.w	r2, r3, #2
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fefd 	bl	8000934 <LL_ADC_IsEnabled>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d115      	bne.n	8000b6c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b40:	4865      	ldr	r0, [pc, #404]	; (8000cd8 <HAL_ADC_Init+0x294>)
 8000b42:	f7ff fef7 	bl	8000934 <LL_ADC_IsEnabled>
 8000b46:	4604      	mov	r4, r0
 8000b48:	4864      	ldr	r0, [pc, #400]	; (8000cdc <HAL_ADC_Init+0x298>)
 8000b4a:	f7ff fef3 	bl	8000934 <LL_ADC_IsEnabled>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	431c      	orrs	r4, r3
 8000b52:	4863      	ldr	r0, [pc, #396]	; (8000ce0 <HAL_ADC_Init+0x29c>)
 8000b54:	f7ff feee 	bl	8000934 <LL_ADC_IsEnabled>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4323      	orrs	r3, r4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4619      	mov	r1, r3
 8000b66:	485f      	ldr	r0, [pc, #380]	; (8000ce4 <HAL_ADC_Init+0x2a0>)
 8000b68:	f7ff fd48 	bl	80005fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7e5b      	ldrb	r3, [r3, #25]
 8000b70:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b76:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000b7c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000b82:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	045b      	lsls	r3, r3, #17
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d009      	beq.n	8000bc4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <HAL_ADC_Init+0x2a4>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	69b9      	ldr	r1, [r7, #24]
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fef7 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 8000be2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff18 	bl	8000a1e <LL_ADC_INJ_IsConversionOngoing>
 8000bee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d13d      	bne.n	8000c72 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d13a      	bne.n	8000c72 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c00:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c08:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c18:	f023 0302 	bic.w	r3, r3, #2
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	69b9      	ldr	r1, [r7, #24]
 8000c22:	430b      	orrs	r3, r1
 8000c24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d118      	bne.n	8000c62 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c3a:	f023 0304 	bic.w	r3, r3, #4
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c46:	4311      	orrs	r1, r2
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c4c:	4311      	orrs	r1, r2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000c52:	430a      	orrs	r2, r1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0201 	orr.w	r2, r2, #1
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	e007      	b.n	8000c72 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 0201 	bic.w	r2, r2, #1
 8000c70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d10c      	bne.n	8000c94 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f023 010f 	bic.w	r1, r3, #15
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	631a      	str	r2, [r3, #48]	; 0x30
 8000c92:	e007      	b.n	8000ca4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 020f 	bic.w	r2, r2, #15
 8000ca2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca8:	f023 0303 	bic.w	r3, r3, #3
 8000cac:	f043 0201 	orr.w	r2, r3, #1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	655a      	str	r2, [r3, #84]	; 0x54
 8000cb4:	e007      	b.n	8000cc6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cba:	f043 0210 	orr.w	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3724      	adds	r7, #36	; 0x24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	053e2d63 	.word	0x053e2d63
 8000cd8:	50040000 	.word	0x50040000
 8000cdc:	50040100 	.word	0x50040100
 8000ce0:	50040200 	.word	0x50040200
 8000ce4:	50040300 	.word	0x50040300
 8000ce8:	fff0c007 	.word	0xfff0c007

08000cec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cf4:	4857      	ldr	r0, [pc, #348]	; (8000e54 <HAL_ADC_Start+0x168>)
 8000cf6:	f7ff fd8b 	bl	8000810 <LL_ADC_GetMultimode>
 8000cfa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe65 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f040 809c 	bne.w	8000e46 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <HAL_ADC_Start+0x30>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e097      	b.n	8000e4c <HAL_ADC_Start+0x160>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fdc5 	bl	80018b4 <ADC_Enable>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f040 8083 	bne.w	8000e3c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d3e:	f023 0301 	bic.w	r3, r3, #1
 8000d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a42      	ldr	r2, [pc, #264]	; (8000e58 <HAL_ADC_Start+0x16c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d002      	beq.n	8000d5a <HAL_ADC_Start+0x6e>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	e000      	b.n	8000d5c <HAL_ADC_Start+0x70>
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <HAL_ADC_Start+0x170>)
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d002      	beq.n	8000d6a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d82:	d106      	bne.n	8000d92 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	f023 0206 	bic.w	r2, r3, #6
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	221c      	movs	r2, #28
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <HAL_ADC_Start+0x16c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d002      	beq.n	8000db8 <HAL_ADC_Start+0xcc>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	e000      	b.n	8000dba <HAL_ADC_Start+0xce>
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_ADC_Start+0x170>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d008      	beq.n	8000dd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b05      	cmp	r3, #5
 8000dcc:	d002      	beq.n	8000dd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	d114      	bne.n	8000dfe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fdc2 	bl	8000980 <LL_ADC_REG_StartConversion>
 8000dfc:	e025      	b.n	8000e4a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_ADC_Start+0x16c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d002      	beq.n	8000e1a <HAL_ADC_Start+0x12e>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	e000      	b.n	8000e1c <HAL_ADC_Start+0x130>
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_ADC_Start+0x170>)
 8000e1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00f      	beq.n	8000e4a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	655a      	str	r2, [r3, #84]	; 0x54
 8000e3a:	e006      	b.n	8000e4a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e44:	e001      	b.n	8000e4a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e46:	2302      	movs	r3, #2
 8000e48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	50040300 	.word	0x50040300
 8000e58:	50040100 	.word	0x50040100
 8000e5c:	50040000 	.word	0x50040000

08000e60 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Stop+0x16>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e023      	b.n	8000ebe <HAL_ADC_Stop+0x5e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000e7e:	2103      	movs	r1, #3
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fc63 	bl	800174c <ADC_ConversionStop>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 fd69 	bl	8001968 <ADC_Disable>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	f043 0201 	orr.w	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ed2:	4862      	ldr	r0, [pc, #392]	; (800105c <HAL_ADC_PollForConversion+0x194>)
 8000ed4:	f7ff fc9c 	bl	8000810 <LL_ADC_GetMultimode>
 8000ed8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d102      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e02a      	b.n	8000f3e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d005      	beq.n	8000efa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d002      	beq.n	8000efa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d111      	bne.n	8000f1e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0c:	f043 0220 	orr.w	r2, r3, #32
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e09d      	b.n	8001054 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000f18:	2304      	movs	r3, #4
 8000f1a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f1c:	e00f      	b.n	8000f3e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000f1e:	484f      	ldr	r0, [pc, #316]	; (800105c <HAL_ADC_PollForConversion+0x194>)
 8000f20:	f7ff fc84 	bl	800082c <LL_ADC_GetMultiDMATransfer>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2e:	f043 0220 	orr.w	r2, r3, #32
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e08c      	b.n	8001054 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f3e:	f7ff fb2f 	bl	80005a0 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f44:	e01a      	b.n	8000f7c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d016      	beq.n	8000f7c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f4e:	f7ff fb27 	bl	80005a0 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d302      	bcc.n	8000f64 <HAL_ADC_PollForConversion+0x9c>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	f043 0204 	orr.w	r2, r3, #4
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e06b      	b.n	8001054 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0dd      	beq.n	8000f46 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fbb0 	bl	8000700 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d01c      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7e5b      	ldrb	r3, [r3, #25]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d118      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d111      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d105      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <HAL_ADC_PollForConversion+0x198>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d002      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x128>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_PollForConversion+0x12a>
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_ADC_PollForConversion+0x19c>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d008      	beq.n	800100c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b05      	cmp	r3, #5
 8001004:	d002      	beq.n	800100c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d104      	bne.n	8001016 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	e00c      	b.n	8001030 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_ADC_PollForConversion+0x198>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d002      	beq.n	8001026 <HAL_ADC_PollForConversion+0x15e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	e000      	b.n	8001028 <HAL_ADC_PollForConversion+0x160>
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_ADC_PollForConversion+0x19c>)
 8001028:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b08      	cmp	r3, #8
 8001034:	d104      	bne.n	8001040 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2208      	movs	r2, #8
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e008      	b.n	8001052 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d103      	bne.n	8001052 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	50040300 	.word	0x50040300
 8001060:	50040100 	.word	0x50040100
 8001064:	50040000 	.word	0x50040000

08001068 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0a6      	sub	sp, #152	; 0x98
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x22>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e348      	b.n	8001738 <HAL_ADC_ConfigChannel+0x6b4>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fc8c 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 8329 	bne.w	8001712 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d824      	bhi.n	8001112 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	3b02      	subs	r3, #2
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d81b      	bhi.n	800110a <HAL_ADC_ConfigChannel+0x86>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <HAL_ADC_ConfigChannel+0x54>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	080010e9 	.word	0x080010e9
 80010dc:	080010f1 	.word	0x080010f1
 80010e0:	080010f9 	.word	0x080010f9
 80010e4:	08001101 	.word	0x08001101
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	220c      	movs	r2, #12
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	e011      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2212      	movs	r2, #18
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	e00d      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2218      	movs	r2, #24
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	e009      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	e004      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2206      	movs	r2, #6
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	e000      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001112:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	f7ff fb00 	bl	8000726 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc50 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 8001130:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fc70 	bl	8000a1e <LL_ADC_INJ_IsConversionOngoing>
 800113e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 8148 	bne.w	80013dc <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800114c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 8143 	bne.w	80013dc <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	461a      	mov	r2, r3
 8001164:	f7ff fb08 	bl	8000778 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d00a      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6919      	ldr	r1, [r3, #16]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800119a:	f7ff fa63 	bl	8000664 <LL_ADC_SetOffset>
 800119e:	e11d      	b.n	80013dc <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fa7e 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x148>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fa73 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	0e9b      	lsrs	r3, r3, #26
 80011c6:	f003 021f 	and.w	r2, r3, #31
 80011ca:	e012      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x16e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fa68 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <HAL_ADC_ConfigChannel+0x186>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0e9b      	lsrs	r3, r3, #26
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	e00a      	b.n	8001220 <HAL_ADC_ConfigChannel+0x19c>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	429a      	cmp	r2, r3
 8001222:	d106      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fa4f 	bl	80006d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fa35 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10a      	bne.n	800125e <HAL_ADC_ConfigChannel+0x1da>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fa2a 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	0e9b      	lsrs	r3, r3, #26
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	e010      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1fc>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fa1f 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x214>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0e9b      	lsrs	r3, r3, #26
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	e00a      	b.n	80012ae <HAL_ADC_ConfigChannel+0x22a>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80012a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d106      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	2101      	movs	r1, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa08 	bl	80006d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2102      	movs	r1, #2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f9ee 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10a      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x268>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2102      	movs	r1, #2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f9e3 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	0e9b      	lsrs	r3, r3, #26
 80012e6:	f003 021f 	and.w	r2, r3, #31
 80012ea:	e010      	b.n	800130e <HAL_ADC_ConfigChannel+0x28a>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f9d8 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x2a2>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0e9b      	lsrs	r3, r3, #26
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	e00a      	b.n	800133c <HAL_ADC_ConfigChannel+0x2b8>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	429a      	cmp	r2, r3
 800133e:	d106      	bne.n	800134e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f9c1 	bl	80006d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2103      	movs	r1, #3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f9a7 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10a      	bne.n	800137a <HAL_ADC_ConfigChannel+0x2f6>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2103      	movs	r1, #3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f99c 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	0e9b      	lsrs	r3, r3, #26
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	e010      	b.n	800139c <HAL_ADC_ConfigChannel+0x318>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2103      	movs	r1, #3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f991 	bl	80006a8 <LL_ADC_GetOffsetChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x330>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0e9b      	lsrs	r3, r3, #26
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	e00a      	b.n	80013ca <HAL_ADC_ConfigChannel+0x346>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80013c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d106      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	2103      	movs	r1, #3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f97a 	bl	80006d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff faa7 	bl	8000934 <LL_ADC_IsEnabled>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f040 810c 	bne.w	8001606 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f7ff f9e4 	bl	80007c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4aad      	ldr	r2, [pc, #692]	; (80016bc <HAL_ADC_ConfigChannel+0x638>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f040 80fd 	bne.w	8001606 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10b      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x3b0>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0e9b      	lsrs	r3, r3, #26
 8001422:	3301      	adds	r3, #1
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2b09      	cmp	r3, #9
 800142a:	bf94      	ite	ls
 800142c:	2301      	movls	r3, #1
 800142e:	2300      	movhi	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e012      	b.n	800145a <HAL_ADC_ConfigChannel+0x3d6>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2b09      	cmp	r3, #9
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800145a:	2b00      	cmp	r3, #0
 800145c:	d064      	beq.n	8001528 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <HAL_ADC_ConfigChannel+0x3f6>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0e9b      	lsrs	r3, r3, #26
 8001470:	3301      	adds	r3, #1
 8001472:	069b      	lsls	r3, r3, #26
 8001474:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001478:	e00e      	b.n	8001498 <HAL_ADC_ConfigChannel+0x414>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	069b      	lsls	r3, r3, #26
 8001494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x434>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0e9b      	lsrs	r3, r3, #26
 80014aa:	3301      	adds	r3, #1
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	e010      	b.n	80014da <HAL_ADC_ConfigChannel+0x456>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	ea42 0103 	orr.w	r1, r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10a      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x47c>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	3301      	adds	r3, #1
 80014f2:	f003 021f 	and.w	r2, r3, #31
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	051b      	lsls	r3, r3, #20
 80014fe:	e011      	b.n	8001524 <HAL_ADC_ConfigChannel+0x4a0>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3301      	adds	r3, #1
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001524:	430b      	orrs	r3, r1
 8001526:	e069      	b.n	80015fc <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x4c0>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0e9b      	lsrs	r3, r3, #26
 800153a:	3301      	adds	r3, #1
 800153c:	069b      	lsls	r3, r3, #26
 800153e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001542:	e00e      	b.n	8001562 <HAL_ADC_ConfigChannel+0x4de>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	61fb      	str	r3, [r7, #28]
  return result;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	069b      	lsls	r3, r3, #26
 800155e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x4fe>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0e9b      	lsrs	r3, r3, #26
 8001574:	3301      	adds	r3, #1
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	e010      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x520>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	617b      	str	r3, [r7, #20]
  return result;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	ea42 0103 	orr.w	r1, r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x54c>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0e9b      	lsrs	r3, r3, #26
 80015ba:	3301      	adds	r3, #1
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	3b1e      	subs	r3, #30
 80015c8:	051b      	lsls	r3, r3, #20
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ce:	e014      	b.n	80015fa <HAL_ADC_ConfigChannel+0x576>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	60fb      	str	r3, [r7, #12]
  return result;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	3b1e      	subs	r3, #30
 80015f4:	051b      	lsls	r3, r3, #20
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015fa:	430b      	orrs	r3, r1
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6892      	ldr	r2, [r2, #8]
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff f8b9 	bl	8000778 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_ADC_ConfigChannel+0x63c>)
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 808c 	beq.w	800172c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001614:	482b      	ldr	r0, [pc, #172]	; (80016c4 <HAL_ADC_ConfigChannel+0x640>)
 8001616:	f7ff f817 	bl	8000648 <LL_ADC_GetCommonPathInternalCh>
 800161a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <HAL_ADC_ConfigChannel+0x644>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d12b      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x5fc>
 8001628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800162c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d125      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a24      	ldr	r2, [pc, #144]	; (80016cc <HAL_ADC_ConfigChannel+0x648>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d004      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x5c4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_ADC_ConfigChannel+0x64c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d16e      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800164c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001650:	4619      	mov	r1, r3
 8001652:	481c      	ldr	r0, [pc, #112]	; (80016c4 <HAL_ADC_ConfigChannel+0x640>)
 8001654:	f7fe ffe5 	bl	8000622 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_ADC_ConfigChannel+0x650>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_ADC_ConfigChannel+0x654>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099a      	lsrs	r2, r3, #6
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001670:	e002      	b.n	8001678 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800167e:	e052      	b.n	8001726 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_ADC_ConfigChannel+0x658>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12a      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x65c>
 800168a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800168e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d124      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_ADC_ConfigChannel+0x648>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d004      	beq.n	80016aa <HAL_ADC_ConfigChannel+0x626>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_ADC_ConfigChannel+0x64c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d13f      	bne.n	800172a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	4619      	mov	r1, r3
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <HAL_ADC_ConfigChannel+0x640>)
 80016b6:	f7fe ffb4 	bl	8000622 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016ba:	e036      	b.n	800172a <HAL_ADC_ConfigChannel+0x6a6>
 80016bc:	407f0000 	.word	0x407f0000
 80016c0:	80080000 	.word	0x80080000
 80016c4:	50040300 	.word	0x50040300
 80016c8:	c7520000 	.word	0xc7520000
 80016cc:	50040000 	.word	0x50040000
 80016d0:	50040200 	.word	0x50040200
 80016d4:	20000008 	.word	0x20000008
 80016d8:	053e2d63 	.word	0x053e2d63
 80016dc:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <HAL_ADC_ConfigChannel+0x6bc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d120      	bne.n	800172c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11a      	bne.n	800172c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_ADC_ConfigChannel+0x6c0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d115      	bne.n	800172c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001708:	4619      	mov	r1, r3
 800170a:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_ADC_ConfigChannel+0x6c4>)
 800170c:	f7fe ff89 	bl	8000622 <LL_ADC_SetCommonPathInternalCh>
 8001710:	e00c      	b.n	800172c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	f043 0220 	orr.w	r2, r3, #32
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001724:	e002      	b.n	800172c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001726:	bf00      	nop
 8001728:	e000      	b.n	800172c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800172a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001734:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001738:	4618      	mov	r0, r3
 800173a:	3798      	adds	r7, #152	; 0x98
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	80000001 	.word	0x80000001
 8001744:	50040000 	.word	0x50040000
 8001748:	50040300 	.word	0x50040300

0800174c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f934 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 8001768:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f955 	bl	8000a1e <LL_ADC_INJ_IsConversionOngoing>
 8001774:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8090 	beq.w	80018a4 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d02a      	beq.n	80017e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7e5b      	ldrb	r3, [r3, #25]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d126      	bne.n	80017e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7e1b      	ldrb	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d122      	bne.n	80017e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80017a6:	e014      	b.n	80017d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4a41      	ldr	r2, [pc, #260]	; (80018b0 <ADC_ConversionStop+0x164>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d90d      	bls.n	80017cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	f043 0210 	orr.w	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e06c      	b.n	80018a6 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	3301      	adds	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017dc:	2b40      	cmp	r3, #64	; 0x40
 80017de:	d1e3      	bne.n	80017a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2240      	movs	r2, #64	; 0x40
 80017e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d014      	beq.n	8001818 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f8ec 	bl	80009d0 <LL_ADC_REG_IsConversionOngoing>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00c      	beq.n	8001818 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f8a9 	bl	800095a <LL_ADC_IsDisableOngoing>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f8c8 	bl	80009a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d014      	beq.n	8001848 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f8fb 	bl	8000a1e <LL_ADC_INJ_IsConversionOngoing>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f891 	bl	800095a <LL_ADC_IsDisableOngoing>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f8d7 	bl	80009f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d004      	beq.n	8001858 <ADC_ConversionStop+0x10c>
 800184e:	2b03      	cmp	r3, #3
 8001850:	d105      	bne.n	800185e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001852:	230c      	movs	r3, #12
 8001854:	617b      	str	r3, [r7, #20]
        break;
 8001856:	e005      	b.n	8001864 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001858:	2308      	movs	r3, #8
 800185a:	617b      	str	r3, [r7, #20]
        break;
 800185c:	e002      	b.n	8001864 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800185e:	2304      	movs	r3, #4
 8001860:	617b      	str	r3, [r7, #20]
        break;
 8001862:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001864:	f7fe fe9c 	bl	80005a0 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800186a:	e014      	b.n	8001896 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800186c:	f7fe fe98 	bl	80005a0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b05      	cmp	r3, #5
 8001878:	d90d      	bls.n	8001896 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f043 0210 	orr.w	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e007      	b.n	80018a6 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e3      	bne.n	800186c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	a33fffff 	.word	0xa33fffff

080018b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f837 	bl	8000934 <LL_ADC_IsEnabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d146      	bne.n	800195a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <ADC_Enable+0xb0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e032      	b.n	800195c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fff2 	bl	80008e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001900:	f7fe fe4e 	bl	80005a0 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001906:	e021      	b.n	800194c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f811 	bl	8000934 <LL_ADC_IsEnabled>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d104      	bne.n	8001922 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe ffe1 	bl	80008e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001922:	f7fe fe3d 	bl	80005a0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d90d      	bls.n	800194c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f043 0210 	orr.w	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e007      	b.n	800195c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b01      	cmp	r3, #1
 8001958:	d1d6      	bne.n	8001908 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	8000003f 	.word	0x8000003f

08001968 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fff0 	bl	800095a <LL_ADC_IsDisableOngoing>
 800197a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe ffd7 	bl	8000934 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d040      	beq.n	8001a0e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d13d      	bne.n	8001a0e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030d 	and.w	r3, r3, #13
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10c      	bne.n	80019ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe ffb1 	bl	800090c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2203      	movs	r2, #3
 80019b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019b2:	f7fe fdf5 	bl	80005a0 <HAL_GetTick>
 80019b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019b8:	e022      	b.n	8001a00 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f043 0210 	orr.w	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e01c      	b.n	8001a10 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d6:	f7fe fde3 	bl	80005a0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d90d      	bls.n	8001a00 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e007      	b.n	8001a10 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e3      	bne.n	80019d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <LL_ADC_IsEnabled>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_IsEnabled+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_IsEnabled+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b09f      	sub	sp, #124	; 0x7c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e08f      	b.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d102      	bne.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	e001      	b.n	8001a9e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10b      	bne.n	8001abc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	f043 0220 	orr.w	r2, r3, #32
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e072      	b.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ffbd 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001ac4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ffb7 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d154      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d151      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ade:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02c      	beq.n	8001b42 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001afa:	035b      	lsls	r3, r3, #13
 8001afc:	430b      	orrs	r3, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b04:	4829      	ldr	r0, [pc, #164]	; (8001bac <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001b06:	f7ff ff87 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4828      	ldr	r0, [pc, #160]	; (8001bb0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001b0e:	f7ff ff83 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	431c      	orrs	r4, r3
 8001b16:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b18:	f7ff ff7e 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4323      	orrs	r3, r4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d137      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b2c:	f023 030f 	bic.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	6811      	ldr	r1, [r2, #0]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	6892      	ldr	r2, [r2, #8]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b40:	e028      	b.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b4e:	4817      	ldr	r0, [pc, #92]	; (8001bac <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001b50:	f7ff ff62 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b54:	4604      	mov	r4, r0
 8001b56:	4816      	ldr	r0, [pc, #88]	; (8001bb0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001b58:	f7ff ff5e 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	431c      	orrs	r4, r3
 8001b60:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b62:	f7ff ff59 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4323      	orrs	r3, r4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d112      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b76:	f023 030f 	bic.w	r3, r3, #15
 8001b7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b7e:	e009      	b.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001b92:	e000      	b.n	8001b96 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	377c      	adds	r7, #124	; 0x7c
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	50040000 	.word	0x50040000
 8001bb0:	50040100 	.word	0x50040100
 8001bb4:	50040300 	.word	0x50040300
 8001bb8:	50040200 	.word	0x50040200

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff47 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff5c 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8e 	bl	8001c74 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb0 	bl	8001cdc <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e17f      	b.n	8002098 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8171 	beq.w	8002092 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x38>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b12      	cmp	r3, #18
 8001dbe:	d123      	bne.n	8001e08 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	6939      	ldr	r1, [r7, #16]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d00b      	beq.n	8001e5c <HAL_GPIO_Init+0xd4>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d007      	beq.n	8001e5c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e50:	2b11      	cmp	r3, #17
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d118      	bne.n	8001efc <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80ac 	beq.w	8002092 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HAL_GPIO_Init+0x32c>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3e:	4a5d      	ldr	r2, [pc, #372]	; (80020b4 <HAL_GPIO_Init+0x32c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6613      	str	r3, [r2, #96]	; 0x60
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_GPIO_Init+0x32c>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f52:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <HAL_GPIO_Init+0x330>)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x242>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4e      	ldr	r2, [pc, #312]	; (80020bc <HAL_GPIO_Init+0x334>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x23e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <HAL_GPIO_Init+0x338>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x23a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	; (80020c4 <HAL_GPIO_Init+0x33c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x236>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_GPIO_Init+0x340>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x232>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <HAL_GPIO_Init+0x344>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x22e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	; (80020d0 <HAL_GPIO_Init+0x348>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x22a>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e00c      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00a      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fdc:	4936      	ldr	r1, [pc, #216]	; (80020b8 <HAL_GPIO_Init+0x330>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae78 	bne.w	8001d98 <HAL_GPIO_Init+0x10>
  }
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010000 	.word	0x40010000
 80020bc:	48000400 	.word	0x48000400
 80020c0:	48000800 	.word	0x48000800
 80020c4:	48000c00 	.word	0x48000c00
 80020c8:	48001000 	.word	0x48001000
 80020cc:	48001400 	.word	0x48001400
 80020d0:	48001800 	.word	0x48001800
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_PWREx_GetVoltageRange+0x18>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d130      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d038      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002168:	e002      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d102      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f2      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d110      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e00f      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a2:	d007      	beq.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ac:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000
 80021c8:	20000008 	.word	0x20000008
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e39d      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	4ba4      	ldr	r3, [pc, #656]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ec:	4ba1      	ldr	r3, [pc, #644]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80e1 	beq.w	80023c6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_RCC_OscConfig+0x4a>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	f040 8088 	bne.w	8002322 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b01      	cmp	r3, #1
 8002216:	f040 8084 	bne.w	8002322 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800221a:	4b96      	ldr	r3, [pc, #600]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x62>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e375      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1a      	ldr	r2, [r3, #32]
 8002236:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_RCC_OscConfig+0x7c>
 8002242:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224a:	e005      	b.n	8002258 <HAL_RCC_OscConfig+0x88>
 800224c:	4b89      	ldr	r3, [pc, #548]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002258:	4293      	cmp	r3, r2
 800225a:	d223      	bcs.n	80022a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fd09 	bl	8002c78 <RCC_SetFlashLatencyFromMSIRange>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e356      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a7f      	ldr	r2, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002276:	f043 0308 	orr.w	r3, r3, #8
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b7d      	ldr	r3, [pc, #500]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	497a      	ldr	r1, [pc, #488]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228e:	4b79      	ldr	r3, [pc, #484]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	4975      	ldr	r1, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
 80022a2:	e022      	b.n	80022ea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a4:	4b73      	ldr	r3, [pc, #460]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a72      	ldr	r2, [pc, #456]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b70      	ldr	r3, [pc, #448]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	496d      	ldr	r1, [pc, #436]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c2:	4b6c      	ldr	r3, [pc, #432]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	4968      	ldr	r1, [pc, #416]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fccc 	bl	8002c78 <RCC_SetFlashLatencyFromMSIRange>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e319      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ea:	f000 fc03 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b60      	ldr	r3, [pc, #384]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x2a8>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	fa21 f303 	lsr.w	r3, r1, r3
 8002306:	4a5d      	ldr	r2, [pc, #372]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_OscConfig+0x2b0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f8fa 	bl	8000508 <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d052      	beq.n	80023c4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	e2fd      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d032      	beq.n	8002390 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800232a:	4b52      	ldr	r3, [pc, #328]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002336:	f7fe f933 	bl	80005a0 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233e:	f7fe f92f 	bl	80005a0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e2e6      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235c:	4b45      	ldr	r3, [pc, #276]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a44      	ldr	r2, [pc, #272]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	493a      	ldr	r1, [pc, #232]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
 800238e:	e01a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002390:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a37      	ldr	r2, [pc, #220]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800239c:	f7fe f900 	bl	80005a0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a4:	f7fe f8fc 	bl	80005a0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e2b3      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1d4>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d074      	beq.n	80024bc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_OscConfig+0x214>
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d10e      	bne.n	80023fc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d064      	beq.n	80024ba <HAL_RCC_OscConfig+0x2ea>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d160      	bne.n	80024ba <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e290      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x244>
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0x280>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x268>
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x280>
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_RCC_OscConfig+0x2a4>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01c      	beq.n	8002492 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe f8a2 	bl	80005a0 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	e011      	b.n	8002484 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe f89e 	bl	80005a0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d90a      	bls.n	8002484 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e255      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	08004688 	.word	0x08004688
 800247c:	20000008 	.word	0x20000008
 8002480:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002484:	4bae      	ldr	r3, [pc, #696]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0e7      	beq.n	8002460 <HAL_RCC_OscConfig+0x290>
 8002490:	e014      	b.n	80024bc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe f885 	bl	80005a0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249a:	f7fe f881 	bl	80005a0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e238      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ac:	4ba4      	ldr	r3, [pc, #656]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x2ca>
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d060      	beq.n	800258a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x30a>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d119      	bne.n	8002508 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024da:	4b99      	ldr	r3, [pc, #612]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x322>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e215      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b93      	ldr	r3, [pc, #588]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	498f      	ldr	r1, [pc, #572]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002506:	e040      	b.n	800258a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d023      	beq.n	8002558 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a8a      	ldr	r2, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe f840 	bl	80005a0 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7fe f83c 	bl	80005a0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1f3      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	497b      	ldr	r1, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
 8002556:	e018      	b.n	800258a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002558:	4b79      	ldr	r3, [pc, #484]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a78      	ldr	r2, [pc, #480]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 800255e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe f81c 	bl	80005a0 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256c:	f7fe f818 	bl	80005a0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1cf      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d03c      	beq.n	8002610 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259e:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fd fff7 	bl	80005a0 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fd fff3 	bl	80005a0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1aa      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c8:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ef      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3e6>
 80025d6:	e01b      	b.n	8002610 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025de:	4a58      	ldr	r2, [pc, #352]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fd ffda 	bl	80005a0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fd ffd6 	bl	80005a0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e18d      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ef      	bne.n	80025f0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a5 	beq.w	8002768 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4a43      	ldr	r2, [pc, #268]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_OscConfig+0x574>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x574>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a3a      	ldr	r2, [pc, #232]	; (8002744 <HAL_RCC_OscConfig+0x574>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fd ff9d 	bl	80005a0 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fd ff99 	bl	80005a0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e150      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCC_OscConfig+0x574>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4d2>
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a0:	e024      	b.n	80026ec <HAL_RCC_OscConfig+0x51c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d110      	bne.n	80026cc <HAL_RCC_OscConfig+0x4fc>
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x51c>
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d016      	beq.n	8002722 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fd ff54 	bl	80005a0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fd ff50 	bl	80005a0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e105      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x570>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ed      	beq.n	80026fc <HAL_RCC_OscConfig+0x52c>
 8002720:	e019      	b.n	8002756 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fd ff3d 	bl	80005a0 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	e00e      	b.n	8002748 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fd ff39 	bl	80005a0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d905      	bls.n	8002748 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ee      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002748:	4b77      	ldr	r3, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e9      	bne.n	800272a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	4a71      	ldr	r2, [pc, #452]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002766:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80d5 	beq.w	800291c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	f000 808e 	beq.w	8002896 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	2b02      	cmp	r3, #2
 8002780:	d15b      	bne.n	800283a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b69      	ldr	r3, [pc, #420]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a68      	ldr	r2, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fd ff07 	bl	80005a0 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fd ff03 	bl	80005a0 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0ba      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a8:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x75c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ce:	0212      	lsls	r2, r2, #8
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027d6:	0852      	lsrs	r2, r2, #1
 80027d8:	3a01      	subs	r2, #1
 80027da:	0552      	lsls	r2, r2, #21
 80027dc:	4311      	orrs	r1, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027e2:	0852      	lsrs	r2, r2, #1
 80027e4:	3a01      	subs	r2, #1
 80027e6:	0652      	lsls	r2, r2, #25
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ee:	0912      	lsrs	r2, r2, #4
 80027f0:	0452      	lsls	r2, r2, #17
 80027f2:	430a      	orrs	r2, r1
 80027f4:	494c      	ldr	r1, [pc, #304]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a4a      	ldr	r2, [pc, #296]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002804:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002806:	4b48      	ldr	r3, [pc, #288]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4a47      	ldr	r2, [pc, #284]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 800280c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002810:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fd fec5 	bl	80005a0 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7fd fec1 	bl	80005a0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e078      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x64a>
 8002838:	e070      	b.n	800291c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002844:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002852:	4b35      	ldr	r3, [pc, #212]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4a34      	ldr	r2, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002858:	f023 0303 	bic.w	r3, r3, #3
 800285c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800285e:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 8002864:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fd fe97 	bl	80005a0 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7fd fe93 	bl	80005a0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e04a      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x6a6>
 8002894:	e042      	b.n	800291c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e03d      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_OscConfig+0x758>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d130      	bne.n	8002918 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	3b01      	subs	r3, #1
 80028c2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d127      	bne.n	8002918 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d11f      	bne.n	8002918 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e2:	2a07      	cmp	r2, #7
 80028e4:	bf14      	ite	ne
 80028e6:	2201      	movne	r2, #1
 80028e8:	2200      	moveq	r2, #0
 80028ea:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d113      	bne.n	8002918 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	3b01      	subs	r3, #1
 80028fe:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d109      	bne.n	8002918 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	3b01      	subs	r3, #1
 8002912:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	f99d808c 	.word	0xf99d808c

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0c8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d910      	bls.n	8002974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4961      	ldr	r1, [pc, #388]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b0      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d04c      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002988:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d121      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e09e      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d115      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e092      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b8:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e086      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e07e      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029d8:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 0203 	bic.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	493f      	ldr	r1, [pc, #252]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ea:	f7fd fdd9 	bl	80005a0 <HAL_GetTick>
 80029ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f2:	f7fd fdd5 	bl	80005a0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e066      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 020c 	and.w	r2, r3, #12
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d1eb      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	492c      	ldr	r1, [pc, #176]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d210      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 0207 	bic.w	r2, r3, #7
 8002a4e:	4924      	ldr	r1, [pc, #144]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e036      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4918      	ldr	r1, [pc, #96]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4910      	ldr	r1, [pc, #64]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa6:	f000 f825 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002aaa:	4601      	mov	r1, r0
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd1c 	bl	8000508 <HAL_InitTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08004688 	.word	0x08004688
 8002aec:	20000008 	.word	0x20000008
 8002af0:	20000000 	.word	0x20000000

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0c:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d121      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d11e      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b28:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e005      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e004      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d133      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0xaa>
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9a:	617b      	str	r3, [r7, #20]
      break;
 8002b9c:	e005      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba0:	617b      	str	r3, [r7, #20]
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	617b      	str	r3, [r7, #20]
      break;
 8002ba8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	fb02 f203 	mul.w	r2, r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0e5b      	lsrs	r3, r3, #25
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bea:	69bb      	ldr	r3, [r7, #24]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3724      	adds	r7, #36	; 0x24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	080046a0 	.word	0x080046a0
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	007a1200 	.word	0x007a1200

08002c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000008 	.word	0x20000008

08002c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c24:	f7ff fff0 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08004698 	.word	0x08004698

08002c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c50:	f7ff ffda 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c54:	4601      	mov	r1, r0
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	0adb      	lsrs	r3, r3, #11
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08004698 	.word	0x08004698

08002c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c90:	f7ff fa3a 	bl	8002108 <HAL_PWREx_GetVoltageRange>
 8002c94:	6178      	str	r0, [r7, #20]
 8002c96:	e014      	b.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cb0:	f7ff fa2a 	bl	8002108 <HAL_PWREx_GetVoltageRange>
 8002cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc8:	d10b      	bne.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d919      	bls.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8002cd4:	d902      	bls.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	e013      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cdc:	2301      	movs	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e010      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d902      	bls.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ce8:	2303      	movs	r3, #3
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e00a      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d102      	bne.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e004      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b70      	cmp	r3, #112	; 0x70
 8002cfe:	d101      	bne.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d00:	2301      	movs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 0207 	bic.w	r2, r3, #7
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40022000 	.word	0x40022000

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d40:	2300      	movs	r3, #0
 8002d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d44:	2300      	movs	r3, #0
 8002d46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d03f      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5c:	d01c      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d802      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002d68:	e01f      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d6e:	d003      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d74:	d01c      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002d76:	e018      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d78:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a84      	ldr	r2, [pc, #528]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d84:	e015      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fab9 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d96:	e00c      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fba0 	bl	80034e4 <RCCEx_PLLSAI2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002da8:	e003      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	74fb      	strb	r3, [r7, #19]
      break;
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002db8:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc6:	4972      	ldr	r1, [pc, #456]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dce:	e001      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d03f      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d01c      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002dea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dee:	d802      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002df4:	e01f      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002dfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e00:	d01c      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e02:	e018      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e10:	e015      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa73 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e22:	e00c      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3320      	adds	r3, #32
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fb5a 	bl	80034e4 <RCCEx_PLLSAI2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e34:	e003      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	74fb      	strb	r3, [r7, #19]
      break;
 8002e3a:	e000      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e44:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e52:	494f      	ldr	r1, [pc, #316]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e5a:	e001      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a0 	beq.w	8002fae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	4a40      	ldr	r2, [pc, #256]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6593      	str	r3, [r2, #88]	; 0x58
 8002e94:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3a      	ldr	r2, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb0:	f7fd fb76 	bl	80005a0 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eb6:	e009      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fd fb72 	bl	80005a0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d902      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	74fb      	strb	r3, [r7, #19]
        break;
 8002eca:	e005      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d15c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01f      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d019      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fb31 	bl	80005a0 <HAL_GetTick>
 8002f3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f40:	e00b      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fd fb2d 	bl	80005a0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d902      	bls.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	74fb      	strb	r3, [r7, #19]
            break;
 8002f58:	e006      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ec      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f86:	e009      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9c:	7c7b      	ldrb	r3, [r7, #17]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b9e      	ldr	r3, [pc, #632]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a9d      	ldr	r2, [pc, #628]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fba:	4b98      	ldr	r3, [pc, #608]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f023 0203 	bic.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	4994      	ldr	r1, [pc, #592]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fdc:	4b8f      	ldr	r3, [pc, #572]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 020c 	bic.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	498c      	ldr	r1, [pc, #560]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ffe:	4b87      	ldr	r3, [pc, #540]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4983      	ldr	r1, [pc, #524]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003020:	4b7e      	ldr	r3, [pc, #504]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	497b      	ldr	r1, [pc, #492]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	4972      	ldr	r1, [pc, #456]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003064:	4b6d      	ldr	r3, [pc, #436]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	496a      	ldr	r1, [pc, #424]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003086:	4b65      	ldr	r3, [pc, #404]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	4961      	ldr	r1, [pc, #388]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030a8:	4b5c      	ldr	r3, [pc, #368]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	4959      	ldr	r1, [pc, #356]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	4950      	ldr	r1, [pc, #320]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ec:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	4948      	ldr	r1, [pc, #288]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800310e:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	493f      	ldr	r1, [pc, #252]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d028      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003130:	4b3a      	ldr	r3, [pc, #232]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313e:	4937      	ldr	r1, [pc, #220]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800314e:	d106      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a31      	ldr	r2, [pc, #196]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800315a:	60d3      	str	r3, [r2, #12]
 800315c:	e011      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003166:	d10c      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f8c8 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	491f      	ldr	r1, [pc, #124]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ac:	d106      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b8:	60d3      	str	r3, [r2, #12]
 80031ba:	e011      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f899 	bl	8003304 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02b      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	4908      	ldr	r1, [pc, #32]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800320a:	d109      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a02      	ldr	r2, [pc, #8]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
 8003218:	e014      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2101      	movs	r1, #1
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f867 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02f      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800325e:	4928      	ldr	r1, [pc, #160]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326e:	d10d      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f844 	bl	8003304 <RCCEx_PLLSAI1_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d014      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	74bb      	strb	r3, [r7, #18]
 800328a:	e011      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3320      	adds	r3, #32
 800329a:	2102      	movs	r1, #2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f921 	bl	80034e4 <RCCEx_PLLSAI2_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	490d      	ldr	r1, [pc, #52]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ee:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0203 	and.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
       ||
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003336:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
       ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d044      	beq.n	80033d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e041      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d00c      	beq.n	8003372 <RCCEx_PLLSAI1_Config+0x6e>
 8003358:	2b03      	cmp	r3, #3
 800335a:	d013      	beq.n	8003384 <RCCEx_PLLSAI1_Config+0x80>
 800335c:	2b01      	cmp	r3, #1
 800335e:	d120      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003360:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d11d      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003370:	e01a      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003382:	e013      	b.n	80033ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003384:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033a0:	e006      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      break;
 80033a6:	e004      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033a8:	bf00      	nop
 80033aa:	e002      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033b8:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	430b      	orrs	r3, r1
 80033ce:	4944      	ldr	r1, [pc, #272]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d17d      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e6:	f7fd f8db 	bl	80005a0 <HAL_GetTick>
 80033ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ec:	e009      	b.n	8003402 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ee:	f7fd f8d7 	bl	80005a0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d902      	bls.n	8003402 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003400:	e005      	b.n	800340e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ef      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d160      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d111      	bne.n	800343e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6892      	ldr	r2, [r2, #8]
 800342a:	0211      	lsls	r1, r2, #8
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	0912      	lsrs	r2, r2, #4
 8003432:	0452      	lsls	r2, r2, #17
 8003434:	430a      	orrs	r2, r1
 8003436:	492a      	ldr	r1, [pc, #168]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]
 800343c:	e027      	b.n	800348e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d112      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800344c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	0211      	lsls	r1, r2, #8
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6912      	ldr	r2, [r2, #16]
 800345a:	0852      	lsrs	r2, r2, #1
 800345c:	3a01      	subs	r2, #1
 800345e:	0552      	lsls	r2, r2, #21
 8003460:	430a      	orrs	r2, r1
 8003462:	491f      	ldr	r1, [pc, #124]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	610b      	str	r3, [r1, #16]
 8003468:	e011      	b.n	800348e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003472:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	0211      	lsls	r1, r2, #8
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6952      	ldr	r2, [r2, #20]
 8003480:	0852      	lsrs	r2, r2, #1
 8003482:	3a01      	subs	r2, #1
 8003484:	0652      	lsls	r2, r2, #25
 8003486:	430a      	orrs	r2, r1
 8003488:	4915      	ldr	r1, [pc, #84]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003498:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fd f881 	bl	80005a0 <HAL_GetTick>
 800349e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a0:	e009      	b.n	80034b6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a2:	f7fd f87d 	bl	80005a0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d902      	bls.n	80034b6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	73fb      	strb	r3, [r7, #15]
          break;
 80034b4:	e005      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ef      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000

080034e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034f2:	4b68      	ldr	r3, [pc, #416]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d018      	beq.n	8003530 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034fe:	4b65      	ldr	r3, [pc, #404]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d10d      	bne.n	800352a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
       ||
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003516:	4b5f      	ldr	r3, [pc, #380]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
       ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d044      	beq.n	80035b4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e041      	b.n	80035b4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d00c      	beq.n	8003552 <RCCEx_PLLSAI2_Config+0x6e>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d013      	beq.n	8003564 <RCCEx_PLLSAI2_Config+0x80>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d120      	bne.n	8003582 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003540:	4b54      	ldr	r3, [pc, #336]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e01a      	b.n	8003588 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003552:	4b50      	ldr	r3, [pc, #320]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003562:	e013      	b.n	800358c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003580:	e006      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e004      	b.n	8003592 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003590:	bf00      	nop
    }

    if(status == HAL_OK)
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003598:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	430b      	orrs	r3, r1
 80035ae:	4939      	ldr	r1, [pc, #228]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d167      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a35      	ldr	r2, [pc, #212]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c6:	f7fc ffeb 	bl	80005a0 <HAL_GetTick>
 80035ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035cc:	e009      	b.n	80035e2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035ce:	f7fc ffe7 	bl	80005a0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d902      	bls.n	80035e2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	73fb      	strb	r3, [r7, #15]
        break;
 80035e0:	e005      	b.n	80035ee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ef      	bne.n	80035ce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d14a      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d111      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	0211      	lsls	r1, r2, #8
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68d2      	ldr	r2, [r2, #12]
 8003610:	0912      	lsrs	r2, r2, #4
 8003612:	0452      	lsls	r2, r2, #17
 8003614:	430a      	orrs	r2, r1
 8003616:	491f      	ldr	r1, [pc, #124]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	614b      	str	r3, [r1, #20]
 800361c:	e011      	b.n	8003642 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003626:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6892      	ldr	r2, [r2, #8]
 800362e:	0211      	lsls	r1, r2, #8
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6912      	ldr	r2, [r2, #16]
 8003634:	0852      	lsrs	r2, r2, #1
 8003636:	3a01      	subs	r2, #1
 8003638:	0652      	lsls	r2, r2, #25
 800363a:	430a      	orrs	r2, r1
 800363c:	4915      	ldr	r1, [pc, #84]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a13      	ldr	r2, [pc, #76]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fc ffa7 	bl	80005a0 <HAL_GetTick>
 8003652:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003654:	e009      	b.n	800366a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003656:	f7fc ffa3 	bl	80005a0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d902      	bls.n	800366a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	73fb      	strb	r3, [r7, #15]
          break;
 8003668:	e005      	b.n	8003676 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003686:	4313      	orrs	r3, r2
 8003688:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e040      	b.n	800372c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fedc 	bl	8004478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f82c 	bl	8003734 <UART_SetConfig>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e022      	b.n	800372c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fb68 	bl	8003dc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fbef 	bl	8003f08 <UART_CheckIdleState>
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003734:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003738:	b088      	sub	sp, #32
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4313      	orrs	r3, r2
 8003760:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4bac      	ldr	r3, [pc, #688]	; (8003a1c <UART_SetConfig+0x2e8>)
 800376a:	4013      	ands	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	69f9      	ldr	r1, [r7, #28]
 8003772:	430b      	orrs	r3, r1
 8003774:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4aa2      	ldr	r2, [pc, #648]	; (8003a20 <UART_SetConfig+0x2ec>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a99      	ldr	r2, [pc, #612]	; (8003a24 <UART_SetConfig+0x2f0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d121      	bne.n	8003808 <UART_SetConfig+0xd4>
 80037c4:	4b98      	ldr	r3, [pc, #608]	; (8003a28 <UART_SetConfig+0x2f4>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d816      	bhi.n	8003800 <UART_SetConfig+0xcc>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <UART_SetConfig+0xa4>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f5 	.word	0x080037f5
 80037e0:	080037ef 	.word	0x080037ef
 80037e4:	080037fb 	.word	0x080037fb
 80037e8:	2301      	movs	r3, #1
 80037ea:	76fb      	strb	r3, [r7, #27]
 80037ec:	e0e8      	b.n	80039c0 <UART_SetConfig+0x28c>
 80037ee:	2302      	movs	r3, #2
 80037f0:	76fb      	strb	r3, [r7, #27]
 80037f2:	e0e5      	b.n	80039c0 <UART_SetConfig+0x28c>
 80037f4:	2304      	movs	r3, #4
 80037f6:	76fb      	strb	r3, [r7, #27]
 80037f8:	e0e2      	b.n	80039c0 <UART_SetConfig+0x28c>
 80037fa:	2308      	movs	r3, #8
 80037fc:	76fb      	strb	r3, [r7, #27]
 80037fe:	e0df      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003800:	2310      	movs	r3, #16
 8003802:	76fb      	strb	r3, [r7, #27]
 8003804:	bf00      	nop
 8003806:	e0db      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a87      	ldr	r2, [pc, #540]	; (8003a2c <UART_SetConfig+0x2f8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d134      	bne.n	800387c <UART_SetConfig+0x148>
 8003812:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <UART_SetConfig+0x2f4>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d829      	bhi.n	8003874 <UART_SetConfig+0x140>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0xf4>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	0800385d 	.word	0x0800385d
 800382c:	08003875 	.word	0x08003875
 8003830:	08003875 	.word	0x08003875
 8003834:	08003875 	.word	0x08003875
 8003838:	08003869 	.word	0x08003869
 800383c:	08003875 	.word	0x08003875
 8003840:	08003875 	.word	0x08003875
 8003844:	08003875 	.word	0x08003875
 8003848:	08003863 	.word	0x08003863
 800384c:	08003875 	.word	0x08003875
 8003850:	08003875 	.word	0x08003875
 8003854:	08003875 	.word	0x08003875
 8003858:	0800386f 	.word	0x0800386f
 800385c:	2300      	movs	r3, #0
 800385e:	76fb      	strb	r3, [r7, #27]
 8003860:	e0ae      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003862:	2302      	movs	r3, #2
 8003864:	76fb      	strb	r3, [r7, #27]
 8003866:	e0ab      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003868:	2304      	movs	r3, #4
 800386a:	76fb      	strb	r3, [r7, #27]
 800386c:	e0a8      	b.n	80039c0 <UART_SetConfig+0x28c>
 800386e:	2308      	movs	r3, #8
 8003870:	76fb      	strb	r3, [r7, #27]
 8003872:	e0a5      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003874:	2310      	movs	r3, #16
 8003876:	76fb      	strb	r3, [r7, #27]
 8003878:	bf00      	nop
 800387a:	e0a1      	b.n	80039c0 <UART_SetConfig+0x28c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	; (8003a30 <UART_SetConfig+0x2fc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d120      	bne.n	80038c8 <UART_SetConfig+0x194>
 8003886:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <UART_SetConfig+0x2f4>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003890:	2b10      	cmp	r3, #16
 8003892:	d00f      	beq.n	80038b4 <UART_SetConfig+0x180>
 8003894:	2b10      	cmp	r3, #16
 8003896:	d802      	bhi.n	800389e <UART_SetConfig+0x16a>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <UART_SetConfig+0x174>
 800389c:	e010      	b.n	80038c0 <UART_SetConfig+0x18c>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d005      	beq.n	80038ae <UART_SetConfig+0x17a>
 80038a2:	2b30      	cmp	r3, #48	; 0x30
 80038a4:	d009      	beq.n	80038ba <UART_SetConfig+0x186>
 80038a6:	e00b      	b.n	80038c0 <UART_SetConfig+0x18c>
 80038a8:	2300      	movs	r3, #0
 80038aa:	76fb      	strb	r3, [r7, #27]
 80038ac:	e088      	b.n	80039c0 <UART_SetConfig+0x28c>
 80038ae:	2302      	movs	r3, #2
 80038b0:	76fb      	strb	r3, [r7, #27]
 80038b2:	e085      	b.n	80039c0 <UART_SetConfig+0x28c>
 80038b4:	2304      	movs	r3, #4
 80038b6:	76fb      	strb	r3, [r7, #27]
 80038b8:	e082      	b.n	80039c0 <UART_SetConfig+0x28c>
 80038ba:	2308      	movs	r3, #8
 80038bc:	76fb      	strb	r3, [r7, #27]
 80038be:	e07f      	b.n	80039c0 <UART_SetConfig+0x28c>
 80038c0:	2310      	movs	r3, #16
 80038c2:	76fb      	strb	r3, [r7, #27]
 80038c4:	bf00      	nop
 80038c6:	e07b      	b.n	80039c0 <UART_SetConfig+0x28c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a59      	ldr	r2, [pc, #356]	; (8003a34 <UART_SetConfig+0x300>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d120      	bne.n	8003914 <UART_SetConfig+0x1e0>
 80038d2:	4b55      	ldr	r3, [pc, #340]	; (8003a28 <UART_SetConfig+0x2f4>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d00f      	beq.n	8003900 <UART_SetConfig+0x1cc>
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d802      	bhi.n	80038ea <UART_SetConfig+0x1b6>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <UART_SetConfig+0x1c0>
 80038e8:	e010      	b.n	800390c <UART_SetConfig+0x1d8>
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d005      	beq.n	80038fa <UART_SetConfig+0x1c6>
 80038ee:	2bc0      	cmp	r3, #192	; 0xc0
 80038f0:	d009      	beq.n	8003906 <UART_SetConfig+0x1d2>
 80038f2:	e00b      	b.n	800390c <UART_SetConfig+0x1d8>
 80038f4:	2300      	movs	r3, #0
 80038f6:	76fb      	strb	r3, [r7, #27]
 80038f8:	e062      	b.n	80039c0 <UART_SetConfig+0x28c>
 80038fa:	2302      	movs	r3, #2
 80038fc:	76fb      	strb	r3, [r7, #27]
 80038fe:	e05f      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003900:	2304      	movs	r3, #4
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e05c      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003906:	2308      	movs	r3, #8
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e059      	b.n	80039c0 <UART_SetConfig+0x28c>
 800390c:	2310      	movs	r3, #16
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	bf00      	nop
 8003912:	e055      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <UART_SetConfig+0x304>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d124      	bne.n	8003968 <UART_SetConfig+0x234>
 800391e:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <UART_SetConfig+0x2f4>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d012      	beq.n	8003954 <UART_SetConfig+0x220>
 800392e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003932:	d802      	bhi.n	800393a <UART_SetConfig+0x206>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <UART_SetConfig+0x214>
 8003938:	e012      	b.n	8003960 <UART_SetConfig+0x22c>
 800393a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393e:	d006      	beq.n	800394e <UART_SetConfig+0x21a>
 8003940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003944:	d009      	beq.n	800395a <UART_SetConfig+0x226>
 8003946:	e00b      	b.n	8003960 <UART_SetConfig+0x22c>
 8003948:	2300      	movs	r3, #0
 800394a:	76fb      	strb	r3, [r7, #27]
 800394c:	e038      	b.n	80039c0 <UART_SetConfig+0x28c>
 800394e:	2302      	movs	r3, #2
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e035      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003954:	2304      	movs	r3, #4
 8003956:	76fb      	strb	r3, [r7, #27]
 8003958:	e032      	b.n	80039c0 <UART_SetConfig+0x28c>
 800395a:	2308      	movs	r3, #8
 800395c:	76fb      	strb	r3, [r7, #27]
 800395e:	e02f      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003960:	2310      	movs	r3, #16
 8003962:	76fb      	strb	r3, [r7, #27]
 8003964:	bf00      	nop
 8003966:	e02b      	b.n	80039c0 <UART_SetConfig+0x28c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <UART_SetConfig+0x2ec>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d124      	bne.n	80039bc <UART_SetConfig+0x288>
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <UART_SetConfig+0x2f4>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d012      	beq.n	80039a8 <UART_SetConfig+0x274>
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d802      	bhi.n	800398e <UART_SetConfig+0x25a>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <UART_SetConfig+0x268>
 800398c:	e012      	b.n	80039b4 <UART_SetConfig+0x280>
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	d006      	beq.n	80039a2 <UART_SetConfig+0x26e>
 8003994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003998:	d009      	beq.n	80039ae <UART_SetConfig+0x27a>
 800399a:	e00b      	b.n	80039b4 <UART_SetConfig+0x280>
 800399c:	2300      	movs	r3, #0
 800399e:	76fb      	strb	r3, [r7, #27]
 80039a0:	e00e      	b.n	80039c0 <UART_SetConfig+0x28c>
 80039a2:	2302      	movs	r3, #2
 80039a4:	76fb      	strb	r3, [r7, #27]
 80039a6:	e00b      	b.n	80039c0 <UART_SetConfig+0x28c>
 80039a8:	2304      	movs	r3, #4
 80039aa:	76fb      	strb	r3, [r7, #27]
 80039ac:	e008      	b.n	80039c0 <UART_SetConfig+0x28c>
 80039ae:	2308      	movs	r3, #8
 80039b0:	76fb      	strb	r3, [r7, #27]
 80039b2:	e005      	b.n	80039c0 <UART_SetConfig+0x28c>
 80039b4:	2310      	movs	r3, #16
 80039b6:	76fb      	strb	r3, [r7, #27]
 80039b8:	bf00      	nop
 80039ba:	e001      	b.n	80039c0 <UART_SetConfig+0x28c>
 80039bc:	2310      	movs	r3, #16
 80039be:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <UART_SetConfig+0x2ec>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f040 80fa 	bne.w	8003bc0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039cc:	7efb      	ldrb	r3, [r7, #27]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d836      	bhi.n	8003a40 <UART_SetConfig+0x30c>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0x2a4>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	08003a41 	.word	0x08003a41
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a41 	.word	0x08003a41
 80039e8:	08003a0b 	.word	0x08003a0b
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a41 	.word	0x08003a41
 80039f8:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80039fc:	f7ff f910 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a02:	e020      	b.n	8003a46 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x308>)
 8003a06:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a08:	e01d      	b.n	8003a46 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7ff f873 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003a0e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a10:	e019      	b.n	8003a46 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a18:	e015      	b.n	8003a46 <UART_SetConfig+0x312>
 8003a1a:	bf00      	nop
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40008000 	.word	0x40008000
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	40004800 	.word	0x40004800
 8003a34:	40004c00 	.word	0x40004c00
 8003a38:	40005000 	.word	0x40005000
 8003a3c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	74fb      	strb	r3, [r7, #19]
        break;
 8003a44:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 81ac 	beq.w	8003da6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d305      	bcc.n	8003a6a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d902      	bls.n	8003a70 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	74fb      	strb	r3, [r7, #19]
 8003a6e:	e19a      	b.n	8003da6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003a70:	7efb      	ldrb	r3, [r7, #27]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	f200 8091 	bhi.w	8003b9a <UART_SetConfig+0x466>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0x34c>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003b9b 	.word	0x08003b9b
 8003a88:	08003af1 	.word	0x08003af1
 8003a8c:	08003b9b 	.word	0x08003b9b
 8003a90:	08003b25 	.word	0x08003b25
 8003a94:	08003b9b 	.word	0x08003b9b
 8003a98:	08003b9b 	.word	0x08003b9b
 8003a9c:	08003b9b 	.word	0x08003b9b
 8003aa0:	08003b71 	.word	0x08003b71
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003aa4:	f7ff f8bc 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	0214      	lsls	r4, r2, #8
 8003aba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003abe:	020b      	lsls	r3, r1, #8
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6852      	ldr	r2, [r2, #4]
 8003ac4:	0852      	lsrs	r2, r2, #1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	eb13 0b01 	adds.w	fp, r3, r1
 8003ad0:	eb44 0c02 	adc.w	ip, r4, r2
 8003ad4:	4658      	mov	r0, fp
 8003ad6:	4661      	mov	r1, ip
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	f7fc fb70 	bl	80001c8 <__aeabi_uldivmod>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003aee:	e057      	b.n	8003ba0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	49b1      	ldr	r1, [pc, #708]	; (8003dc0 <UART_SetConfig+0x68c>)
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	eb13 0b01 	adds.w	fp, r3, r1
 8003b04:	eb44 0c02 	adc.w	ip, r4, r2
 8003b08:	4658      	mov	r0, fp
 8003b0a:	4661      	mov	r1, ip
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f04f 0400 	mov.w	r4, #0
 8003b14:	461a      	mov	r2, r3
 8003b16:	4623      	mov	r3, r4
 8003b18:	f7fc fb56 	bl	80001c8 <__aeabi_uldivmod>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	460c      	mov	r4, r1
 8003b20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b22:	e03d      	b.n	8003ba0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b24:	f7fe ffe6 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	0214      	lsls	r4, r2, #8
 8003b3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b3e:	020b      	lsls	r3, r1, #8
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6852      	ldr	r2, [r2, #4]
 8003b44:	0852      	lsrs	r2, r2, #1
 8003b46:	4611      	mov	r1, r2
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	eb13 0b01 	adds.w	fp, r3, r1
 8003b50:	eb44 0c02 	adc.w	ip, r4, r2
 8003b54:	4658      	mov	r0, fp
 8003b56:	4661      	mov	r1, ip
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	461a      	mov	r2, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	f7fc fb30 	bl	80001c8 <__aeabi_uldivmod>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b6e:	e017      	b.n	8003ba0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	f04f 0400 	mov.w	r4, #0
 8003b7a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003b7e:	f144 0100 	adc.w	r1, r4, #0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	f7fc fb1b 	bl	80001c8 <__aeabi_uldivmod>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b98:	e002      	b.n	8003ba0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b9e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba6:	d308      	bcc.n	8003bba <UART_SetConfig+0x486>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bae:	d204      	bcs.n	8003bba <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	e0f5      	b.n	8003da6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	74fb      	strb	r3, [r7, #19]
 8003bbe:	e0f2      	b.n	8003da6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc8:	d17f      	bne.n	8003cca <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003bca:	7efb      	ldrb	r3, [r7, #27]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d85c      	bhi.n	8003c8a <UART_SetConfig+0x556>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x4a4>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c39 	.word	0x08003c39
 8003be4:	08003c8b 	.word	0x08003c8b
 8003be8:	08003c55 	.word	0x08003c55
 8003bec:	08003c8b 	.word	0x08003c8b
 8003bf0:	08003c8b 	.word	0x08003c8b
 8003bf4:	08003c8b 	.word	0x08003c8b
 8003bf8:	08003c73 	.word	0x08003c73
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bfc:	f7ff f810 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003c00:	4603      	mov	r3, r0
 8003c02:	005a      	lsls	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c18:	e03a      	b.n	8003c90 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003c1a:	f7ff f817 	bl	8002c4c <HAL_RCC_GetPCLK2Freq>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	005a      	lsls	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c36:	e02b      	b.n	8003c90 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003c42:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6852      	ldr	r2, [r2, #4]
 8003c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c52:	e01d      	b.n	8003c90 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c54:	f7fe ff4e 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	005a      	lsls	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	441a      	add	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c70:	e00e      	b.n	8003c90 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c88:	e002      	b.n	8003c90 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	d916      	bls.n	8003cc4 <UART_SetConfig+0x590>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d212      	bcs.n	8003cc4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f023 030f 	bic.w	r3, r3, #15
 8003ca6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	897b      	ldrh	r3, [r7, #10]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	897a      	ldrh	r2, [r7, #10]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e070      	b.n	8003da6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	74fb      	strb	r3, [r7, #19]
 8003cc8:	e06d      	b.n	8003da6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003cca:	7efb      	ldrb	r3, [r7, #27]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d859      	bhi.n	8003d84 <UART_SetConfig+0x650>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x5a4>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d19 	.word	0x08003d19
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003d85 	.word	0x08003d85
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003d85 	.word	0x08003d85
 8003cf0:	08003d85 	.word	0x08003d85
 8003cf4:	08003d85 	.word	0x08003d85
 8003cf8:	08003d6d 	.word	0x08003d6d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cfc:	f7fe ff90 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d16:	e038      	b.n	8003d8a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d18:	f7fe ff98 	bl	8002c4c <HAL_RCC_GetPCLK2Freq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	441a      	add	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d32:	e02a      	b.n	8003d8a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003d3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6852      	ldr	r2, [r2, #4]
 8003d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d4e:	e01c      	b.n	8003d8a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d50:	f7fe fed0 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d6a:	e00e      	b.n	8003d8a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d82:	e002      	b.n	8003d8a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	74fb      	strb	r3, [r7, #19]
        break;
 8003d88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b0f      	cmp	r3, #15
 8003d8e:	d908      	bls.n	8003da2 <UART_SetConfig+0x66e>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d96:	d204      	bcs.n	8003da2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e001      	b.n	8003da6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	f4240000 	.word	0xf4240000

08003dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01a      	beq.n	8003eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec2:	d10a      	bne.n	8003eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f16:	f7fc fb43 	bl	80005a0 <HAL_GetTick>
 8003f1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d10e      	bne.n	8003f48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f82a 	bl	8003f92 <UART_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e020      	b.n	8003f8a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d10e      	bne.n	8003f74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f814 	bl	8003f92 <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e00a      	b.n	8003f8a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa2:	e02a      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d026      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7fc faf8 	bl	80005a0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11b      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e00f      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d0c5      	beq.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004028:	f7fc fa4e 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800402c:	f000 f822 	bl	8004074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004030:	f000 f94e 	bl	80042d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004034:	f000 f91c 	bl	8004270 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004038:	f000 f8a4 	bl	8004184 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800403c:	480b      	ldr	r0, [pc, #44]	; (800406c <main+0x48>)
 800403e:	f7fc fe55 	bl	8000cec <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8004042:	2164      	movs	r1, #100	; 0x64
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <main+0x48>)
 8004046:	f7fc ff3f 	bl	8000ec8 <HAL_ADC_PollForConversion>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <main+0x38>
		  adc_val = HAL_ADC_GetValue(&hadc1);
 8004050:	4806      	ldr	r0, [pc, #24]	; (800406c <main+0x48>)
 8004052:	f7fd f809 	bl	8001068 <HAL_ADC_GetValue>
 8004056:	4602      	mov	r2, r0
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <main+0x4c>)
 800405a:	601a      	str	r2, [r3, #0]
	  }
	  HAL_ADC_Stop(&hadc1);		//talvez nao precise dessa linha
 800405c:	4803      	ldr	r0, [pc, #12]	; (800406c <main+0x48>)
 800405e:	f7fc feff 	bl	8000e60 <HAL_ADC_Stop>
	  HAL_Delay(50);
 8004062:	2032      	movs	r0, #50	; 0x32
 8004064:	f7fc faa8 	bl	80005b8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8004068:	e7e8      	b.n	800403c <main+0x18>
 800406a:	bf00      	nop
 800406c:	20000030 	.word	0x20000030
 8004070:	2000002c 	.word	0x2000002c

08004074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0b8      	sub	sp, #224	; 0xe0
 8004078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800407a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800407e:	2244      	movs	r2, #68	; 0x44
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 faec 	bl	8004660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004088:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004098:	463b      	mov	r3, r7
 800409a:	2288      	movs	r2, #136	; 0x88
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fade 	bl	8004660 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040a4:	2302      	movs	r3, #2
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040b2:	2310      	movs	r3, #16
 80040b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040b8:	2302      	movs	r3, #2
 80040ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040be:	2302      	movs	r3, #2
 80040c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80040ca:	230a      	movs	r3, #10
 80040cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80040d0:	2307      	movs	r3, #7
 80040d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040d6:	2302      	movs	r3, #2
 80040d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040dc:	2302      	movs	r3, #2
 80040de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe f872 	bl	80021d0 <HAL_RCC_OscConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80040f2:	f000 f955 	bl	80043a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f6:	230f      	movs	r3, #15
 80040f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040fc:	2303      	movs	r3, #3
 80040fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004118:	2104      	movs	r1, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fc08 	bl	8002930 <HAL_RCC_ClockConfig>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004126:	f000 f93b 	bl	80043a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800412a:	f244 0302 	movw	r3, #16386	; 0x4002
 800412e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004130:	2300      	movs	r3, #0
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004138:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800413a:	2302      	movs	r3, #2
 800413c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004142:	2308      	movs	r3, #8
 8004144:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004146:	2307      	movs	r3, #7
 8004148:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800414a:	2302      	movs	r3, #2
 800414c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800414e:	2302      	movs	r3, #2
 8004150:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004156:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004158:	463b      	mov	r3, r7
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fdec 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8004166:	f000 f91b 	bl	80043a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800416a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800416e:	f7fd ffd9 	bl	8002124 <HAL_PWREx_ControlVoltageScaling>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8004178:	f000 f912 	bl	80043a0 <Error_Handler>
  }
}
 800417c:	bf00      	nop
 800417e:	37e0      	adds	r7, #224	; 0xe0
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800418a:	f107 031c 	add.w	r3, r7, #28
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
 80041a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041a8:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <MX_ADC1_Init+0xe4>)
 80041aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041c6:	2204      	movs	r2, #4
 80041c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80041ca:	4b26      	ldr	r3, [pc, #152]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041d8:	2201      	movs	r2, #1
 80041da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041e4:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041ea:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <MX_ADC1_Init+0xe0>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <MX_ADC1_Init+0xe0>)
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004206:	4817      	ldr	r0, [pc, #92]	; (8004264 <MX_ADC1_Init+0xe0>)
 8004208:	f7fc fc1c 	bl	8000a44 <HAL_ADC_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8004212:	f000 f8c5 	bl	80043a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800421a:	f107 031c 	add.w	r3, r7, #28
 800421e:	4619      	mov	r1, r3
 8004220:	4810      	ldr	r0, [pc, #64]	; (8004264 <MX_ADC1_Init+0xe0>)
 8004222:	f7fd fc1f 	bl	8001a64 <HAL_ADCEx_MultiModeConfigChannel>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800422c:	f000 f8b8 	bl	80043a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <MX_ADC1_Init+0xe8>)
 8004232:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004234:	2306      	movs	r3, #6
 8004236:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004238:	2303      	movs	r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800423c:	237f      	movs	r3, #127	; 0x7f
 800423e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004240:	2304      	movs	r3, #4
 8004242:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4805      	ldr	r0, [pc, #20]	; (8004264 <MX_ADC1_Init+0xe0>)
 800424e:	f7fc ff19 	bl	8001084 <HAL_ADC_ConfigChannel>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004258:	f000 f8a2 	bl	80043a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800425c:	bf00      	nop
 800425e:	3728      	adds	r7, #40	; 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000030 	.word	0x20000030
 8004268:	50040000 	.word	0x50040000
 800426c:	04300002 	.word	0x04300002

08004270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004274:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <MX_USART2_UART_Init+0x5c>)
 8004278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 800427c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 8004284:	2200      	movs	r2, #0
 8004286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 800428a:	2200      	movs	r2, #0
 800428c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800428e:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 8004290:	2200      	movs	r2, #0
 8004292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 8004296:	220c      	movs	r2, #12
 8004298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 800429c:	2200      	movs	r2, #0
 800429e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042b2:	4805      	ldr	r0, [pc, #20]	; (80042c8 <MX_USART2_UART_Init+0x58>)
 80042b4:	f7ff f9f0 	bl	8003698 <HAL_UART_Init>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80042be:	f000 f86f 	bl	80043a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000094 	.word	0x20000094
 80042cc:	40004400 	.word	0x40004400

080042d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <MX_GPIO_Init+0xc4>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <MX_GPIO_Init+0xc4>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042f2:	4b28      	ldr	r3, [pc, #160]	; (8004394 <MX_GPIO_Init+0xc4>)
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042fe:	4b25      	ldr	r3, [pc, #148]	; (8004394 <MX_GPIO_Init+0xc4>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	4a24      	ldr	r2, [pc, #144]	; (8004394 <MX_GPIO_Init+0xc4>)
 8004304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <MX_GPIO_Init+0xc4>)
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004316:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <MX_GPIO_Init+0xc4>)
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <MX_GPIO_Init+0xc4>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <MX_GPIO_Init+0xc4>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <MX_GPIO_Init+0xc4>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	4a18      	ldr	r2, [pc, #96]	; (8004394 <MX_GPIO_Init+0xc4>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <MX_GPIO_Init+0xc4>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004346:	2200      	movs	r2, #0
 8004348:	2120      	movs	r1, #32
 800434a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800434e:	f7fd fec3 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <MX_GPIO_Init+0xc8>)
 800435a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	480d      	ldr	r0, [pc, #52]	; (800439c <MX_GPIO_Init+0xcc>)
 8004368:	f7fd fd0e 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800436c:	2320      	movs	r3, #32
 800436e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004370:	2301      	movs	r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004378:	2300      	movs	r3, #0
 800437a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004386:	f7fd fcff 	bl	8001d88 <HAL_GPIO_Init>

}
 800438a:	bf00      	nop
 800438c:	3728      	adds	r7, #40	; 0x28
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	10210000 	.word	0x10210000
 800439c:	48000800 	.word	0x48000800

080043a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_MspInit+0x44>)
 80043b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ba:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <HAL_MspInit+0x44>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6613      	str	r3, [r2, #96]	; 0x60
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_MspInit+0x44>)
 80043c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_MspInit+0x44>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <HAL_MspInit+0x44>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	; 0x58
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_MspInit+0x44>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000

080043f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <HAL_ADC_MspInit+0x74>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d123      	bne.n	8004462 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <HAL_ADC_MspInit+0x78>)
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	4a14      	ldr	r2, [pc, #80]	; (8004470 <HAL_ADC_MspInit+0x78>)
 8004420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_ADC_MspInit+0x78>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_ADC_MspInit+0x78>)
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_ADC_MspInit+0x78>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_ADC_MspInit+0x78>)
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800444a:	2301      	movs	r3, #1
 800444c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800444e:	230b      	movs	r3, #11
 8004450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4619      	mov	r1, r3
 800445c:	4805      	ldr	r0, [pc, #20]	; (8004474 <HAL_ADC_MspInit+0x7c>)
 800445e:	f7fd fc93 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004462:	bf00      	nop
 8004464:	3728      	adds	r7, #40	; 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	50040000 	.word	0x50040000
 8004470:	40021000 	.word	0x40021000
 8004474:	48000800 	.word	0x48000800

08004478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_UART_MspInit+0x7c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d128      	bne.n	80044ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_UART_MspInit+0x80>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_UART_MspInit+0x80>)
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	6593      	str	r3, [r2, #88]	; 0x58
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_UART_MspInit+0x80>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_UART_MspInit+0x80>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <HAL_UART_MspInit+0x80>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_UART_MspInit+0x80>)
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044ca:	230c      	movs	r3, #12
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044da:	2307      	movs	r3, #7
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4619      	mov	r1, r3
 80044e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e8:	f7fd fc4e 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044ec:	bf00      	nop
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40004400 	.word	0x40004400
 80044f8:	40021000 	.word	0x40021000

080044fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800450e:	e7fe      	b.n	800450e <HardFault_Handler+0x4>

08004510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004514:	e7fe      	b.n	8004514 <MemManage_Handler+0x4>

08004516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800451a:	e7fe      	b.n	800451a <BusFault_Handler+0x4>

0800451c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004520:	e7fe      	b.n	8004520 <UsageFault_Handler+0x4>

08004522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004550:	f7fc f814 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}

08004558 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <SystemInit+0x64>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <SystemInit+0x64>)
 8004564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <SystemInit+0x68>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <SystemInit+0x68>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <SystemInit+0x68>)
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <SystemInit+0x68>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <SystemInit+0x68>)
 8004584:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004588:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800458c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <SystemInit+0x68>)
 8004590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004594:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <SystemInit+0x68>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <SystemInit+0x68>)
 800459c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <SystemInit+0x68>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <SystemInit+0x64>)
 80045aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ae:	609a      	str	r2, [r3, #8]
#endif
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00
 80045c0:	40021000 	.word	0x40021000

080045c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80045c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80045ca:	e003      	b.n	80045d4 <LoopCopyDataInit>

080045cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80045ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80045d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80045d2:	3104      	adds	r1, #4

080045d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80045d4:	480b      	ldr	r0, [pc, #44]	; (8004604 <LoopForever+0xa>)
	ldr	r3, =_edata
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <LoopForever+0xe>)
	adds	r2, r0, r1
 80045d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80045da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80045dc:	d3f6      	bcc.n	80045cc <CopyDataInit>
	ldr	r2, =_sbss
 80045de:	4a0b      	ldr	r2, [pc, #44]	; (800460c <LoopForever+0x12>)
	b	LoopFillZerobss
 80045e0:	e002      	b.n	80045e8 <LoopFillZerobss>

080045e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80045e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80045e4:	f842 3b04 	str.w	r3, [r2], #4

080045e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <LoopForever+0x16>)
	cmp	r2, r3
 80045ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80045ec:	d3f9      	bcc.n	80045e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045ee:	f7ff ffb3 	bl	8004558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045f2:	f000 f811 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045f6:	f7ff fd15 	bl	8004024 <main>

080045fa <LoopForever>:

LoopForever:
    b LoopForever
 80045fa:	e7fe      	b.n	80045fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004600:	080046e0 	.word	0x080046e0
	ldr	r0, =_sdata
 8004604:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004608:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800460c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004610:	20000114 	.word	0x20000114

08004614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004614:	e7fe      	b.n	8004614 <ADC1_2_IRQHandler>
	...

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4e0d      	ldr	r6, [pc, #52]	; (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	; (8004654 <__libc_init_array+0x3c>)
 800461e:	1ba4      	subs	r4, r4, r6
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2500      	movs	r5, #0
 8004624:	42a5      	cmp	r5, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4e0b      	ldr	r6, [pc, #44]	; (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	; (800465c <__libc_init_array+0x44>)
 800462c:	f000 f820 	bl	8004670 <_init>
 8004630:	1ba4      	subs	r4, r4, r6
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2500      	movs	r5, #0
 8004636:	42a5      	cmp	r5, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004640:	4798      	blx	r3
 8004642:	3501      	adds	r5, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464a:	4798      	blx	r3
 800464c:	3501      	adds	r5, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	080046d8 	.word	0x080046d8
 8004654:	080046d8 	.word	0x080046d8
 8004658:	080046d8 	.word	0x080046d8
 800465c:	080046dc 	.word	0x080046dc

08004660 <memset>:
 8004660:	4402      	add	r2, r0
 8004662:	4603      	mov	r3, r0
 8004664:	4293      	cmp	r3, r2
 8004666:	d100      	bne.n	800466a <memset+0xa>
 8004668:	4770      	bx	lr
 800466a:	f803 1b01 	strb.w	r1, [r3], #1
 800466e:	e7f9      	b.n	8004664 <memset+0x4>

08004670 <_init>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr

0800467c <_fini>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr
