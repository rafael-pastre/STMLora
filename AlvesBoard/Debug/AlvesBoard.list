
AlvesBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005f30  08005f30  00015f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006188  08006188  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006188  08006188  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000074  08006204  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08006204  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002602  00000000  00000000  000330cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  000356d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00036370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0aa  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae4a  00000000  00000000  00060fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000edf60  00000000  00000000  0006bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159d5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b90  00000000  00000000  00159dd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f18 	.word	0x08005f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08005f18 	.word	0x08005f18

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 fc56 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f80d 	bl	8000b94 <HAL_InitTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	e001      	b.n	8000b8a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b86:	f003 ff03 	bl	8004990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d022      	beq.n	8000bee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_InitTick+0x6c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_InitTick+0x68>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fc56 	bl	800146e <HAL_SYSTICK_Config>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10f      	bne.n	8000be8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d809      	bhi.n	8000be2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd6:	f000 fc2e 	bl	8001436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_InitTick+0x70>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e007      	b.n	8000bf2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e004      	b.n	8000bf2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e001      	b.n	8000bf2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000000 	.word	0x20000000

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000118 	.word	0x20000118
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000118 	.word	0x20000118

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d004      	beq.n	8000c68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_Delay+0x40>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4413      	add	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c68:	bf00      	nop
 8000c6a:	f7ff ffdf 	bl	8000c2c <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d8f7      	bhi.n	8000c6a <HAL_Delay+0x26>
  {
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0ed      	b.n	8000e76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f003 fe96 	bl	80049d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0202 	bic.w	r2, r2, #2
 8000cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cbc:	f7ff ffb6 	bl	8000c2c <HAL_GetTick>
 8000cc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cc2:	e012      	b.n	8000cea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc4:	f7ff ffb2 	bl	8000c2c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b0a      	cmp	r3, #10
 8000cd0:	d90b      	bls.n	8000cea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2205      	movs	r2, #5
 8000ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e0c5      	b.n	8000e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1e5      	bne.n	8000cc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d08:	f7ff ff90 	bl	8000c2c <HAL_GetTick>
 8000d0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d0e:	e012      	b.n	8000d36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d10:	f7ff ff8c 	bl	8000c2c <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b0a      	cmp	r3, #10
 8000d1c:	d90b      	bls.n	8000d36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e09f      	b.n	8000e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0e5      	beq.n	8000d10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7e1b      	ldrb	r3, [r3, #24]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d108      	bne.n	8000d5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e007      	b.n	8000d6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7e5b      	ldrb	r3, [r3, #25]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d108      	bne.n	8000d88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e9b      	ldrb	r3, [r3, #26]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d108      	bne.n	8000db2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0220 	orr.w	r2, r2, #32
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e007      	b.n	8000dc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0220 	bic.w	r2, r2, #32
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7edb      	ldrb	r3, [r3, #27]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0210 	bic.w	r2, r2, #16
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e007      	b.n	8000dec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0210 	orr.w	r2, r2, #16
 8000dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7f1b      	ldrb	r3, [r3, #28]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d108      	bne.n	8000e06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0208 	orr.w	r2, r2, #8
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e007      	b.n	8000e16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0208 	bic.w	r2, r2, #8
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7f5b      	ldrb	r3, [r3, #29]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0204 	orr.w	r2, r2, #4
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0204 	bic.w	r2, r2, #4
 8000e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	ea42 0103 	orr.w	r1, r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b087      	sub	sp, #28
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e96:	7cfb      	ldrb	r3, [r7, #19]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d003      	beq.n	8000ea4 <HAL_CAN_ConfigFilter+0x26>
 8000e9c:	7cfb      	ldrb	r3, [r7, #19]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	f040 80aa 	bne.w	8000ff8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d123      	bne.n	8000f26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3248      	adds	r2, #72	; 0x48
 8000f06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f1c:	6979      	ldr	r1, [r7, #20]
 8000f1e:	3348      	adds	r3, #72	; 0x48
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d122      	bne.n	8000f74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3248      	adds	r2, #72	; 0x48
 8000f54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f6a:	6979      	ldr	r1, [r7, #20]
 8000f6c:	3348      	adds	r3, #72	; 0x48
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f8e:	e007      	b.n	8000fa0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fba:	e007      	b.n	8000fcc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d107      	bne.n	8000fe4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fea:	f023 0201 	bic.w	r2, r3, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e006      	b.n	8001006 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
  }
}
 8001006:	4618      	mov	r0, r3
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d12e      	bne.n	8001084 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2202      	movs	r2, #2
 800102a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800103e:	f7ff fdf5 	bl	8000c2c <HAL_GetTick>
 8001042:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001044:	e012      	b.n	800106c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001046:	f7ff fdf1 	bl	8000c2c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b0a      	cmp	r3, #10
 8001052:	d90b      	bls.n	800106c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2205      	movs	r2, #5
 8001064:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e012      	b.n	8001092 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e5      	bne.n	8001046 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	e006      	b.n	8001092 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
  }
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800109a:	b480      	push	{r7}
 800109c:	b089      	sub	sp, #36	; 0x24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d003      	beq.n	80010c6 <HAL_CAN_AddTxMessage+0x2c>
 80010be:	7ffb      	ldrb	r3, [r7, #31]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	f040 80b8 	bne.w	8001236 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10a      	bne.n	80010e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d105      	bne.n	80010e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80a0 	beq.w	8001226 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	0e1b      	lsrs	r3, r3, #24
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d907      	bls.n	8001106 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e09e      	b.n	8001244 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10d      	bne.n	8001134 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001122:	68f9      	ldr	r1, [r7, #12]
 8001124:	6809      	ldr	r1, [r1, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3318      	adds	r3, #24
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	440b      	add	r3, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e00f      	b.n	8001154 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800113e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001148:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3318      	adds	r3, #24
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	440b      	add	r3, r1
 8001152:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3318      	adds	r3, #24
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	3304      	adds	r3, #4
 8001166:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	7d1b      	ldrb	r3, [r3, #20]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d111      	bne.n	8001194 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3318      	adds	r3, #24
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	3304      	adds	r3, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6811      	ldr	r1, [r2, #0]
 8001184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3318      	adds	r3, #24
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3307      	adds	r3, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	061a      	lsls	r2, r3, #24
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3306      	adds	r3, #6
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3305      	adds	r3, #5
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	4313      	orrs	r3, r2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	3204      	adds	r2, #4
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	4610      	mov	r0, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	6811      	ldr	r1, [r2, #0]
 80011bc:	ea43 0200 	orr.w	r2, r3, r0
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3303      	adds	r3, #3
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	061a      	lsls	r2, r3, #24
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3302      	adds	r3, #2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3301      	adds	r3, #1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4313      	orrs	r3, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	6811      	ldr	r1, [r2, #0]
 80011f2:	ea43 0200 	orr.w	r2, r3, r0
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	440b      	add	r3, r1
 80011fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001200:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3318      	adds	r3, #24
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6811      	ldr	r1, [r2, #0]
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3318      	adds	r3, #24
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	440b      	add	r3, r1
 8001220:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e00e      	b.n	8001244 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e006      	b.n	8001244 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
  }
}
 8001244:	4618      	mov	r0, r3
 8001246:	3724      	adds	r7, #36	; 0x24
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001262:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d002      	beq.n	8001270 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d11d      	bne.n	80012ac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80012ac:	68fb      	ldr	r3, [r7, #12]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff5c 	bl	8001304 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffb0 	bl	80013dc <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e17f      	b.n	8001798 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8171 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x38>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b12      	cmp	r3, #18
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d00b      	beq.n	800155c <HAL_GPIO_Init+0xd4>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001550:	2b11      	cmp	r3, #17
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b12      	cmp	r3, #18
 800155a:	d130      	bne.n	80015be <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001592:	2201      	movs	r2, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	f003 0201 	and.w	r2, r3, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d118      	bne.n	80015fc <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ac 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b5e      	ldr	r3, [pc, #376]	; (80017b4 <HAL_GPIO_Init+0x32c>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	4a5d      	ldr	r2, [pc, #372]	; (80017b4 <HAL_GPIO_Init+0x32c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	; 0x60
 8001646:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_GPIO_Init+0x32c>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001652:	4a59      	ldr	r2, [pc, #356]	; (80017b8 <HAL_GPIO_Init+0x330>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x242>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x23e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4d      	ldr	r2, [pc, #308]	; (80017c0 <HAL_GPIO_Init+0x338>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x23a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_GPIO_Init+0x33c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x236>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <HAL_GPIO_Init+0x340>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x232>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <HAL_GPIO_Init+0x344>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x22e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a49      	ldr	r2, [pc, #292]	; (80017d0 <HAL_GPIO_Init+0x348>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x22a>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ca:	2300      	movs	r3, #0
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016dc:	4936      	ldr	r1, [pc, #216]	; (80017b8 <HAL_GPIO_Init+0x330>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170e:	4a31      	ldr	r2, [pc, #196]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f ae78 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	48001000 	.word	0x48001000
 80017cc:	48001400 	.word	0x48001400
 80017d0:	48001800 	.word	0x48001800
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e081      	b.n	800191e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f003 f916 	bl	8004a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001858:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001868:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	e006      	b.n	8001890 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800188e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d104      	bne.n	80018a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	ea42 0103 	orr.w	r1, r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	021a      	lsls	r2, r3, #8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69d9      	ldr	r1, [r3, #28]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	460b      	mov	r3, r1
 8001936:	817b      	strh	r3, [r7, #10]
 8001938:	4613      	mov	r3, r2
 800193a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b20      	cmp	r3, #32
 8001946:	f040 80da 	bne.w	8001afe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2C_Master_Transmit+0x30>
 8001954:	2302      	movs	r3, #2
 8001956:	e0d3      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1d8>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001960:	f7ff f964 	bl	8000c2c <HAL_GetTick>
 8001964:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f9e6 	bl	8001d44 <I2C_WaitOnFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0be      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2221      	movs	r2, #33	; 0x21
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2210      	movs	r2, #16
 800198e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	893a      	ldrh	r2, [r7, #8]
 80019a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2bff      	cmp	r3, #255	; 0xff
 80019b2:	d90e      	bls.n	80019d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	22ff      	movs	r2, #255	; 0xff
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	8979      	ldrh	r1, [r7, #10]
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <HAL_I2C_Master_Transmit+0x1e0>)
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fb48 	bl	8002060 <I2C_TransferConfig>
 80019d0:	e06c      	b.n	8001aac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	8979      	ldrh	r1, [r7, #10]
 80019e4:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_I2C_Master_Transmit+0x1e0>)
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fb37 	bl	8002060 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80019f2:	e05b      	b.n	8001aac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	6a39      	ldr	r1, [r7, #32]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9e3 	bl	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e07b      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d034      	beq.n	8001aac <HAL_I2C_Master_Transmit+0x184>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d130      	bne.n	8001aac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f975 	bl	8001d44 <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e04d      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2bff      	cmp	r3, #255	; 0xff
 8001a6c:	d90e      	bls.n	8001a8c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	22ff      	movs	r2, #255	; 0xff
 8001a72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	8979      	ldrh	r1, [r7, #10]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 faeb 	bl	8002060 <I2C_TransferConfig>
 8001a8a:	e00f      	b.n	8001aac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 fada 	bl	8002060 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d19e      	bne.n	80019f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	6a39      	ldr	r1, [r7, #32]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f9c2 	bl	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e01a      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_I2C_Master_Transmit+0x1e4>)
 8001ade:	400b      	ands	r3, r1
 8001ae0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	80002000 	.word	0x80002000
 8001b0c:	fe00e800 	.word	0xfe00e800

08001b10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
 8001b20:	4613      	mov	r3, r2
 8001b22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	f040 80db 	bne.w	8001ce8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2C_Master_Receive+0x30>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0d4      	b.n	8001cea <HAL_I2C_Master_Receive+0x1da>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f870 	bl	8000c2c <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2319      	movs	r3, #25
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f8f2 	bl	8001d44 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0bf      	b.n	8001cea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2222      	movs	r2, #34	; 0x22
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2210      	movs	r2, #16
 8001b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	893a      	ldrh	r2, [r7, #8]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d90e      	bls.n	8001bba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <HAL_I2C_Master_Receive+0x1e4>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fa54 	bl	8002060 <I2C_TransferConfig>
 8001bb8:	e06d      	b.n	8001c96 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	8979      	ldrh	r1, [r7, #10]
 8001bcc:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_I2C_Master_Receive+0x1e4>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fa43 	bl	8002060 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001bda:	e05c      	b.n	8001c96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	6a39      	ldr	r1, [r7, #32]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f96b 	bl	8001ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e07c      	b.n	8001cea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d034      	beq.n	8001c96 <HAL_I2C_Master_Receive+0x186>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d130      	bne.n	8001c96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f880 	bl	8001d44 <I2C_WaitOnFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e04d      	b.n	8001cea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2bff      	cmp	r3, #255	; 0xff
 8001c56:	d90e      	bls.n	8001c76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f9f6 	bl	8002060 <I2C_TransferConfig>
 8001c74:	e00f      	b.n	8001c96 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	8979      	ldrh	r1, [r7, #10]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f9e5 	bl	8002060 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d19d      	bne.n	8001bdc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	6a39      	ldr	r1, [r7, #32]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f8cd 	bl	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e01a      	b.n	8001cea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_I2C_Master_Receive+0x1e8>)
 8001cc8:	400b      	ands	r3, r1
 8001cca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	80002400 	.word	0x80002400
 8001cf8:	fe00e800 	.word	0xfe00e800

08001cfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d103      	bne.n	8001d1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d007      	beq.n	8001d38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	619a      	str	r2, [r3, #24]
  }
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d54:	e022      	b.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d01e      	beq.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5e:	f7fe ff65 	bl	8000c2c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d302      	bcc.n	8001d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d113      	bne.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f043 0220 	orr.w	r2, r3, #32
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e00f      	b.n	8001dbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4013      	ands	r3, r2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d0cd      	beq.n	8001d56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dd0:	e02c      	b.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f8dc 	bl	8001f94 <I2C_IsAcknowledgeFailed>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e02a      	b.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d01e      	beq.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7fe ff1d 	bl	8000c2c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d113      	bne.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f043 0220 	orr.w	r2, r3, #32
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e007      	b.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d1cb      	bne.n	8001dd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e50:	e028      	b.n	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f89c 	bl	8001f94 <I2C_IsAcknowledgeFailed>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e026      	b.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e66:	f7fe fee1 	bl	8000c2c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d113      	bne.n	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e007      	b.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d1cf      	bne.n	8001e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ec8:	e055      	b.n	8001f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f860 	bl	8001f94 <I2C_IsAcknowledgeFailed>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e053      	b.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d129      	bne.n	8001f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d105      	bne.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e03f      	b.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e022      	b.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f40:	f7fe fe74 	bl	8000c2c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d302      	bcc.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f043 0220 	orr.w	r2, r3, #32
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e007      	b.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d1a2      	bne.n	8001eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	fe00e800 	.word	0xfe00e800

08001f94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d151      	bne.n	8002052 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fae:	e022      	b.n	8001ff6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d01e      	beq.n	8001ff6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb8:	f7fe fe38 	bl	8000c2c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d302      	bcc.n	8001fce <I2C_IsAcknowledgeFailed+0x3a>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d113      	bne.n	8001ff6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f043 0220 	orr.w	r2, r3, #32
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e02e      	b.n	8002054 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b20      	cmp	r3, #32
 8002002:	d1d5      	bne.n	8001fb0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2210      	movs	r2, #16
 800200a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2220      	movs	r2, #32
 8002012:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff fe71 	bl	8001cfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <I2C_IsAcknowledgeFailed+0xc8>)
 8002026:	400b      	ands	r3, r1
 8002028:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	817b      	strh	r3, [r7, #10]
 800206e:	4613      	mov	r3, r2
 8002070:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <I2C_TransferConfig+0x58>)
 8002082:	430b      	orrs	r3, r1
 8002084:	43db      	mvns	r3, r3
 8002086:	ea02 0103 	and.w	r1, r2, r3
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002090:	7a7b      	ldrb	r3, [r7, #9]
 8002092:	041b      	lsls	r3, r3, #16
 8002094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	431a      	orrs	r2, r3
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	03ff63ff 	.word	0x03ff63ff

080020bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d138      	bne.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020dc:	2302      	movs	r3, #2
 80020de:	e032      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800210e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	d139      	bne.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002172:	2302      	movs	r3, #2
 8002174:	e033      	b.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2224      	movs	r2, #36	; 0x24
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <HAL_PWREx_GetVoltageRange+0x18>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40007000 	.word	0x40007000

08002208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002216:	d130      	bne.n	800227a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002224:	d038      	beq.n	8002298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2232      	movs	r2, #50	; 0x32
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800224c:	e002      	b.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b01      	subs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002260:	d102      	bne.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f2      	bne.n	800224e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002274:	d110      	bne.n	8002298 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e00f      	b.n	800229a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d007      	beq.n	8002298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002290:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000
 80022ac:	20000008 	.word	0x20000008
 80022b0:	431bde83 	.word	0x431bde83

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e39d      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c6:	4ba4      	ldr	r3, [pc, #656]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d0:	4ba1      	ldr	r3, [pc, #644]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80e1 	beq.w	80024aa <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_RCC_OscConfig+0x4a>
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	f040 8088 	bne.w	8002406 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	f040 8084 	bne.w	8002406 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022fe:	4b96      	ldr	r3, [pc, #600]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e375      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	4b8f      	ldr	r3, [pc, #572]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <HAL_RCC_OscConfig+0x7c>
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232e:	e005      	b.n	800233c <HAL_RCC_OscConfig+0x88>
 8002330:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800233c:	4293      	cmp	r3, r2
 800233e:	d223      	bcs.n	8002388 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fcd1 	bl	8002cec <RCC_SetFlashLatencyFromMSIRange>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e356      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002354:	4b80      	ldr	r3, [pc, #512]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	497a      	ldr	r1, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002372:	4b79      	ldr	r3, [pc, #484]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	4975      	ldr	r1, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
 8002386:	e022      	b.n	80023ce <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	4b73      	ldr	r3, [pc, #460]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a72      	ldr	r2, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	496d      	ldr	r1, [pc, #436]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	4968      	ldr	r1, [pc, #416]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fc94 	bl	8002cec <RCC_SetFlashLatencyFromMSIRange>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e319      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ce:	f000 fc03 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 80023d2:	4601      	mov	r1, r0
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4a5f      	ldr	r2, [pc, #380]	; (800255c <HAL_RCC_OscConfig+0x2a8>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ea:	4a5d      	ldr	r2, [pc, #372]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x2b0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fbce 	bl	8000b94 <HAL_InitTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d052      	beq.n	80024a8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	e2fd      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d032      	beq.n	8002474 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800240e:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241a:	f7fe fc07 	bl	8000c2c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002422:	f7fe fc03 	bl	8000c2c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e2e6      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002440:	4b45      	ldr	r3, [pc, #276]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a44      	ldr	r2, [pc, #272]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	493f      	ldr	r1, [pc, #252]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	493a      	ldr	r1, [pc, #232]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
 8002472:	e01a      	b.n	80024aa <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002474:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a37      	ldr	r2, [pc, #220]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002480:	f7fe fbd4 	bl	8000c2c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002488:	f7fe fbd0 	bl	8000c2c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e2b3      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1d4>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d074      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_OscConfig+0x214>
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d10e      	bne.n	80024e0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d064      	beq.n	800259e <HAL_RCC_OscConfig+0x2ea>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d160      	bne.n	800259e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e290      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x244>
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0x280>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x268>
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a14      	ldr	r2, [pc, #80]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0x280>
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_OscConfig+0x2a4>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01c      	beq.n	8002576 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fb76 	bl	8000c2c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002542:	e011      	b.n	8002568 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fb72 	bl	8000c2c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d90a      	bls.n	8002568 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e255      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	08005f70 	.word	0x08005f70
 8002560:	20000008 	.word	0x20000008
 8002564:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002568:	4bae      	ldr	r3, [pc, #696]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0e7      	beq.n	8002544 <HAL_RCC_OscConfig+0x290>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fb59 	bl	8000c2c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257e:	f7fe fb55 	bl	8000c2c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e238      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002590:	4ba4      	ldr	r3, [pc, #656]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x2ca>
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d060      	beq.n	800266e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x30a>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d119      	bne.n	80025ec <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025be:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x322>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e215      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b93      	ldr	r3, [pc, #588]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	498f      	ldr	r1, [pc, #572]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ea:	e040      	b.n	800266e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d023      	beq.n	800263c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a8a      	ldr	r2, [pc, #552]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fb14 	bl	8000c2c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe fb10 	bl	8000c2c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f3      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261a:	4b82      	ldr	r3, [pc, #520]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	497b      	ldr	r1, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263c:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a78      	ldr	r2, [pc, #480]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe faf0 	bl	8000c2c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7fe faec 	bl	8000c2c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1cf      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002662:	4b70      	ldr	r3, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d03c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01c      	beq.n	80026bc <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002688:	4a66      	ldr	r2, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe facb 	bl	8000c2c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe fac7 	bl	8000c2c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1aa      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ac:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ef      	beq.n	800269a <HAL_RCC_OscConfig+0x3e6>
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c2:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe faae 	bl	8000c2c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe faaa 	bl	8000c2c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e18d      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e6:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ef      	bne.n	80026d4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a5 	beq.w	800284c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4a43      	ldr	r2, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <HAL_RCC_OscConfig+0x574>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x574>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3a      	ldr	r2, [pc, #232]	; (8002828 <HAL_RCC_OscConfig+0x574>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fa71 	bl	8000c2c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fa6d 	bl	8000c2c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e150      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_RCC_OscConfig+0x574>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x4d2>
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002784:	e024      	b.n	80027d0 <HAL_RCC_OscConfig+0x51c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d110      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4fc>
 800278e:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	4a23      	ldr	r2, [pc, #140]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x51c>
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d016      	beq.n	8002806 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fa28 	bl	8000c2c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fa24 	bl	8000c2c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e105      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_OscConfig+0x570>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ed      	beq.n	80027e0 <HAL_RCC_OscConfig+0x52c>
 8002804:	e019      	b.n	800283a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fa11 	bl	8000c2c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800280c:	e00e      	b.n	800282c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fa0d 	bl	8000c2c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d905      	bls.n	800282c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ee      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282c:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e9      	bne.n	800280e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283a:	7ffb      	ldrb	r3, [r7, #31]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a71      	ldr	r2, [pc, #452]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80d5 	beq.w	8002a00 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	f000 808e 	beq.w	800297a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	2b02      	cmp	r3, #2
 8002864:	d15b      	bne.n	800291e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a68      	ldr	r2, [pc, #416]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800286c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe f9db 	bl	8000c2c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe f9d7 	bl	8000c2c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0ba      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002898:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x75c>)
 800289e:	4013      	ands	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a8:	3a01      	subs	r2, #1
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	4311      	orrs	r1, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b2:	0212      	lsls	r2, r2, #8
 80028b4:	4311      	orrs	r1, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ba:	0852      	lsrs	r2, r2, #1
 80028bc:	3a01      	subs	r2, #1
 80028be:	0552      	lsls	r2, r2, #21
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0652      	lsls	r2, r2, #25
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d2:	0912      	lsrs	r2, r2, #4
 80028d4:	0452      	lsls	r2, r2, #17
 80028d6:	430a      	orrs	r2, r1
 80028d8:	494c      	ldr	r1, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028de:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a4a      	ldr	r2, [pc, #296]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 80028e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 80028f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe f999 	bl	8000c2c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe f995 	bl	8000c2c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e078      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x64a>
 800291c:	e070      	b.n	8002a00 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002928:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800293c:	f023 0303 	bic.w	r3, r3, #3
 8002940:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002948:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe f96b 	bl	8000c2c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe f967 	bl	8000c2c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e04a      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x6a6>
 8002978:	e042      	b.n	8002a00 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e03d      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x758>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0203 	and.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	429a      	cmp	r2, r3
 8002998:	d130      	bne.n	80029fc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	3b01      	subs	r3, #1
 80029a6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d127      	bne.n	80029fc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d11f      	bne.n	80029fc <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c6:	2a07      	cmp	r2, #7
 80029c8:	bf14      	ite	ne
 80029ca:	2201      	movne	r2, #1
 80029cc:	2200      	moveq	r2, #0
 80029ce:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d113      	bne.n	80029fc <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	3b01      	subs	r3, #1
 80029e2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d109      	bne.n	80029fc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	3b01      	subs	r3, #1
 80029f6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	f99d808c 	.word	0xf99d808c

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0c8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d910      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0207 	bic.w	r2, r3, #7
 8002a3e:	4961      	ldr	r1, [pc, #388]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b0      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d04c      	beq.n	8002afe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6c:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d121      	bne.n	8002abc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e09e      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a84:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d115      	bne.n	8002abc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e092      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e086      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e07e      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 0203 	bic.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	493f      	ldr	r1, [pc, #252]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ace:	f7fe f8ad 	bl	8000c2c <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad6:	f7fe f8a9 	bl	8000c2c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e066      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 020c 	and.w	r2, r3, #12
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d1eb      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	492c      	ldr	r1, [pc, #176]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d210      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4924      	ldr	r1, [pc, #144]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e036      	b.n	8002bba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4918      	ldr	r1, [pc, #96]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4910      	ldr	r1, [pc, #64]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b8a:	f000 f825 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fff0 	bl	8000b94 <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08005f70 	.word	0x08005f70
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d121      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d11e      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c0c:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e005      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d102      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e004      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d133      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0xa4>
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0xaa>
 8002c7a:	e005      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	617b      	str	r3, [r7, #20]
      break;
 8002c80:	e005      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c84:	617b      	str	r3, [r7, #20]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	617b      	str	r3, [r7, #20]
      break;
 8002c8c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	3301      	adds	r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	fb02 f203 	mul.w	r2, r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x104>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0e5b      	lsrs	r3, r3, #25
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cce:	69bb      	ldr	r3, [r7, #24]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3724      	adds	r7, #36	; 0x24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08005f80 	.word	0x08005f80
 8002ce4:	00f42400 	.word	0x00f42400
 8002ce8:	007a1200 	.word	0x007a1200

08002cec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d04:	f7ff fa72 	bl	80021ec <HAL_PWREx_GetVoltageRange>
 8002d08:	6178      	str	r0, [r7, #20]
 8002d0a:	e014      	b.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6593      	str	r3, [r2, #88]	; 0x58
 8002d18:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d24:	f7ff fa62 	bl	80021ec <HAL_PWREx_GetVoltageRange>
 8002d28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d10b      	bne.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d919      	bls.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2ba0      	cmp	r3, #160	; 0xa0
 8002d48:	d902      	bls.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	e013      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d50:	2301      	movs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e010      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d902      	bls.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e00a      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d102      	bne.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d68:	2302      	movs	r3, #2
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	e004      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d101      	bne.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d74:	2301      	movs	r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 0207 	bic.w	r2, r3, #7
 8002d80:	4909      	ldr	r1, [pc, #36]	; (8002da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d001      	beq.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40022000 	.word	0x40022000

08002dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002db4:	2300      	movs	r3, #0
 8002db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db8:	2300      	movs	r3, #0
 8002dba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd0:	d01c      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd6:	d802      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ddc:	e01f      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de2:	d003      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002de4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de8:	d01c      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002dea:	e018      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dec:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a84      	ldr	r2, [pc, #528]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df8:	e015      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fab9 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e0a:	e00c      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3320      	adds	r3, #32
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fba0 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e1c:	e003      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	74fb      	strb	r3, [r7, #19]
      break;
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e2c:	4b75      	ldr	r3, [pc, #468]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3a:	4972      	ldr	r1, [pc, #456]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e42:	e001      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d03f      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d01c      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e62:	d802      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002e68:	e01f      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e6e:	d003      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e74:	d01c      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e76:	e018      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e78:	4b62      	ldr	r3, [pc, #392]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a61      	ldr	r2, [pc, #388]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e84:	e015      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fa73 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e96:	e00c      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fb5a 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ea8:	e003      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	74fb      	strb	r3, [r7, #19]
      break;
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb8:	4b52      	ldr	r3, [pc, #328]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec6:	494f      	ldr	r1, [pc, #316]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ece:	e001      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a0 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	4a40      	ldr	r2, [pc, #256]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
 8002f08:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f24:	f7fd fe82 	bl	8000c2c <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f2a:	e009      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fd fe7e 	bl	8000c2c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d902      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f3e:	e005      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ef      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d15c      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01f      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d019      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	4a20      	ldr	r2, [pc, #128]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fd fe3d 	bl	8000c2c <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb4:	e00b      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fd fe39 	bl	8000c2c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d902      	bls.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	74fb      	strb	r3, [r7, #19]
            break;
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ec      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	74bb      	strb	r3, [r7, #18]
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003010:	7c7b      	ldrb	r3, [r7, #17]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	4b9e      	ldr	r3, [pc, #632]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	4a9d      	ldr	r2, [pc, #628]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800301c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302e:	4b98      	ldr	r3, [pc, #608]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 0203 	bic.w	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	4994      	ldr	r1, [pc, #592]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003050:	4b8f      	ldr	r3, [pc, #572]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 020c 	bic.w	r2, r3, #12
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	498c      	ldr	r1, [pc, #560]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003072:	4b87      	ldr	r3, [pc, #540]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	4983      	ldr	r1, [pc, #524]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003094:	4b7e      	ldr	r3, [pc, #504]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	497b      	ldr	r1, [pc, #492]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	4972      	ldr	r1, [pc, #456]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d8:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e6:	496a      	ldr	r1, [pc, #424]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	4961      	ldr	r1, [pc, #388]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800311c:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	4959      	ldr	r1, [pc, #356]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	4950      	ldr	r1, [pc, #320]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	4948      	ldr	r1, [pc, #288]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	493f      	ldr	r1, [pc, #252]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d028      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a4:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c2:	d106      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ce:	60d3      	str	r3, [r2, #12]
 80031d0:	e011      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031da:	d10c      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f8c8 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d028      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	491f      	ldr	r1, [pc, #124]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003220:	d106      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322c:	60d3      	str	r3, [r2, #12]
 800322e:	e011      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003238:	d10c      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f899 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02b      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327e:	d109      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a02      	ldr	r2, [pc, #8]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800328a:	60d3      	str	r3, [r2, #12]
 800328c:	e014      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f867 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d2:	4928      	ldr	r1, [pc, #160]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e2:	d10d      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	2102      	movs	r1, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f844 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d014      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
 80032fe:	e011      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3320      	adds	r3, #32
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f921 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333e:	490d      	ldr	r1, [pc, #52]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	4904      	ldr	r1, [pc, #16]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800336a:	7cbb      	ldrb	r3, [r7, #18]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000

08003378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003392:	4b70      	ldr	r3, [pc, #448]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
       ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
       ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d044      	beq.n	8003448 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e041      	b.n	8003448 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d00c      	beq.n	80033e6 <RCCEx_PLLSAI1_Config+0x6e>
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d013      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x80>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d120      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d4:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11d      	bne.n	800341c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e4:	e01a      	b.n	800341c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e6:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f6:	e013      	b.n	8003420 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033f8:	4b56      	ldr	r3, [pc, #344]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10f      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003414:	e006      	b.n	8003424 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      break;
 800341a:	e004      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800341c:	bf00      	nop
 800341e:	e002      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003420:	bf00      	nop
 8003422:	e000      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003424:	bf00      	nop
    }

    if(status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10d      	bne.n	8003448 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342c:	4b49      	ldr	r3, [pc, #292]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	3b01      	subs	r3, #1
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	430b      	orrs	r3, r1
 8003442:	4944      	ldr	r1, [pc, #272]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d17d      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003454:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345a:	f7fd fbe7 	bl	8000c2c <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003460:	e009      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003462:	f7fd fbe3 	bl	8000c2c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d902      	bls.n	8003476 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	73fb      	strb	r3, [r7, #15]
        break;
 8003474:	e005      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ef      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d160      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d111      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6892      	ldr	r2, [r2, #8]
 800349e:	0211      	lsls	r1, r2, #8
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	0912      	lsrs	r2, r2, #4
 80034a6:	0452      	lsls	r2, r2, #17
 80034a8:	430a      	orrs	r2, r1
 80034aa:	492a      	ldr	r1, [pc, #168]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	610b      	str	r3, [r1, #16]
 80034b0:	e027      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d112      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	0211      	lsls	r1, r2, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6912      	ldr	r2, [r2, #16]
 80034ce:	0852      	lsrs	r2, r2, #1
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0552      	lsls	r2, r2, #21
 80034d4:	430a      	orrs	r2, r1
 80034d6:	491f      	ldr	r1, [pc, #124]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	610b      	str	r3, [r1, #16]
 80034dc:	e011      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	0211      	lsls	r1, r2, #8
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6952      	ldr	r2, [r2, #20]
 80034f4:	0852      	lsrs	r2, r2, #1
 80034f6:	3a01      	subs	r2, #1
 80034f8:	0652      	lsls	r2, r2, #25
 80034fa:	430a      	orrs	r2, r1
 80034fc:	4915      	ldr	r1, [pc, #84]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800350c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fd fb8d 	bl	8000c2c <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003514:	e009      	b.n	800352a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003516:	f7fd fb89 	bl	8000c2c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d902      	bls.n	800352a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	73fb      	strb	r3, [r7, #15]
          break;
 8003528:	e005      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ef      	beq.n	8003516 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000

08003558 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003566:	4b68      	ldr	r3, [pc, #416]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003572:	4b65      	ldr	r3, [pc, #404]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d10d      	bne.n	800359e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
       ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
       ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d044      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e041      	b.n	8003628 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d00c      	beq.n	80035c6 <RCCEx_PLLSAI2_Config+0x6e>
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d013      	beq.n	80035d8 <RCCEx_PLLSAI2_Config+0x80>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d120      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b4:	4b54      	ldr	r3, [pc, #336]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e01a      	b.n	80035fc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c6:	4b50      	ldr	r3, [pc, #320]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d6:	e013      	b.n	8003600 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035d8:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035f4:	e006      	b.n	8003604 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      break;
 80035fa:	e004      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035fc:	bf00      	nop
 80035fe:	e002      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003600:	bf00      	nop
 8003602:	e000      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003604:	bf00      	nop
    }

    if(status == HAL_OK)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800360c:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	3b01      	subs	r3, #1
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	430b      	orrs	r3, r1
 8003622:	4939      	ldr	r1, [pc, #228]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d167      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a35      	ldr	r2, [pc, #212]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363a:	f7fd faf7 	bl	8000c2c <HAL_GetTick>
 800363e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003640:	e009      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003642:	f7fd faf3 	bl	8000c2c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d902      	bls.n	8003656 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	73fb      	strb	r3, [r7, #15]
        break;
 8003654:	e005      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ef      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d14a      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d111      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	0211      	lsls	r1, r2, #8
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	0912      	lsrs	r2, r2, #4
 8003686:	0452      	lsls	r2, r2, #17
 8003688:	430a      	orrs	r2, r1
 800368a:	491f      	ldr	r1, [pc, #124]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	614b      	str	r3, [r1, #20]
 8003690:	e011      	b.n	80036b6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800369a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0652      	lsls	r2, r2, #25
 80036ae:	430a      	orrs	r2, r1
 80036b0:	4915      	ldr	r1, [pc, #84]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fd fab3 	bl	8000c2c <HAL_GetTick>
 80036c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036c8:	e009      	b.n	80036de <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ca:	f7fd faaf 	bl	8000c2c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d902      	bls.n	80036de <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	73fb      	strb	r3, [r7, #15]
          break;
 80036dc:	e005      	b.n	80036ea <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	08005f5c 	.word	0x08005f5c

0800372c <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	08005f5c 	.word	0x08005f5c

0800374c <_ZN15Adafruit_SensorD0Ev>:
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffe9 	bl	800372c <_ZN15Adafruit_SensorD1Ev>
 800375a:	2108      	movs	r1, #8
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 fac1 	bl	8004ce4 <_ZdlPvj>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) { (void)enabled; /* suppress unused warning */ };
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZN15Adafruit_BNO055C1E19__I2C_HandleTypeDeflh>:
 *  @param  address
 *          i2c address
 *  @param  *theWire
 *          Wire object
 */
Adafruit_BNO055::Adafruit_BNO055(I2C_HandleTypeDef hi2c1, int32_t sensorID, uint8_t address) {
 8003784:	b084      	sub	sp, #16
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	f107 0014 	add.w	r0, r7, #20
 8003792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ffb7 	bl	800370c <_ZN15Adafruit_SensorC1Ev>
 800379e:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <_ZN15Adafruit_BNO055C1E19__I2C_HandleTypeDeflh+0x50>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	601a      	str	r2, [r3, #0]
  _sensorID = sensorID;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
  _address = address;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80037b0:	715a      	strb	r2, [r3, #5]
  _hi2c1 = hi2c1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3308      	adds	r3, #8
 80037b6:	f107 0114 	add.w	r1, r7, #20
 80037ba:	224c      	movs	r2, #76	; 0x4c
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 faed 	bl	8005d9c <memcpy>
}
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ce:	b004      	add	sp, #16
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	08005f40 	.word	0x08005f40

080037d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 *  @return true if process is successful
 */
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
 80037e4:	2100      	movs	r1, #0
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fd25 	bl	8004236 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
  if (id != BNO055_ID) {
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2ba0      	cmp	r3, #160	; 0xa0
 80037f4:	d00e      	beq.n	8003814 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
    HAL_Delay(1000); // hold on for boot
 80037f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037fa:	f7fd fa23 	bl	8000c44 <HAL_Delay>
    id = read8(BNO055_CHIP_ID_ADDR);
 80037fe:	2100      	movs	r1, #0
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fd18 	bl	8004236 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8003806:	4603      	mov	r3, r0
 8003808:	73fb      	strb	r3, [r7, #15]
    if (id != BNO055_ID) {
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2ba0      	cmp	r3, #160	; 0xa0
 800380e:	d001      	beq.n	8003814 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x3c>
      return false; // still not? ok bail
 8003810:	2300      	movs	r3, #0
 8003812:	e03c      	b.n	800388e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0xb6>
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
 8003814:	2100      	movs	r1, #0
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f83d 	bl	8003896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
 800381c:	2220      	movs	r2, #32
 800381e:	213f      	movs	r1, #63	; 0x3f
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fce4 	bl	80041ee <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  /* HAL_Delay incrased to 30ms due to power issues https://tinyurl.com/y375z699 */
  HAL_Delay(30);
 8003826:	201e      	movs	r0, #30
 8003828:	f7fd fa0c 	bl	8000c44 <HAL_Delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fd01 	bl	8004236 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
 8003834:	4603      	mov	r3, r0
 8003836:	2ba0      	cmp	r3, #160	; 0xa0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x74>
    HAL_Delay(10);
 8003844:	200a      	movs	r0, #10
 8003846:	f7fd f9fd 	bl	8000c44 <HAL_Delay>
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
 800384a:	e7ef      	b.n	800382c <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x54>
  }
  HAL_Delay(50);
 800384c:	2032      	movs	r0, #50	; 0x32
 800384e:	f7fd f9f9 	bl	8000c44 <HAL_Delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 8003852:	2200      	movs	r2, #0
 8003854:	213e      	movs	r1, #62	; 0x3e
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fcc9 	bl	80041ee <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(10);
 800385c:	200a      	movs	r0, #10
 800385e:	f7fd f9f1 	bl	8000c44 <HAL_Delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	2107      	movs	r1, #7
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fcc1 	bl	80041ee <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
 800386c:	2200      	movs	r2, #0
 800386e:	213f      	movs	r1, #63	; 0x3f
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fcbc 	bl	80041ee <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(10);
 8003876:	200a      	movs	r0, #10
 8003878:	f7fd f9e4 	bl	8000c44 <HAL_Delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f808 	bl	8003896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  HAL_Delay(20);
 8003886:	2014      	movs	r0, #20
 8003888:	f7fd f9dc 	bl	8000c44 <HAL_Delay>

  return true;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
 *            OPERATION_MODE_COMPASS,
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 */
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	70fb      	strb	r3, [r7, #3]
  _mode = mode;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  write8(BNO055_OPR_MODE_ADDR, _mode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038b0:	461a      	mov	r2, r3
 80038b2:	213d      	movs	r1, #61	; 0x3d
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fc9a 	bl	80041ee <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  HAL_Delay(30);
 80038ba:	201e      	movs	r0, #30
 80038bc:	f7fd f9c2 	bl	8000c44 <HAL_Delay>
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
 80038c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fd6d 	bl	80043b8 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset(buffer, 0, 6);
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	2206      	movs	r2, #6
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 fa63 	bl	8005db2 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	83fb      	strh	r3, [r7, #30]
 80038f0:	8bfb      	ldrh	r3, [r7, #30]
 80038f2:	83bb      	strh	r3, [r7, #28]
 80038f4:	8bbb      	ldrh	r3, [r7, #28]
 80038f6:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 80038f8:	f107 0214 	add.w	r2, r7, #20
 80038fc:	79f9      	ldrb	r1, [r7, #7]
 80038fe:	2306      	movs	r3, #6
 8003900:	68b8      	ldr	r0, [r7, #8]
 8003902:	f000 fccf 	bl	80042a4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8003906:	7d3b      	ldrb	r3, [r7, #20]
 8003908:	b21a      	sxth	r2, r3
 800390a:	7d7b      	ldrb	r3, [r7, #21]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	b21b      	sxth	r3, r3
 8003910:	4313      	orrs	r3, r2
 8003912:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 8003914:	7dbb      	ldrb	r3, [r7, #22]
 8003916:	b21a      	sxth	r2, r3
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	b21b      	sxth	r3, r3
 800391e:	4313      	orrs	r3, r2
 8003920:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8003922:	7e3b      	ldrb	r3, [r7, #24]
 8003924:	b21a      	sxth	r2, r3
 8003926:	7e7b      	ldrb	r3, [r7, #25]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b21b      	sxth	r3, r3
 800392c:	4313      	orrs	r3, r2
 800392e:	83fb      	strh	r3, [r7, #30]

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	3b08      	subs	r3, #8
 8003934:	2b26      	cmp	r3, #38	; 0x26
 8003936:	f200 81f6 	bhi.w	8003d26 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45e>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003b81 	.word	0x08003b81
 8003944:	08003d27 	.word	0x08003d27
 8003948:	08003d27 	.word	0x08003d27
 800394c:	08003d27 	.word	0x08003d27
 8003950:	08003d27 	.word	0x08003d27
 8003954:	08003d27 	.word	0x08003d27
 8003958:	080039dd 	.word	0x080039dd
 800395c:	08003d27 	.word	0x08003d27
 8003960:	08003d27 	.word	0x08003d27
 8003964:	08003d27 	.word	0x08003d27
 8003968:	08003d27 	.word	0x08003d27
 800396c:	08003d27 	.word	0x08003d27
 8003970:	08003a69 	.word	0x08003a69
 8003974:	08003d27 	.word	0x08003d27
 8003978:	08003d27 	.word	0x08003d27
 800397c:	08003d27 	.word	0x08003d27
 8003980:	08003d27 	.word	0x08003d27
 8003984:	08003d27 	.word	0x08003d27
 8003988:	08003af5 	.word	0x08003af5
 800398c:	08003d27 	.word	0x08003d27
 8003990:	08003d27 	.word	0x08003d27
 8003994:	08003d27 	.word	0x08003d27
 8003998:	08003d27 	.word	0x08003d27
 800399c:	08003d27 	.word	0x08003d27
 80039a0:	08003d27 	.word	0x08003d27
 80039a4:	08003d27 	.word	0x08003d27
 80039a8:	08003d27 	.word	0x08003d27
 80039ac:	08003d27 	.word	0x08003d27
 80039b0:	08003d27 	.word	0x08003d27
 80039b4:	08003d27 	.word	0x08003d27
 80039b8:	08003d27 	.word	0x08003d27
 80039bc:	08003d27 	.word	0x08003d27
 80039c0:	08003c0d 	.word	0x08003c0d
 80039c4:	08003d27 	.word	0x08003d27
 80039c8:	08003d27 	.word	0x08003d27
 80039cc:	08003d27 	.word	0x08003d27
 80039d0:	08003d27 	.word	0x08003d27
 80039d4:	08003d27 	.word	0x08003d27
 80039d8:	08003c99 	.word	0x08003c99
  case VECTOR_MAGNETOMETER:
    /* 1uT = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
 80039dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fd43 	bl	800046c <__aeabi_i2d>
 80039e6:	4680      	mov	r8, r0
 80039e8:	4689      	mov	r9, r1
 80039ea:	2100      	movs	r1, #0
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fcf2 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 80039f2:	4605      	mov	r5, r0
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	4bce      	ldr	r3, [pc, #824]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 80039fa:	4640      	mov	r0, r8
 80039fc:	4649      	mov	r1, r9
 80039fe:	f7fc fec9 	bl	8000794 <__aeabi_ddiv>
 8003a02:	4603      	mov	r3, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 16.0;
 8003a0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd2c 	bl	800046c <__aeabi_i2d>
 8003a14:	4680      	mov	r8, r0
 8003a16:	4689      	mov	r9, r1
 8003a18:	2101      	movs	r1, #1
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fcdb 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003a20:	4605      	mov	r5, r0
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	4bc3      	ldr	r3, [pc, #780]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003a28:	4640      	mov	r0, r8
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	f7fc feb2 	bl	8000794 <__aeabi_ddiv>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 16.0;
 8003a38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fd15 	bl	800046c <__aeabi_i2d>
 8003a42:	4680      	mov	r8, r0
 8003a44:	4689      	mov	r9, r1
 8003a46:	2102      	movs	r1, #2
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fcc4 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003a4e:	4605      	mov	r5, r0
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	4bb7      	ldr	r3, [pc, #732]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003a56:	4640      	mov	r0, r8
 8003a58:	4649      	mov	r1, r9
 8003a5a:	f7fc fe9b 	bl	8000794 <__aeabi_ddiv>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8003a66:	e15d      	b.n	8003d24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_GYROSCOPE:
    /* 1dps = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
 8003a68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fc fcfd 	bl	800046c <__aeabi_i2d>
 8003a72:	4680      	mov	r8, r0
 8003a74:	4689      	mov	r9, r1
 8003a76:	2100      	movs	r1, #0
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fcac 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003a7e:	4605      	mov	r5, r0
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	4bab      	ldr	r3, [pc, #684]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003a86:	4640      	mov	r0, r8
 8003a88:	4649      	mov	r1, r9
 8003a8a:	f7fc fe83 	bl	8000794 <__aeabi_ddiv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	460c      	mov	r4, r1
 8003a92:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 16.0;
 8003a96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fc fce6 	bl	800046c <__aeabi_i2d>
 8003aa0:	4680      	mov	r8, r0
 8003aa2:	4689      	mov	r9, r1
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fc95 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003aac:	4605      	mov	r5, r0
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	4ba0      	ldr	r3, [pc, #640]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	f7fc fe6c 	bl	8000794 <__aeabi_ddiv>
 8003abc:	4603      	mov	r3, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 16.0;
 8003ac4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fccf 	bl	800046c <__aeabi_i2d>
 8003ace:	4680      	mov	r8, r0
 8003ad0:	4689      	mov	r9, r1
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fc7e 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003ada:	4605      	mov	r5, r0
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	4b94      	ldr	r3, [pc, #592]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	f7fc fe55 	bl	8000794 <__aeabi_ddiv>
 8003aea:	4603      	mov	r3, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8003af2:	e117      	b.n	8003d24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
 8003af4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fcb7 	bl	800046c <__aeabi_i2d>
 8003afe:	4680      	mov	r8, r0
 8003b00:	4689      	mov	r9, r1
 8003b02:	2100      	movs	r1, #0
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fc66 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003b12:	4640      	mov	r0, r8
 8003b14:	4649      	mov	r1, r9
 8003b16:	f7fc fe3d 	bl	8000794 <__aeabi_ddiv>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 16.0;
 8003b22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fca0 	bl	800046c <__aeabi_i2d>
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4689      	mov	r9, r1
 8003b30:	2101      	movs	r1, #1
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fc4f 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003b38:	4605      	mov	r5, r0
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	4b7d      	ldr	r3, [pc, #500]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc fe26 	bl	8000794 <__aeabi_ddiv>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 16.0;
 8003b50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fc89 	bl	800046c <__aeabi_i2d>
 8003b5a:	4680      	mov	r8, r0
 8003b5c:	4689      	mov	r9, r1
 8003b5e:	2102      	movs	r1, #2
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fc38 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003b66:	4605      	mov	r5, r0
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	4b71      	ldr	r3, [pc, #452]	; (8003d34 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x46c>)
 8003b6e:	4640      	mov	r0, r8
 8003b70:	4649      	mov	r1, r9
 8003b72:	f7fc fe0f 	bl	8000794 <__aeabi_ddiv>
 8003b76:	4603      	mov	r3, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8003b7e:	e0d1      	b.n	8003d24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_ACCELEROMETER:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
 8003b80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fc71 	bl	800046c <__aeabi_i2d>
 8003b8a:	4680      	mov	r8, r0
 8003b8c:	4689      	mov	r9, r1
 8003b8e:	2100      	movs	r1, #0
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fc20 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003b96:	4605      	mov	r5, r0
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fdf7 	bl	8000794 <__aeabi_ddiv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 100.0;
 8003bae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fc5a 	bl	800046c <__aeabi_i2d>
 8003bb8:	4680      	mov	r8, r0
 8003bba:	4689      	mov	r9, r1
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fc09 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003bcc:	4640      	mov	r0, r8
 8003bce:	4649      	mov	r1, r9
 8003bd0:	f7fc fde0 	bl	8000794 <__aeabi_ddiv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 100.0;
 8003bdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fc43 	bl	800046c <__aeabi_i2d>
 8003be6:	4680      	mov	r8, r0
 8003be8:	4689      	mov	r9, r1
 8003bea:	2102      	movs	r1, #2
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fbf2 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	f7fc fdc9 	bl	8000794 <__aeabi_ddiv>
 8003c02:	4603      	mov	r3, r0
 8003c04:	460c      	mov	r4, r1
 8003c06:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8003c0a:	e08b      	b.n	8003d24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_LINEARACCEL:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
 8003c0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fc fc2b 	bl	800046c <__aeabi_i2d>
 8003c16:	4680      	mov	r8, r0
 8003c18:	4689      	mov	r9, r1
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fbda 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003c22:	4605      	mov	r5, r0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	4b43      	ldr	r3, [pc, #268]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	f7fc fdb1 	bl	8000794 <__aeabi_ddiv>
 8003c32:	4603      	mov	r3, r0
 8003c34:	460c      	mov	r4, r1
 8003c36:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 100.0;
 8003c3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fc14 	bl	800046c <__aeabi_i2d>
 8003c44:	4680      	mov	r8, r0
 8003c46:	4689      	mov	r9, r1
 8003c48:	2101      	movs	r1, #1
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fbc3 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003c50:	4605      	mov	r5, r0
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc fd9a 	bl	8000794 <__aeabi_ddiv>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 100.0;
 8003c68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc fbfd 	bl	800046c <__aeabi_i2d>
 8003c72:	4680      	mov	r8, r0
 8003c74:	4689      	mov	r9, r1
 8003c76:	2102      	movs	r1, #2
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fbac 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003c7e:	4605      	mov	r5, r0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fc fd83 	bl	8000794 <__aeabi_ddiv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	460c      	mov	r4, r1
 8003c92:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8003c96:	e045      	b.n	8003d24 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x45c>
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
 8003c98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fbe5 	bl	800046c <__aeabi_i2d>
 8003ca2:	4680      	mov	r8, r0
 8003ca4:	4689      	mov	r9, r1
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fb94 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003cae:	4605      	mov	r5, r0
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003cb6:	4640      	mov	r0, r8
 8003cb8:	4649      	mov	r1, r9
 8003cba:	f7fc fd6b 	bl	8000794 <__aeabi_ddiv>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[1] = ((double)y) / 100.0;
 8003cc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fbce 	bl	800046c <__aeabi_i2d>
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	4689      	mov	r9, r1
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fb7d 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003cdc:	4605      	mov	r5, r0
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f7fc fd54 	bl	8000794 <__aeabi_ddiv>
 8003cec:	4603      	mov	r3, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	e9c5 3400 	strd	r3, r4, [r5]
    xyz[2] = ((double)z) / 100.0;
 8003cf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fbb7 	bl	800046c <__aeabi_i2d>
 8003cfe:	4680      	mov	r8, r0
 8003d00:	4689      	mov	r9, r1
 8003d02:	2102      	movs	r1, #2
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fb66 	bl	80043d6 <_ZN3imu6VectorILh3EEixEi>
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x470>)
 8003d12:	4640      	mov	r0, r8
 8003d14:	4649      	mov	r1, r9
 8003d16:	f7fc fd3d 	bl	8000794 <__aeabi_ddiv>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	e9c5 3400 	strd	r3, r4, [r5]
    break;
 8003d22:	bf00      	nop
  }

  return xyz;
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
}
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d32:	bf00      	nop
 8003d34:	40300000 	.word	0x40300000
 8003d38:	40590000 	.word	0x40590000

08003d3c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8003d46:	2228      	movs	r2, #40	; 0x28
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	f002 f831 	bl	8005db2 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	220b      	movs	r2, #11
 8003d54:	4911      	ldr	r1, [pc, #68]	; (8003d9c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 f8c6 	bl	8005ee8 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_ORIENTATION;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2203      	movs	r2, #3
 8003d74:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value = 0.0F;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  sensor->min_value = 0.0F;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	61da      	str	r2, [r3, #28]
  sensor->resolution = 0.01F;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	08005f30 	.word	0x08005f30
 8003da0:	3c23d70a 	.word	0x3c23d70a

08003da4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8003dae:	2224      	movs	r2, #36	; 0x24
 8003db0:	2100      	movs	r1, #0
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f001 fffd 	bl	8005db2 <memset>

  event->version = sizeof(sensors_event_t);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2224      	movs	r2, #36	; 0x24
 8003dbc:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	609a      	str	r2, [r3, #8]
  //event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	221a      	movs	r2, #26
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fd77 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 8003dda:	f107 0308 	add.w	r3, r7, #8
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fac7 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 8003de4:	4603      	mov	r3, r0
 8003de6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dea:	4618      	mov	r0, r3
 8003dec:	4621      	mov	r1, r4
 8003dee:	f7fc fe69 	bl	8000ac4 <__aeabi_d2f>
 8003df2:	4602      	mov	r2, r0
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fac3 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 8003e02:	4603      	mov	r3, r0
 8003e04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	f7fc fe5a 	bl	8000ac4 <__aeabi_d2f>
 8003e10:	4602      	mov	r2, r0
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fac0 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 8003e20:	4603      	mov	r3, r0
 8003e22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e26:	4618      	mov	r0, r3
 8003e28:	4621      	mov	r1, r4
 8003e2a:	f7fc fe4b 	bl	8000ac4 <__aeabi_d2f>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	61da      	str	r2, [r3, #28]

  return true;
 8003e34:	2401      	movs	r4, #1
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fa8e 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8003e40:	4623      	mov	r3, r4
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd90      	pop	{r4, r7, pc}

08003e4a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>:
 *  @param  vec_type
 *          specify the type of reading
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event, adafruit_vector_type_t vec_type)
{
 8003e4a:	b590      	push	{r4, r7, lr}
 8003e4c:	b0af      	sub	sp, #188	; 0xbc
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8003e58:	2224      	movs	r2, #36	; 0x24
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	68b8      	ldr	r0, [r7, #8]
 8003e5e:	f001 ffa8 	bl	8005db2 <memset>

  event->version = sizeof(sensors_event_t);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2224      	movs	r2, #36	; 0x24
 8003e66:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	605a      	str	r2, [r3, #4]
  //event->timestamp = millis();

  //read the data according to vec_type
  imu::Vector<3> vec;
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fa9f 	bl	80043b8 <_ZN3imu6VectorILh3EEC1Ev>
  if (vec_type == Adafruit_BNO055::VECTOR_LINEARACCEL)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b28      	cmp	r3, #40	; 0x28
 8003e7e:	d144      	bne.n	8003f0a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0xc0>
  {
    event->type = SENSOR_TYPE_LINEAR_ACCELERATION;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	220a      	movs	r2, #10
 8003e84:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
 8003e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e8a:	2228      	movs	r2, #40	; 0x28
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fd1a 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8003e94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 faa8 	bl	80043f4 <_ZN3imu6VectorILh3EEaSERKS1_>
 8003ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fa57 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>

    event->acceleration.x = vec.x();
 8003eae:	f107 0310 	add.w	r3, r7, #16
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fa5d 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	f7fc fdff 	bl	8000ac4 <__aeabi_d2f>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	615a      	str	r2, [r3, #20]
    event->acceleration.y = vec.y();
 8003ecc:	f107 0310 	add.w	r3, r7, #16
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fa59 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003edc:	4618      	mov	r0, r3
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f7fc fdf0 	bl	8000ac4 <__aeabi_d2f>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	619a      	str	r2, [r3, #24]
    event->acceleration.z = vec.z();
 8003eea:	f107 0310 	add.w	r3, r7, #16
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa56 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003efa:	4618      	mov	r0, r3
 8003efc:	4621      	mov	r1, r4
 8003efe:	f7fc fde1 	bl	8000ac4 <__aeabi_d2f>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	61da      	str	r2, [r3, #28]
 8003f08:	e166      	b.n	80041d8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_ACCELEROMETER)
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d144      	bne.n	8003f9a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x150>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2201      	movs	r2, #1
 8003f14:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
 8003f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	68f9      	ldr	r1, [r7, #12]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fcd2 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8003f24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003f28:	f107 0310 	add.w	r3, r7, #16
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa60 	bl	80043f4 <_ZN3imu6VectorILh3EEaSERKS1_>
 8003f34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fa0f 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>

    event->acceleration.x = vec.x();
 8003f3e:	f107 0310 	add.w	r3, r7, #16
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa15 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	4621      	mov	r1, r4
 8003f52:	f7fc fdb7 	bl	8000ac4 <__aeabi_d2f>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	615a      	str	r2, [r3, #20]
    event->acceleration.y = vec.y();
 8003f5c:	f107 0310 	add.w	r3, r7, #16
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fa11 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 8003f66:	4603      	mov	r3, r0
 8003f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	4621      	mov	r1, r4
 8003f70:	f7fc fda8 	bl	8000ac4 <__aeabi_d2f>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	619a      	str	r2, [r3, #24]
    event->acceleration.z = vec.z();
 8003f7a:	f107 0310 	add.w	r3, r7, #16
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fa0e 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 8003f84:	4603      	mov	r3, r0
 8003f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	f7fc fd99 	bl	8000ac4 <__aeabi_d2f>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	61da      	str	r2, [r3, #28]
 8003f98:	e11e      	b.n	80041d8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GRAVITY)
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f9e:	d144      	bne.n	800402a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x1e0>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_GRAVITY);
 8003fa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003faa:	222e      	movs	r2, #46	; 0x2e
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fc8a 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8003fb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fa18 	bl	80043f4 <_ZN3imu6VectorILh3EEaSERKS1_>
 8003fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f9c7 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>

    event->acceleration.x = vec.x();
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f9cd 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	f7fc fd6f 	bl	8000ac4 <__aeabi_d2f>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	615a      	str	r2, [r3, #20]
    event->acceleration.y = vec.y();
 8003fec:	f107 0310 	add.w	r3, r7, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f9c9 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	4621      	mov	r1, r4
 8004000:	f7fc fd60 	bl	8000ac4 <__aeabi_d2f>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	619a      	str	r2, [r3, #24]
    event->acceleration.z = vec.z();
 800400a:	f107 0310 	add.w	r3, r7, #16
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f9c6 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 8004014:	4603      	mov	r3, r0
 8004016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800401a:	4618      	mov	r0, r3
 800401c:	4621      	mov	r1, r4
 800401e:	f7fc fd51 	bl	8000ac4 <__aeabi_d2f>
 8004022:	4602      	mov	r2, r0
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61da      	str	r2, [r3, #28]
 8004028:	e0d6      	b.n	80041d8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_EULER)
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	2b1a      	cmp	r3, #26
 800402e:	d144      	bne.n	80040ba <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x270>
  {
    event->type = SENSOR_TYPE_ORIENTATION;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2203      	movs	r2, #3
 8004034:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_EULER);
 8004036:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800403a:	221a      	movs	r2, #26
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fc42 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8004044:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f9d0 	bl	80043f4 <_ZN3imu6VectorILh3EEaSERKS1_>
 8004054:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f97f 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>

    event->orientation.x = vec.x();
 800405e:	f107 0310 	add.w	r3, r7, #16
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f985 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 8004068:	4603      	mov	r3, r0
 800406a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800406e:	4618      	mov	r0, r3
 8004070:	4621      	mov	r1, r4
 8004072:	f7fc fd27 	bl	8000ac4 <__aeabi_d2f>
 8004076:	4602      	mov	r2, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	615a      	str	r2, [r3, #20]
    event->orientation.y = vec.y();
 800407c:	f107 0310 	add.w	r3, r7, #16
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f981 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 8004086:	4603      	mov	r3, r0
 8004088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800408c:	4618      	mov	r0, r3
 800408e:	4621      	mov	r1, r4
 8004090:	f7fc fd18 	bl	8000ac4 <__aeabi_d2f>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	619a      	str	r2, [r3, #24]
    event->orientation.z = vec.z();
 800409a:	f107 0310 	add.w	r3, r7, #16
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f97e 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 80040a4:	4603      	mov	r3, r0
 80040a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040aa:	4618      	mov	r0, r3
 80040ac:	4621      	mov	r1, r4
 80040ae:	f7fc fd09 	bl	8000ac4 <__aeabi_d2f>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	61da      	str	r2, [r3, #28]
 80040b8:	e08e      	b.n	80041d8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GYROSCOPE)
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	2b14      	cmp	r3, #20
 80040be:	d144      	bne.n	800414a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x300>
  {
    event->type = SENSOR_TYPE_ROTATION_VECTOR;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	220b      	movs	r2, #11
 80040c4:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
 80040c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80040ca:	2214      	movs	r2, #20
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fbfa 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 80040d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f988 	bl	80043f4 <_ZN3imu6VectorILh3EEaSERKS1_>
 80040e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f937 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>

    event->gyro.x = vec.x();
 80040ee:	f107 0310 	add.w	r3, r7, #16
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f93d 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 80040f8:	4603      	mov	r3, r0
 80040fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040fe:	4618      	mov	r0, r3
 8004100:	4621      	mov	r1, r4
 8004102:	f7fc fcdf 	bl	8000ac4 <__aeabi_d2f>
 8004106:	4602      	mov	r2, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	615a      	str	r2, [r3, #20]
    event->gyro.y = vec.y();
 800410c:	f107 0310 	add.w	r3, r7, #16
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f939 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 8004116:	4603      	mov	r3, r0
 8004118:	e9d3 3400 	ldrd	r3, r4, [r3]
 800411c:	4618      	mov	r0, r3
 800411e:	4621      	mov	r1, r4
 8004120:	f7fc fcd0 	bl	8000ac4 <__aeabi_d2f>
 8004124:	4602      	mov	r2, r0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	619a      	str	r2, [r3, #24]
    event->gyro.z = vec.z();
 800412a:	f107 0310 	add.w	r3, r7, #16
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f936 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 8004134:	4603      	mov	r3, r0
 8004136:	e9d3 3400 	ldrd	r3, r4, [r3]
 800413a:	4618      	mov	r0, r3
 800413c:	4621      	mov	r1, r4
 800413e:	f7fc fcc1 	bl	8000ac4 <__aeabi_d2f>
 8004142:	4602      	mov	r2, r0
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61da      	str	r2, [r3, #28]
 8004148:	e046      	b.n	80041d8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_MAGNETOMETER)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	2b0e      	cmp	r3, #14
 800414e:	d143      	bne.n	80041d8 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x38e>
  {
    event->type = SENSOR_TYPE_MAGNETIC_FIELD;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2202      	movs	r2, #2
 8004154:	609a      	str	r2, [r3, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
 8004156:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800415a:	220e      	movs	r2, #14
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fbb2 	bl	80038c8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
 8004164:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f940 	bl	80043f4 <_ZN3imu6VectorILh3EEaSERKS1_>
 8004174:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f8ef 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>

    event->magnetic.x = vec.x();
 800417e:	f107 0310 	add.w	r3, r7, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f8f5 	bl	8004372 <_ZN3imu6VectorILh3EE1xEv>
 8004188:	4603      	mov	r3, r0
 800418a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800418e:	4618      	mov	r0, r3
 8004190:	4621      	mov	r1, r4
 8004192:	f7fc fc97 	bl	8000ac4 <__aeabi_d2f>
 8004196:	4602      	mov	r2, r0
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	615a      	str	r2, [r3, #20]
    event->magnetic.y = vec.y();
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f8f1 	bl	8004388 <_ZN3imu6VectorILh3EE1yEv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041ac:	4618      	mov	r0, r3
 80041ae:	4621      	mov	r1, r4
 80041b0:	f7fc fc88 	bl	8000ac4 <__aeabi_d2f>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	619a      	str	r2, [r3, #24]
    event->magnetic.z = vec.z();
 80041ba:	f107 0310 	add.w	r3, r7, #16
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f8ee 	bl	80043a0 <_ZN3imu6VectorILh3EE1zEv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041ca:	4618      	mov	r0, r3
 80041cc:	4621      	mov	r1, r4
 80041ce:	f7fc fc79 	bl	8000ac4 <__aeabi_d2f>
 80041d2:	4602      	mov	r2, r0
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	61da      	str	r2, [r3, #28]
  }
  

  return true;
 80041d8:	2401      	movs	r4, #1
  imu::Vector<3> vec;
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f8bc 	bl	800435c <_ZN3imu6VectorILh3EED1Ev>
  return true;
 80041e4:	4623      	mov	r3, r4
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	37bc      	adds	r7, #188	; 0xbc
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}

080041ee <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, uint8_t value) {
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af02      	add	r7, sp, #8
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
 80041fa:	4613      	mov	r3, r2
 80041fc:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]

	uint8_t buffer[2];
	buffer[0] = reg; // register
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	733b      	strb	r3, [r7, #12]
	buffer[1] = value; // MSB
 8004206:	78bb      	ldrb	r3, [r7, #2]
 8004208:	737b      	strb	r3, [r7, #13]

	status = HAL_I2C_Master_Transmit(&_hi2c1, _address<<1, buffer, 2, 100);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f103 0008 	add.w	r0, r3, #8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	795b      	ldrb	r3, [r3, #5]
 8004214:	b29b      	uxth	r3, r3
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	b299      	uxth	r1, r3
 800421a:	f107 020c 	add.w	r2, r7, #12
 800421e:	2364      	movs	r3, #100	; 0x64
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2302      	movs	r3, #2
 8004224:	f7fd fb80 	bl	8001928 <HAL_I2C_Master_Transmit>
 8004228:	4603      	mov	r3, r0
 800422a:	73fb      	strb	r3, [r7, #15]

	return true;
 800422c:	2301      	movs	r3, #1
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
uint8_t Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
 8004236:	b580      	push	{r7, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	af02      	add	r7, sp, #8
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	70fb      	strb	r3, [r7, #3]

  uint8_t value = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  uint8_t rx[1] = {0};
 8004246:	2300      	movs	r3, #0
 8004248:	733b      	strb	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73bb      	strb	r3, [r7, #14]
  uint8_t tx = (uint8_t)reg;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	72fb      	strb	r3, [r7, #11]

  status = HAL_I2C_Master_Transmit(&_hi2c1, _address<<1, &tx, 1, 100);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f103 0008 	add.w	r0, r3, #8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	795b      	ldrb	r3, [r3, #5]
 800425c:	b29b      	uxth	r3, r3
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	b299      	uxth	r1, r3
 8004262:	f107 020b 	add.w	r2, r7, #11
 8004266:	2364      	movs	r3, #100	; 0x64
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2301      	movs	r3, #1
 800426c:	f7fd fb5c 	bl	8001928 <HAL_I2C_Master_Transmit>
 8004270:	4603      	mov	r3, r0
 8004272:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Master_Receive(&_hi2c1, _address<<1, rx, 1, 100);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f103 0008 	add.w	r0, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	795b      	ldrb	r3, [r3, #5]
 800427e:	b29b      	uxth	r3, r3
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	b299      	uxth	r1, r3
 8004284:	f107 020c 	add.w	r2, r7, #12
 8004288:	2364      	movs	r3, #100	; 0x64
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2301      	movs	r3, #1
 800428e:	f7fd fc3f 	bl	8001b10 <HAL_I2C_Master_Receive>
 8004292:	4603      	mov	r3, r0
 8004294:	73bb      	strb	r3, [r7, #14]
  value = rx[0];
 8004296:	7b3b      	ldrb	r3, [r7, #12]
 8004298:	73fb      	strb	r3, [r7, #15]

  return value;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, uint8_t *buffer,
                              uint8_t len) {
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b093      	sub	sp, #76	; 0x4c
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	461a      	mov	r2, r3
 80042b0:	460b      	mov	r3, r1
 80042b2:	72fb      	strb	r3, [r7, #11]
 80042b4:	4613      	mov	r3, r2
 80042b6:	72bb      	strb	r3, [r7, #10]
	uint8_t readed[32];
	HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for(int i = 0; i < 32; i++){
 80042be:	2300      	movs	r3, #0
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c4:	2b1f      	cmp	r3, #31
 80042c6:	dc09      	bgt.n	80042dc <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x38>
		readed[i] = 0;
 80042c8:	f107 0214 	add.w	r2, r7, #20
 80042cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ce:	4413      	add	r3, r2
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++){
 80042d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d6:	3301      	adds	r3, #1
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042da:	e7f2      	b.n	80042c2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x1e>
	}

	uint8_t tx = (uint8_t)reg;
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	74fb      	strb	r3, [r7, #19]
	status = HAL_I2C_Master_Transmit(&_hi2c1, _address<<1, &tx, 1, 100);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f103 0008 	add.w	r0, r3, #8
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	795b      	ldrb	r3, [r3, #5]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	b299      	uxth	r1, r3
 80042f0:	f107 0213 	add.w	r2, r7, #19
 80042f4:	2364      	movs	r3, #100	; 0x64
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2301      	movs	r3, #1
 80042fa:	f7fd fb15 	bl	8001928 <HAL_I2C_Master_Transmit>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	status = HAL_I2C_Master_Receive(&_hi2c1, _address<<1, readed, len, 100);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f103 0008 	add.w	r0, r3, #8
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	795b      	ldrb	r3, [r3, #5]
 800430e:	b29b      	uxth	r3, r3
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	b299      	uxth	r1, r3
 8004314:	7abb      	ldrb	r3, [r7, #10]
 8004316:	b29c      	uxth	r4, r3
 8004318:	f107 0214 	add.w	r2, r7, #20
 800431c:	2364      	movs	r3, #100	; 0x64
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	4623      	mov	r3, r4
 8004322:	f7fd fbf5 	bl	8001b10 <HAL_I2C_Master_Receive>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for(int i = 0; i < len; i++){
 800432c:	2300      	movs	r3, #0
 800432e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004330:	7abb      	ldrb	r3, [r7, #10]
 8004332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004334:	429a      	cmp	r2, r3
 8004336:	da0c      	bge.n	8004352 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0xae>
		buffer[i] = readed[i];
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	f107 0114 	add.w	r1, r7, #20
 8004342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004344:	440a      	add	r2, r1
 8004346:	7812      	ldrb	r2, [r2, #0]
 8004348:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++){
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	3301      	adds	r3, #1
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004350:	e7ee      	b.n	8004330 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x8c>
	}

	return true;
 8004352:	2301      	movs	r3, #1
}
 8004354:	4618      	mov	r0, r3
 8004356:	3744      	adds	r7, #68	; 0x44
 8004358:	46bd      	mov	sp, r7
 800435a:	bd90      	pop	{r4, r7, pc}

0800435c <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    {
    }
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3308      	adds	r3, #8
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3310      	adds	r3, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2218      	movs	r2, #24
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fcf3 	bl	8005db2 <memset>
    }
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
    }
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <_ZN3imu6VectorILh3EEaSERKS1_>:
    Vector& operator=(const Vector& v)
 80043f4:	b490      	push	{r4, r7}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
        for (int x = 0; x < N; x++ )
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b02      	cmp	r3, #2
 8004406:	dc0f      	bgt.n	8004428 <_ZN3imu6VectorILh3EEaSERKS1_+0x34>
            p_vec[x] = v.p_vec[x];
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	00d2      	lsls	r2, r2, #3
 800441a:	440a      	add	r2, r1
 800441c:	e9c2 3400 	strd	r3, r4, [r2]
        for (int x = 0; x < N; x++ )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e7ec      	b.n	8004402 <_ZN3imu6VectorILh3EEaSERKS1_+0xe>
        return *this;
 8004428:	687b      	ldr	r3, [r7, #4]
    }
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bc90      	pop	{r4, r7}
 8004432:	4770      	bx	lr

08004434 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f971 	bl	800372c <_ZN15Adafruit_SensorD1Ev>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	08005f40 	.word	0x08005f40

08004458 <_ZN15Adafruit_BNO055D0Ev>:
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ffe7 	bl	8004434 <_ZN15Adafruit_BNO055D1Ev>
 8004466:	215c      	movs	r1, #92	; 0x5c
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fc3b 	bl	8004ce4 <_ZdlPvj>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447a:	b0cb      	sub	sp, #300	; 0x12c
 800447c:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800447e:	f7fc fb71 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004482:	f000 f921 	bl	80046c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004486:	f000 fa31 	bl	80048ec <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 800448a:	f000 f9a7 	bl	80047dc <_ZL12MX_CAN1_Initv>
  MX_I2C2_Init();
 800448e:	f000 f9df 	bl	8004850 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */
  double xPos = 0, yPos = 0, headingVel = 0;
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	f04f 0400 	mov.w	r4, #0
 800449a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	f04f 0400 	mov.w	r4, #0
 80044b2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
  uint16_t BNO055_SAMPLERATE_DELAY_MS = 10; //how often to read data from the board
 80044b6:	230a      	movs	r3, #10
 80044b8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  uint16_t PRINT_DELAY_MS = 500; // how often to print the data
 80044bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80044c0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
  uint16_t printCount = 0; //counter to avoid printing every 10MS sample
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
  double ACCEL_VEL_TRANSITION =  (double)(BNO055_SAMPLERATE_DELAY_MS) / 1000.0;
 80044ca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fb ffbc 	bl	800044c <__aeabi_ui2d>
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	4b75      	ldr	r3, [pc, #468]	; (80046b0 <main+0x238>)
 80044da:	f7fc f95b 	bl	8000794 <__aeabi_ddiv>
 80044de:	4603      	mov	r3, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
  double ACCEL_POS_TRANSITION = 0.5 * ACCEL_VEL_TRANSITION * ACCEL_VEL_TRANSITION;
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <main+0x23c>)
 80044ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80044f0:	f7fc f826 	bl	8000540 <__aeabi_dmul>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	461a      	mov	r2, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004500:	f7fc f81e 	bl	8000540 <__aeabi_dmul>
 8004504:	4603      	mov	r3, r0
 8004506:	460c      	mov	r4, r1
 8004508:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
  double DEG_2_RAD = 0.01745329251; //trig functions require radians, BNO055 outputs degrees
 800450c:	a466      	add	r4, pc, #408	; (adr r4, 80046a8 <main+0x230>)
 800450e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004512:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

  Adafruit_BNO055 bno = Adafruit_BNO055(hi2c2, 55);
 8004516:	4e68      	ldr	r6, [pc, #416]	; (80046b8 <main+0x240>)
 8004518:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800451c:	2328      	movs	r3, #40	; 0x28
 800451e:	9311      	str	r3, [sp, #68]	; 0x44
 8004520:	2337      	movs	r3, #55	; 0x37
 8004522:	9310      	str	r3, [sp, #64]	; 0x40
 8004524:	466d      	mov	r5, sp
 8004526:	f106 040c 	add.w	r4, r6, #12
 800452a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800452c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800452e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004536:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800453a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800453e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004542:	4660      	mov	r0, ip
 8004544:	f7ff f91e 	bl	8003784 <_ZN15Adafruit_BNO055C1E19__I2C_HandleTypeDeflh>

  bno.begin();
 8004548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800454c:	210c      	movs	r1, #12
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff f942 	bl	80037d8 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>

  // Initializing CAN Filter
  filterConfigCAN(&hcan1);
 8004554:	4859      	ldr	r0, [pc, #356]	; (80046bc <main+0x244>)
 8004556:	f000 fb4d 	bl	8004bf4 <_Z15filterConfigCANP19__CAN_HandleTypeDef>
  HAL_CAN_Start(&hcan1);
 800455a:	4858      	ldr	r0, [pc, #352]	; (80046bc <main+0x244>)
 800455c:	f7fc fd59 	bl	8001012 <HAL_CAN_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensors_event_t orientationData , linearAccelData;
	  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
 8004560:	4639      	mov	r1, r7
 8004562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004566:	221a      	movs	r2, #26
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fc6e 	bl	8003e4a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>
	  //  bno.getEvent(&angVelData, Adafruit_BNO055::VECTOR_GYROSCOPE);
	  bno.getEvent(&linearAccelData, Adafruit_BNO055::VECTOR_LINEARACCEL);
 800456e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004576:	2228      	movs	r2, #40	; 0x28
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fc66 	bl	8003e4a <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>

	  xPos = xPos + ACCEL_POS_TRANSITION * linearAccelData.acceleration.x;
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ff85 	bl	8000490 <__aeabi_f2d>
 8004586:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800458a:	f7fb ffd9 	bl	8000540 <__aeabi_dmul>
 800458e:	4603      	mov	r3, r0
 8004590:	460c      	mov	r4, r1
 8004592:	461a      	mov	r2, r3
 8004594:	4623      	mov	r3, r4
 8004596:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800459a:	f7fb fe1b 	bl	80001d4 <__adddf3>
 800459e:	4603      	mov	r3, r0
 80045a0:	460c      	mov	r4, r1
 80045a2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	  yPos = yPos + ACCEL_POS_TRANSITION * linearAccelData.acceleration.y;
 80045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb ff71 	bl	8000490 <__aeabi_f2d>
 80045ae:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80045b2:	f7fb ffc5 	bl	8000540 <__aeabi_dmul>
 80045b6:	4603      	mov	r3, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80045c2:	f7fb fe07 	bl	80001d4 <__adddf3>
 80045c6:	4603      	mov	r3, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	  // velocity of sensor in the direction it's facing
	  headingVel = ACCEL_VEL_TRANSITION * linearAccelData.acceleration.x / cos(DEG_2_RAD * orientationData.orientation.x);
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff5d 	bl	8000490 <__aeabi_f2d>
 80045d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80045da:	f7fb ffb1 	bl	8000540 <__aeabi_dmul>
 80045de:	4603      	mov	r3, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	4625      	mov	r5, r4
 80045e4:	461c      	mov	r4, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fb ff51 	bl	8000490 <__aeabi_f2d>
 80045ee:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80045f2:	f7fb ffa5 	bl	8000540 <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	ec43 2b17 	vmov	d7, r2, r3
 80045fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004602:	eef0 0a67 	vmov.f32	s1, s15
 8004606:	f000 fb83 	bl	8004d10 <cos>
 800460a:	ec53 2b10 	vmov	r2, r3, d0
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f7fc f8bf 	bl	8000794 <__aeabi_ddiv>
 8004616:	4603      	mov	r3, r0
 8004618:	460c      	mov	r4, r1
 800461a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	  HAL_Delay(10);
 800461e:	200a      	movs	r0, #10
 8004620:	f7fc fb10 	bl	8000c44 <HAL_Delay>

	  c.convert_float = orientationData.orientation.x;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <main+0x248>)
 8004628:	6013      	str	r3, [r2, #0]
	  can_tx_pkg.data[0] = c.convert_int;
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <main+0x248>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <main+0x24c>)
 8004632:	711a      	strb	r2, [r3, #4]
	  c.convert_float = orientationData.orientation.y;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <main+0x248>)
 8004638:	6013      	str	r3, [r2, #0]
	  can_tx_pkg.data[1] = c.convert_int;
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <main+0x248>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <main+0x24c>)
 8004642:	715a      	strb	r2, [r3, #5]
	  c.convert_float = orientationData.orientation.z;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <main+0x248>)
 8004648:	6013      	str	r3, [r2, #0]
	  can_tx_pkg.data[2] = c.convert_int;
 800464a:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <main+0x248>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <main+0x24c>)
 8004652:	719a      	strb	r2, [r3, #6]
	  c.convert_float = linearAccelData.acceleration.x;
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <main+0x248>)
 8004658:	6013      	str	r3, [r2, #0]
	  can_tx_pkg.data[3] = c.convert_int;
 800465a:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <main+0x248>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <main+0x24c>)
 8004662:	71da      	strb	r2, [r3, #7]
	  c.convert_float = linearAccelData.acceleration.y;
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <main+0x248>)
 8004668:	6013      	str	r3, [r2, #0]
	  can_tx_pkg.data[4] = c.convert_int;
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <main+0x248>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <main+0x24c>)
 8004672:	721a      	strb	r2, [r3, #8]
	  c.convert_float = linearAccelData.acceleration.z;
 8004674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <main+0x248>)
 8004678:	6013      	str	r3, [r2, #0]
	  can_tx_pkg.data[5] = c.convert_int;
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <main+0x248>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <main+0x24c>)
 8004682:	725a      	strb	r2, [r3, #9]
	  can_tx_pkg.data[6] = 0;
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <main+0x24c>)
 8004686:	2200      	movs	r2, #0
 8004688:	729a      	strb	r2, [r3, #10]
	  can_tx_pkg.data[7] = 0;
 800468a:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <main+0x24c>)
 800468c:	2200      	movs	r2, #0
 800468e:	72da      	strb	r2, [r3, #11]
	  // TODO: Verificar ID
	  can_tx_pkg.identifier = 0;
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <main+0x24c>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

	  sendCanMessage(&hcan1, can_tx_pkg);
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <main+0x24c>)
 8004698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469a:	4808      	ldr	r0, [pc, #32]	; (80046bc <main+0x244>)
 800469c:	f000 faca 	bl	8004c34 <_Z14sendCanMessageP19__CAN_HandleTypeDef13Z_CAN_Package>
  }
 80046a0:	e75e      	b.n	8004560 <main+0xe8>
 80046a2:	bf00      	nop
 80046a4:	f3af 8000 	nop.w
 80046a8:	a226e211 	.word	0xa226e211
 80046ac:	3f91df46 	.word	0x3f91df46
 80046b0:	408f4000 	.word	0x408f4000
 80046b4:	3fe00000 	.word	0x3fe00000
 80046b8:	200000b8 	.word	0x200000b8
 80046bc:	20000090 	.word	0x20000090
 80046c0:	20000110 	.word	0x20000110
 80046c4:	20000104 	.word	0x20000104

080046c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b0b8      	sub	sp, #224	; 0xe0
 80046cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80046d2:	2244      	movs	r2, #68	; 0x44
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 fb6b 	bl	8005db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046ec:	463b      	mov	r3, r7
 80046ee:	2288      	movs	r2, #136	; 0x88
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 fb5d 	bl	8005db2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046f8:	2302      	movs	r3, #2
 80046fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004706:	2310      	movs	r3, #16
 8004708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800470c:	2302      	movs	r3, #2
 800470e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004712:	2302      	movs	r3, #2
 8004714:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800471e:	230a      	movs	r3, #10
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004724:	2307      	movs	r3, #7
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800472a:	2302      	movs	r3, #2
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004730:	2302      	movs	r3, #2
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004736:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fdba 	bl	80022b4 <HAL_RCC_OscConfig>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8004750:	f000 f916 	bl	8004980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004754:	230f      	movs	r3, #15
 8004756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800475a:	2303      	movs	r3, #3
 800475c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004772:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004776:	2104      	movs	r1, #4
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe f94b 	bl	8002a14 <HAL_RCC_ClockConfig>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800478e:	f000 f8f7 	bl	8004980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004796:	2300      	movs	r3, #0
 8004798:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800479a:	463b      	mov	r3, r7
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fb05 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80047b2:	f000 f8e5 	bl	8004980 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80047b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047ba:	f7fd fd25 	bl	8002208 <HAL_PWREx_ControlVoltageScaling>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 80047ce:	f000 f8d7 	bl	8004980 <Error_Handler>
  }
}
 80047d2:	bf00      	nop
 80047d4:	37e0      	adds	r7, #224	; 0xe0
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <_ZL12MX_CAN1_Initv+0x70>)
 80047e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 80047e8:	2210      	movs	r2, #16
 80047ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 80047fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 8004802:	2200      	movs	r2, #0
 8004804:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 8004808:	2200      	movs	r2, #0
 800480a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 800480e:	2200      	movs	r2, #0
 8004810:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 8004814:	2200      	movs	r2, #0
 8004816:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 800481a:	2200      	movs	r2, #0
 800481c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 8004826:	2200      	movs	r2, #0
 8004828:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800482a:	4807      	ldr	r0, [pc, #28]	; (8004848 <_ZL12MX_CAN1_Initv+0x6c>)
 800482c:	f7fc fa2c 	bl	8000c88 <HAL_CAN_Init>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8004840:	f000 f89e 	bl	8004980 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000090 	.word	0x20000090
 800484c:	40006400 	.word	0x40006400

08004850 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 8004856:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <_ZL12MX_I2C2_Initv+0x94>)
 8004858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800485a:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 800485c:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <_ZL12MX_I2C2_Initv+0x98>)
 800485e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004860:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 8004868:	2201      	movs	r2, #1
 800486a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 800486e:	2200      	movs	r2, #0
 8004870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 8004874:	2200      	movs	r2, #0
 8004876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 800487a:	2200      	movs	r2, #0
 800487c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 8004880:	2200      	movs	r2, #0
 8004882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004884:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 8004886:	2200      	movs	r2, #0
 8004888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800488a:	4815      	ldr	r0, [pc, #84]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 800488c:	f7fc ffbc 	bl	8001808 <HAL_I2C_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	bf14      	ite	ne
 8004896:	2301      	movne	r3, #1
 8004898:	2300      	moveq	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 80048a0:	f000 f86e 	bl	8004980 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80048a4:	2100      	movs	r1, #0
 80048a6:	480e      	ldr	r0, [pc, #56]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 80048a8:	f7fd fc08 	bl	80020bc <HAL_I2CEx_ConfigAnalogFilter>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80048bc:	f000 f860 	bl	8004980 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80048c0:	2100      	movs	r1, #0
 80048c2:	4807      	ldr	r0, [pc, #28]	; (80048e0 <_ZL12MX_I2C2_Initv+0x90>)
 80048c4:	f7fd fc45 	bl	8002152 <HAL_I2CEx_ConfigDigitalFilter>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80048d8:	f000 f852 	bl	8004980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200000b8 	.word	0x200000b8
 80048e4:	40005800 	.word	0x40005800
 80048e8:	10909cec 	.word	0x10909cec

080048ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	609a      	str	r2, [r3, #8]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	4a10      	ldr	r2, [pc, #64]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <_ZL12MX_GPIO_Initv+0x8c>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800494a:	2200      	movs	r2, #0
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	480b      	ldr	r0, [pc, #44]	; (800497c <_ZL12MX_GPIO_Initv+0x90>)
 8004950:	f7fc ff42 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004954:	2340      	movs	r3, #64	; 0x40
 8004956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004958:	2301      	movs	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004960:	2300      	movs	r3, #0
 8004962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	4619      	mov	r1, r3
 800496a:	4804      	ldr	r0, [pc, #16]	; (800497c <_ZL12MX_GPIO_Initv+0x90>)
 800496c:	f7fc fd8c 	bl	8001488 <HAL_GPIO_Init>

}
 8004970:	bf00      	nop
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	48000800 	.word	0x48000800

08004980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_MspInit+0x44>)
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <HAL_MspInit+0x44>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6613      	str	r3, [r2, #96]	; 0x60
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_MspInit+0x44>)
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_MspInit+0x44>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_MspInit+0x44>)
 80049b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b8:	6593      	str	r3, [r2, #88]	; 0x58
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_MspInit+0x44>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000

080049d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_CAN_MspInit+0x80>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d129      	bne.n	8004a4e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_CAN_MspInit+0x84>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_CAN_MspInit+0x84>)
 8004a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a04:	6593      	str	r3, [r2, #88]	; 0x58
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_CAN_MspInit+0x84>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_CAN_MspInit+0x84>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_CAN_MspInit+0x84>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_CAN_MspInit+0x84>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004a3c:	2309      	movs	r3, #9
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	4619      	mov	r1, r3
 8004a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a4a:	f7fc fd1d 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004a4e:	bf00      	nop
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40006400 	.word	0x40006400
 8004a5c:	40021000 	.word	0x40021000

08004a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a68:	f107 0314 	add.w	r3, r7, #20
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	609a      	str	r2, [r3, #8]
 8004a74:	60da      	str	r2, [r3, #12]
 8004a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a17      	ldr	r2, [pc, #92]	; (8004adc <HAL_I2C_MspInit+0x7c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d128      	bne.n	8004ad4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_I2C_MspInit+0x80>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_I2C_MspInit+0x80>)
 8004a88:	f043 0302 	orr.w	r3, r3, #2
 8004a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_I2C_MspInit+0x80>)
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aa0:	2312      	movs	r3, #18
 8004aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004aac:	2304      	movs	r3, #4
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	480b      	ldr	r0, [pc, #44]	; (8004ae4 <HAL_I2C_MspInit+0x84>)
 8004ab8:	f7fc fce6 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <HAL_I2C_MspInit+0x80>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <HAL_I2C_MspInit+0x80>)
 8004ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_I2C_MspInit+0x80>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004ad4:	bf00      	nop
 8004ad6:	3728      	adds	r7, #40	; 0x28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40005800 	.word	0x40005800
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	48000400 	.word	0x48000400

08004ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004af6:	b480      	push	{r7}
 8004af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004afa:	e7fe      	b.n	8004afa <HardFault_Handler+0x4>

08004afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b00:	e7fe      	b.n	8004b00 <MemManage_Handler+0x4>

08004b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b06:	e7fe      	b.n	8004b06 <BusFault_Handler+0x4>

08004b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b0c:	e7fe      	b.n	8004b0c <UsageFault_Handler+0x4>

08004b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b3c:	f7fc f864 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
	return 1;
 8004b48:	2301      	movs	r3, #1
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <_kill>:

int _kill(int pid, int sig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b5e:	f001 f8eb 	bl	8005d38 <__errno>
 8004b62:	4602      	mov	r2, r0
 8004b64:	2316      	movs	r3, #22
 8004b66:	6013      	str	r3, [r2, #0]
	return -1;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_exit>:

void _exit (int status)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ffe7 	bl	8004b54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b86:	e7fe      	b.n	8004b86 <_exit+0x12>

08004b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <SystemInit+0x64>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <SystemInit+0x64>)
 8004b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <SystemInit+0x68>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <SystemInit+0x68>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <SystemInit+0x68>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <SystemInit+0x68>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0f      	ldr	r2, [pc, #60]	; (8004bf0 <SystemInit+0x68>)
 8004bb4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004bb8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <SystemInit+0x68>)
 8004bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <SystemInit+0x68>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <SystemInit+0x68>)
 8004bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <SystemInit+0x68>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <SystemInit+0x64>)
 8004bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bde:	609a      	str	r2, [r3, #8]
#endif
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000ed00 	.word	0xe000ed00
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <_Z15filterConfigCANP19__CAN_HandleTypeDef>:
#include "zenith_can_lib.h"

Z_CAN_Package NULL_MSG = {0xffffffff, {0,0,0,0,0,0,0,0}};

void filterConfigCAN(CAN_HandleTypeDef *hcan1)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	; 0x30
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

	CAN_FilterTypeDef can1FilterInit;

	can1FilterInit.FilterActivation = ENABLE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	can1FilterInit.FilterBank = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
	can1FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
	can1FilterInit.FilterIdHigh = 0x0000;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
	can1FilterInit.FilterIdLow = 0x0000;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
	can1FilterInit.FilterMaskIdHigh = 0x0000;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
	can1FilterInit.FilterMaskIdLow = 0x0000;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
	can1FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]
	can1FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcan1, &can1FilterInit);
 8004c20:	f107 0308 	add.w	r3, r7, #8
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc f929 	bl	8000e7e <HAL_CAN_ConfigFilter>
}
 8004c2c:	bf00      	nop
 8004c2e:	3730      	adds	r7, #48	; 0x30
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <_Z14sendCanMessageP19__CAN_HandleTypeDef13Z_CAN_Package>:

uint8_t sendCanMessage(CAN_HandleTypeDef *hcan1, Z_CAN_Package package)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t pTxMailbox;

	//Mounting the CAN header
	CAN_TxHeaderTypeDef pTxHeader;
	pTxHeader.DLC = 8;
 8004c42:	2308      	movs	r3, #8
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
	pTxHeader.IDE = CAN_ID_STD;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
	pTxHeader.RTR = CAN_RTR_DATA;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	623b      	str	r3, [r7, #32]
	pTxHeader.StdId = package.identifier;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan1) != 0){
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7fc fafc 	bl	8001250 <HAL_CAN_GetTxMailboxesFreeLevel>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf14      	ite	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	2300      	moveq	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00b      	beq.n	8004c80 <_Z14sendCanMessageP19__CAN_HandleTypeDef13Z_CAN_Package+0x4c>
		HAL_CAN_AddTxMessage(hcan1, &pTxHeader, package.data, &pTxMailbox);
 8004c68:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	f107 0114 	add.w	r1, r7, #20
 8004c74:	4603      	mov	r3, r0
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7fc fa0f 	bl	800109a <HAL_CAN_AddTxMessage>
		return 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <_Z14sendCanMessageP19__CAN_HandleTypeDef13Z_CAN_Package+0x4e>
	}
	else{
		return -1;
 8004c80:	23ff      	movs	r3, #255	; 0xff
	}
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3730      	adds	r7, #48	; 0x30
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c92:	e003      	b.n	8004c9c <LoopCopyDataInit>

08004c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c9a:	3104      	adds	r1, #4

08004c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c9c:	480b      	ldr	r0, [pc, #44]	; (8004ccc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ca4:	d3f6      	bcc.n	8004c94 <CopyDataInit>
	ldr	r2, =_sbss
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ca8:	e002      	b.n	8004cb0 <LoopFillZerobss>

08004caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004cac:	f842 3b04 	str.w	r3, [r2], #4

08004cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <LoopForever+0x16>)
	cmp	r2, r3
 8004cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004cb4:	d3f9      	bcc.n	8004caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cb6:	f7ff ff67 	bl	8004b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cba:	f001 f843 	bl	8005d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004cbe:	f7ff fbdb 	bl	8004478 <main>

08004cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8004cc2:	e7fe      	b.n	8004cc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004cc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004cc8:	08006190 	.word	0x08006190
	ldr	r0, =_sdata
 8004ccc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004cd0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004cd4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004cd8:	20000120 	.word	0x20000120

08004cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004cdc:	e7fe      	b.n	8004cdc <ADC1_2_IRQHandler>

08004cde <__cxa_pure_virtual>:
 8004cde:	b508      	push	{r3, lr}
 8004ce0:	f000 f810 	bl	8004d04 <_ZSt9terminatev>

08004ce4 <_ZdlPvj>:
 8004ce4:	f000 b800 	b.w	8004ce8 <_ZdlPv>

08004ce8 <_ZdlPv>:
 8004ce8:	f001 b850 	b.w	8005d8c <free>

08004cec <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004cec:	b508      	push	{r3, lr}
 8004cee:	4780      	blx	r0
 8004cf0:	f001 f81b 	bl	8005d2a <abort>

08004cf4 <_ZSt13get_terminatev>:
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <_ZSt13get_terminatev+0xc>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	f3bf 8f5b 	dmb	ish
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	2000000c 	.word	0x2000000c

08004d04 <_ZSt9terminatev>:
 8004d04:	b508      	push	{r3, lr}
 8004d06:	f7ff fff5 	bl	8004cf4 <_ZSt13get_terminatev>
 8004d0a:	f7ff ffef 	bl	8004cec <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004d10 <cos>:
 8004d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d12:	ec51 0b10 	vmov	r0, r1, d0
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <cos+0x80>)
 8004d18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	dc06      	bgt.n	8004d2e <cos+0x1e>
 8004d20:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004d88 <cos+0x78>
 8004d24:	f000 fa2c 	bl	8005180 <__kernel_cos>
 8004d28:	ec51 0b10 	vmov	r0, r1, d0
 8004d2c:	e007      	b.n	8004d3e <cos+0x2e>
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <cos+0x84>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	dd09      	ble.n	8004d48 <cos+0x38>
 8004d34:	ee10 2a10 	vmov	r2, s0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	f7fb fa49 	bl	80001d0 <__aeabi_dsub>
 8004d3e:	ec41 0b10 	vmov	d0, r0, r1
 8004d42:	b005      	add	sp, #20
 8004d44:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d48:	4668      	mov	r0, sp
 8004d4a:	f000 f825 	bl	8004d98 <__ieee754_rem_pio2>
 8004d4e:	f000 0003 	and.w	r0, r0, #3
 8004d52:	2801      	cmp	r0, #1
 8004d54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d58:	ed9d 0b00 	vldr	d0, [sp]
 8004d5c:	d007      	beq.n	8004d6e <cos+0x5e>
 8004d5e:	2802      	cmp	r0, #2
 8004d60:	d00e      	beq.n	8004d80 <cos+0x70>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d0de      	beq.n	8004d24 <cos+0x14>
 8004d66:	2001      	movs	r0, #1
 8004d68:	f000 fe12 	bl	8005990 <__kernel_sin>
 8004d6c:	e7dc      	b.n	8004d28 <cos+0x18>
 8004d6e:	f000 fe0f 	bl	8005990 <__kernel_sin>
 8004d72:	ec53 2b10 	vmov	r2, r3, d0
 8004d76:	ee10 0a10 	vmov	r0, s0
 8004d7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d7e:	e7de      	b.n	8004d3e <cos+0x2e>
 8004d80:	f000 f9fe 	bl	8005180 <__kernel_cos>
 8004d84:	e7f5      	b.n	8004d72 <cos+0x62>
 8004d86:	bf00      	nop
	...
 8004d90:	3fe921fb 	.word	0x3fe921fb
 8004d94:	7fefffff 	.word	0x7fefffff

08004d98 <__ieee754_rem_pio2>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	ec57 6b10 	vmov	r6, r7, d0
 8004da0:	4bc3      	ldr	r3, [pc, #780]	; (80050b0 <__ieee754_rem_pio2+0x318>)
 8004da2:	b08d      	sub	sp, #52	; 0x34
 8004da4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004da8:	4598      	cmp	r8, r3
 8004daa:	4604      	mov	r4, r0
 8004dac:	9704      	str	r7, [sp, #16]
 8004dae:	dc07      	bgt.n	8004dc0 <__ieee754_rem_pio2+0x28>
 8004db0:	2200      	movs	r2, #0
 8004db2:	2300      	movs	r3, #0
 8004db4:	ed84 0b00 	vstr	d0, [r4]
 8004db8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	e027      	b.n	8004e10 <__ieee754_rem_pio2+0x78>
 8004dc0:	4bbc      	ldr	r3, [pc, #752]	; (80050b4 <__ieee754_rem_pio2+0x31c>)
 8004dc2:	4598      	cmp	r8, r3
 8004dc4:	dc75      	bgt.n	8004eb2 <__ieee754_rem_pio2+0x11a>
 8004dc6:	9b04      	ldr	r3, [sp, #16]
 8004dc8:	4dbb      	ldr	r5, [pc, #748]	; (80050b8 <__ieee754_rem_pio2+0x320>)
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	ee10 0a10 	vmov	r0, s0
 8004dd0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005078 <__ieee754_rem_pio2+0x2e0>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	dd36      	ble.n	8004e48 <__ieee754_rem_pio2+0xb0>
 8004dda:	f7fb f9f9 	bl	80001d0 <__aeabi_dsub>
 8004dde:	45a8      	cmp	r8, r5
 8004de0:	4606      	mov	r6, r0
 8004de2:	460f      	mov	r7, r1
 8004de4:	d018      	beq.n	8004e18 <__ieee754_rem_pio2+0x80>
 8004de6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2e8>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb f9f0 	bl	80001d0 <__aeabi_dsub>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	e9c4 2300 	strd	r2, r3, [r4]
 8004df8:	4630      	mov	r0, r6
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	f7fb f9e8 	bl	80001d0 <__aeabi_dsub>
 8004e00:	a39f      	add	r3, pc, #636	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2e8>)
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb f9e3 	bl	80001d0 <__aeabi_dsub>
 8004e0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e0e:	2501      	movs	r5, #1
 8004e10:	4628      	mov	r0, r5
 8004e12:	b00d      	add	sp, #52	; 0x34
 8004e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e18:	a39b      	add	r3, pc, #620	; (adr r3, 8005088 <__ieee754_rem_pio2+0x2f0>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb f9d7 	bl	80001d0 <__aeabi_dsub>
 8004e22:	a39b      	add	r3, pc, #620	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2f8>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	4606      	mov	r6, r0
 8004e2a:	460f      	mov	r7, r1
 8004e2c:	f7fb f9d0 	bl	80001d0 <__aeabi_dsub>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	e9c4 2300 	strd	r2, r3, [r4]
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb f9c8 	bl	80001d0 <__aeabi_dsub>
 8004e40:	a393      	add	r3, pc, #588	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2f8>)
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	e7de      	b.n	8004e06 <__ieee754_rem_pio2+0x6e>
 8004e48:	f7fb f9c4 	bl	80001d4 <__adddf3>
 8004e4c:	45a8      	cmp	r8, r5
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460f      	mov	r7, r1
 8004e52:	d016      	beq.n	8004e82 <__ieee754_rem_pio2+0xea>
 8004e54:	a38a      	add	r3, pc, #552	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2e8>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f7fb f9bb 	bl	80001d4 <__adddf3>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9c4 2300 	strd	r2, r3, [r4]
 8004e66:	4630      	mov	r0, r6
 8004e68:	4639      	mov	r1, r7
 8004e6a:	f7fb f9b1 	bl	80001d0 <__aeabi_dsub>
 8004e6e:	a384      	add	r3, pc, #528	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2e8>)
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f7fb f9ae 	bl	80001d4 <__adddf3>
 8004e78:	f04f 35ff 	mov.w	r5, #4294967295
 8004e7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e80:	e7c6      	b.n	8004e10 <__ieee754_rem_pio2+0x78>
 8004e82:	a381      	add	r3, pc, #516	; (adr r3, 8005088 <__ieee754_rem_pio2+0x2f0>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f7fb f9a4 	bl	80001d4 <__adddf3>
 8004e8c:	a380      	add	r3, pc, #512	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2f8>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	f7fb f99d 	bl	80001d4 <__adddf3>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	e9c4 2300 	strd	r2, r3, [r4]
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	4639      	mov	r1, r7
 8004ea6:	f7fb f993 	bl	80001d0 <__aeabi_dsub>
 8004eaa:	a379      	add	r3, pc, #484	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2f8>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	e7e0      	b.n	8004e74 <__ieee754_rem_pio2+0xdc>
 8004eb2:	4b82      	ldr	r3, [pc, #520]	; (80050bc <__ieee754_rem_pio2+0x324>)
 8004eb4:	4598      	cmp	r8, r3
 8004eb6:	f300 80d0 	bgt.w	800505a <__ieee754_rem_pio2+0x2c2>
 8004eba:	f000 fe23 	bl	8005b04 <fabs>
 8004ebe:	ec57 6b10 	vmov	r6, r7, d0
 8004ec2:	ee10 0a10 	vmov	r0, s0
 8004ec6:	a374      	add	r3, pc, #464	; (adr r3, 8005098 <__ieee754_rem_pio2+0x300>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	4639      	mov	r1, r7
 8004ece:	f7fb fb37 	bl	8000540 <__aeabi_dmul>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b7a      	ldr	r3, [pc, #488]	; (80050c0 <__ieee754_rem_pio2+0x328>)
 8004ed6:	f7fb f97d 	bl	80001d4 <__adddf3>
 8004eda:	f7fb fdcb 	bl	8000a74 <__aeabi_d2iz>
 8004ede:	4605      	mov	r5, r0
 8004ee0:	f7fb fac4 	bl	800046c <__aeabi_i2d>
 8004ee4:	a364      	add	r3, pc, #400	; (adr r3, 8005078 <__ieee754_rem_pio2+0x2e0>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eee:	f7fb fb27 	bl	8000540 <__aeabi_dmul>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	f7fb f969 	bl	80001d0 <__aeabi_dsub>
 8004efe:	a360      	add	r3, pc, #384	; (adr r3, 8005080 <__ieee754_rem_pio2+0x2e8>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	4682      	mov	sl, r0
 8004f06:	468b      	mov	fp, r1
 8004f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f0c:	f7fb fb18 	bl	8000540 <__aeabi_dmul>
 8004f10:	2d1f      	cmp	r5, #31
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	dc0c      	bgt.n	8004f32 <__ieee754_rem_pio2+0x19a>
 8004f18:	1e6a      	subs	r2, r5, #1
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <__ieee754_rem_pio2+0x32c>)
 8004f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f20:	4543      	cmp	r3, r8
 8004f22:	d006      	beq.n	8004f32 <__ieee754_rem_pio2+0x19a>
 8004f24:	4632      	mov	r2, r6
 8004f26:	463b      	mov	r3, r7
 8004f28:	4650      	mov	r0, sl
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	f7fb f950 	bl	80001d0 <__aeabi_dsub>
 8004f30:	e00e      	b.n	8004f50 <__ieee754_rem_pio2+0x1b8>
 8004f32:	4632      	mov	r2, r6
 8004f34:	463b      	mov	r3, r7
 8004f36:	4650      	mov	r0, sl
 8004f38:	4659      	mov	r1, fp
 8004f3a:	f7fb f949 	bl	80001d0 <__aeabi_dsub>
 8004f3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	9a05      	ldr	r2, [sp, #20]
 8004f46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	dc02      	bgt.n	8004f56 <__ieee754_rem_pio2+0x1be>
 8004f50:	e9c4 0100 	strd	r0, r1, [r4]
 8004f54:	e039      	b.n	8004fca <__ieee754_rem_pio2+0x232>
 8004f56:	a34c      	add	r3, pc, #304	; (adr r3, 8005088 <__ieee754_rem_pio2+0x2f0>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f60:	f7fb faee 	bl	8000540 <__aeabi_dmul>
 8004f64:	4606      	mov	r6, r0
 8004f66:	460f      	mov	r7, r1
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	4659      	mov	r1, fp
 8004f70:	f7fb f92e 	bl	80001d0 <__aeabi_dsub>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4680      	mov	r8, r0
 8004f7a:	4689      	mov	r9, r1
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	4659      	mov	r1, fp
 8004f80:	f7fb f926 	bl	80001d0 <__aeabi_dsub>
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	f7fb f922 	bl	80001d0 <__aeabi_dsub>
 8004f8c:	a340      	add	r3, pc, #256	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2f8>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	4606      	mov	r6, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f9a:	f7fb fad1 	bl	8000540 <__aeabi_dmul>
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	f7fb f915 	bl	80001d0 <__aeabi_dsub>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4606      	mov	r6, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	4640      	mov	r0, r8
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	f7fb f90d 	bl	80001d0 <__aeabi_dsub>
 8004fb6:	9a05      	ldr	r2, [sp, #20]
 8004fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b31      	cmp	r3, #49	; 0x31
 8004fc0:	dc20      	bgt.n	8005004 <__ieee754_rem_pio2+0x26c>
 8004fc2:	e9c4 0100 	strd	r0, r1, [r4]
 8004fc6:	46c2      	mov	sl, r8
 8004fc8:	46cb      	mov	fp, r9
 8004fca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004fce:	4650      	mov	r0, sl
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	f7fb f8fb 	bl	80001d0 <__aeabi_dsub>
 8004fda:	463b      	mov	r3, r7
 8004fdc:	4632      	mov	r2, r6
 8004fde:	f7fb f8f7 	bl	80001d0 <__aeabi_dsub>
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fea:	f6bf af11 	bge.w	8004e10 <__ieee754_rem_pio2+0x78>
 8004fee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ff2:	6063      	str	r3, [r4, #4]
 8004ff4:	f8c4 8000 	str.w	r8, [r4]
 8004ff8:	60a0      	str	r0, [r4, #8]
 8004ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ffe:	60e3      	str	r3, [r4, #12]
 8005000:	426d      	negs	r5, r5
 8005002:	e705      	b.n	8004e10 <__ieee754_rem_pio2+0x78>
 8005004:	a326      	add	r3, pc, #152	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x308>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800500e:	f7fb fa97 	bl	8000540 <__aeabi_dmul>
 8005012:	4606      	mov	r6, r0
 8005014:	460f      	mov	r7, r1
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	f7fb f8d7 	bl	80001d0 <__aeabi_dsub>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4682      	mov	sl, r0
 8005028:	468b      	mov	fp, r1
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	f7fb f8cf 	bl	80001d0 <__aeabi_dsub>
 8005032:	4632      	mov	r2, r6
 8005034:	463b      	mov	r3, r7
 8005036:	f7fb f8cb 	bl	80001d0 <__aeabi_dsub>
 800503a:	a31b      	add	r3, pc, #108	; (adr r3, 80050a8 <__ieee754_rem_pio2+0x310>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	4606      	mov	r6, r0
 8005042:	460f      	mov	r7, r1
 8005044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005048:	f7fb fa7a 	bl	8000540 <__aeabi_dmul>
 800504c:	4632      	mov	r2, r6
 800504e:	463b      	mov	r3, r7
 8005050:	f7fb f8be 	bl	80001d0 <__aeabi_dsub>
 8005054:	4606      	mov	r6, r0
 8005056:	460f      	mov	r7, r1
 8005058:	e764      	b.n	8004f24 <__ieee754_rem_pio2+0x18c>
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <__ieee754_rem_pio2+0x330>)
 800505c:	4598      	cmp	r8, r3
 800505e:	dd35      	ble.n	80050cc <__ieee754_rem_pio2+0x334>
 8005060:	ee10 2a10 	vmov	r2, s0
 8005064:	463b      	mov	r3, r7
 8005066:	4630      	mov	r0, r6
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb f8b1 	bl	80001d0 <__aeabi_dsub>
 800506e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005072:	e9c4 0100 	strd	r0, r1, [r4]
 8005076:	e6a1      	b.n	8004dbc <__ieee754_rem_pio2+0x24>
 8005078:	54400000 	.word	0x54400000
 800507c:	3ff921fb 	.word	0x3ff921fb
 8005080:	1a626331 	.word	0x1a626331
 8005084:	3dd0b461 	.word	0x3dd0b461
 8005088:	1a600000 	.word	0x1a600000
 800508c:	3dd0b461 	.word	0x3dd0b461
 8005090:	2e037073 	.word	0x2e037073
 8005094:	3ba3198a 	.word	0x3ba3198a
 8005098:	6dc9c883 	.word	0x6dc9c883
 800509c:	3fe45f30 	.word	0x3fe45f30
 80050a0:	2e000000 	.word	0x2e000000
 80050a4:	3ba3198a 	.word	0x3ba3198a
 80050a8:	252049c1 	.word	0x252049c1
 80050ac:	397b839a 	.word	0x397b839a
 80050b0:	3fe921fb 	.word	0x3fe921fb
 80050b4:	4002d97b 	.word	0x4002d97b
 80050b8:	3ff921fb 	.word	0x3ff921fb
 80050bc:	413921fb 	.word	0x413921fb
 80050c0:	3fe00000 	.word	0x3fe00000
 80050c4:	08005fb0 	.word	0x08005fb0
 80050c8:	7fefffff 	.word	0x7fefffff
 80050cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80050d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80050d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80050d8:	4630      	mov	r0, r6
 80050da:	460f      	mov	r7, r1
 80050dc:	f7fb fcca 	bl	8000a74 <__aeabi_d2iz>
 80050e0:	f7fb f9c4 	bl	800046c <__aeabi_i2d>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4630      	mov	r0, r6
 80050ea:	4639      	mov	r1, r7
 80050ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050f0:	f7fb f86e 	bl	80001d0 <__aeabi_dsub>
 80050f4:	2200      	movs	r2, #0
 80050f6:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <__ieee754_rem_pio2+0x3dc>)
 80050f8:	f7fb fa22 	bl	8000540 <__aeabi_dmul>
 80050fc:	460f      	mov	r7, r1
 80050fe:	4606      	mov	r6, r0
 8005100:	f7fb fcb8 	bl	8000a74 <__aeabi_d2iz>
 8005104:	f7fb f9b2 	bl	800046c <__aeabi_i2d>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4630      	mov	r0, r6
 800510e:	4639      	mov	r1, r7
 8005110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005114:	f7fb f85c 	bl	80001d0 <__aeabi_dsub>
 8005118:	2200      	movs	r2, #0
 800511a:	4b16      	ldr	r3, [pc, #88]	; (8005174 <__ieee754_rem_pio2+0x3dc>)
 800511c:	f7fb fa10 	bl	8000540 <__aeabi_dmul>
 8005120:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005124:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005128:	f04f 0803 	mov.w	r8, #3
 800512c:	2600      	movs	r6, #0
 800512e:	2700      	movs	r7, #0
 8005130:	4632      	mov	r2, r6
 8005132:	463b      	mov	r3, r7
 8005134:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005138:	f108 3aff 	add.w	sl, r8, #4294967295
 800513c:	f7fb fc68 	bl	8000a10 <__aeabi_dcmpeq>
 8005140:	b9b0      	cbnz	r0, 8005170 <__ieee754_rem_pio2+0x3d8>
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <__ieee754_rem_pio2+0x3e0>)
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	2302      	movs	r3, #2
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	462a      	mov	r2, r5
 800514c:	4643      	mov	r3, r8
 800514e:	4621      	mov	r1, r4
 8005150:	a806      	add	r0, sp, #24
 8005152:	f000 f8dd 	bl	8005310 <__kernel_rem_pio2>
 8005156:	9b04      	ldr	r3, [sp, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	4605      	mov	r5, r0
 800515c:	f6bf ae58 	bge.w	8004e10 <__ieee754_rem_pio2+0x78>
 8005160:	6863      	ldr	r3, [r4, #4]
 8005162:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	68e3      	ldr	r3, [r4, #12]
 800516a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800516e:	e746      	b.n	8004ffe <__ieee754_rem_pio2+0x266>
 8005170:	46d0      	mov	r8, sl
 8005172:	e7dd      	b.n	8005130 <__ieee754_rem_pio2+0x398>
 8005174:	41700000 	.word	0x41700000
 8005178:	08006030 	.word	0x08006030
 800517c:	00000000 	.word	0x00000000

08005180 <__kernel_cos>:
 8005180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	ec59 8b10 	vmov	r8, r9, d0
 8005188:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800518c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005190:	ed2d 8b02 	vpush	{d8}
 8005194:	eeb0 8a41 	vmov.f32	s16, s2
 8005198:	eef0 8a61 	vmov.f32	s17, s3
 800519c:	da07      	bge.n	80051ae <__kernel_cos+0x2e>
 800519e:	ee10 0a10 	vmov	r0, s0
 80051a2:	4649      	mov	r1, r9
 80051a4:	f7fb fc66 	bl	8000a74 <__aeabi_d2iz>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f000 8089 	beq.w	80052c0 <__kernel_cos+0x140>
 80051ae:	4642      	mov	r2, r8
 80051b0:	464b      	mov	r3, r9
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb f9c3 	bl	8000540 <__aeabi_dmul>
 80051ba:	2200      	movs	r2, #0
 80051bc:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <__kernel_cos+0x178>)
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	f7fb f9bd 	bl	8000540 <__aeabi_dmul>
 80051c6:	a340      	add	r3, pc, #256	; (adr r3, 80052c8 <__kernel_cos+0x148>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	4682      	mov	sl, r0
 80051ce:	468b      	mov	fp, r1
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb f9b4 	bl	8000540 <__aeabi_dmul>
 80051d8:	a33d      	add	r3, pc, #244	; (adr r3, 80052d0 <__kernel_cos+0x150>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fa fff9 	bl	80001d4 <__adddf3>
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	f7fb f9ab 	bl	8000540 <__aeabi_dmul>
 80051ea:	a33b      	add	r3, pc, #236	; (adr r3, 80052d8 <__kernel_cos+0x158>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f7fa ffee 	bl	80001d0 <__aeabi_dsub>
 80051f4:	4622      	mov	r2, r4
 80051f6:	462b      	mov	r3, r5
 80051f8:	f7fb f9a2 	bl	8000540 <__aeabi_dmul>
 80051fc:	a338      	add	r3, pc, #224	; (adr r3, 80052e0 <__kernel_cos+0x160>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f7fa ffe7 	bl	80001d4 <__adddf3>
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	f7fb f999 	bl	8000540 <__aeabi_dmul>
 800520e:	a336      	add	r3, pc, #216	; (adr r3, 80052e8 <__kernel_cos+0x168>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fa ffdc 	bl	80001d0 <__aeabi_dsub>
 8005218:	4622      	mov	r2, r4
 800521a:	462b      	mov	r3, r5
 800521c:	f7fb f990 	bl	8000540 <__aeabi_dmul>
 8005220:	a333      	add	r3, pc, #204	; (adr r3, 80052f0 <__kernel_cos+0x170>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f7fa ffd5 	bl	80001d4 <__adddf3>
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	f7fb f987 	bl	8000540 <__aeabi_dmul>
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f7fb f983 	bl	8000540 <__aeabi_dmul>
 800523a:	ec53 2b18 	vmov	r2, r3, d8
 800523e:	4604      	mov	r4, r0
 8005240:	460d      	mov	r5, r1
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	460b      	mov	r3, r1
 800524c:	4602      	mov	r2, r0
 800524e:	4629      	mov	r1, r5
 8005250:	4620      	mov	r0, r4
 8005252:	f7fa ffbd 	bl	80001d0 <__aeabi_dsub>
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <__kernel_cos+0x17c>)
 8005258:	429e      	cmp	r6, r3
 800525a:	4680      	mov	r8, r0
 800525c:	4689      	mov	r9, r1
 800525e:	dc11      	bgt.n	8005284 <__kernel_cos+0x104>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4650      	mov	r0, sl
 8005266:	4659      	mov	r1, fp
 8005268:	f7fa ffb2 	bl	80001d0 <__aeabi_dsub>
 800526c:	460b      	mov	r3, r1
 800526e:	4924      	ldr	r1, [pc, #144]	; (8005300 <__kernel_cos+0x180>)
 8005270:	4602      	mov	r2, r0
 8005272:	2000      	movs	r0, #0
 8005274:	f7fa ffac 	bl	80001d0 <__aeabi_dsub>
 8005278:	ecbd 8b02 	vpop	{d8}
 800527c:	ec41 0b10 	vmov	d0, r0, r1
 8005280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <__kernel_cos+0x184>)
 8005286:	491e      	ldr	r1, [pc, #120]	; (8005300 <__kernel_cos+0x180>)
 8005288:	429e      	cmp	r6, r3
 800528a:	bfcc      	ite	gt
 800528c:	4d1e      	ldrgt	r5, [pc, #120]	; (8005308 <__kernel_cos+0x188>)
 800528e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005292:	2400      	movs	r4, #0
 8005294:	4622      	mov	r2, r4
 8005296:	462b      	mov	r3, r5
 8005298:	2000      	movs	r0, #0
 800529a:	f7fa ff99 	bl	80001d0 <__aeabi_dsub>
 800529e:	4622      	mov	r2, r4
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	462b      	mov	r3, r5
 80052a6:	4650      	mov	r0, sl
 80052a8:	4659      	mov	r1, fp
 80052aa:	f7fa ff91 	bl	80001d0 <__aeabi_dsub>
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	f7fa ff8d 	bl	80001d0 <__aeabi_dsub>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4630      	mov	r0, r6
 80052bc:	4639      	mov	r1, r7
 80052be:	e7d9      	b.n	8005274 <__kernel_cos+0xf4>
 80052c0:	2000      	movs	r0, #0
 80052c2:	490f      	ldr	r1, [pc, #60]	; (8005300 <__kernel_cos+0x180>)
 80052c4:	e7d8      	b.n	8005278 <__kernel_cos+0xf8>
 80052c6:	bf00      	nop
 80052c8:	be8838d4 	.word	0xbe8838d4
 80052cc:	bda8fae9 	.word	0xbda8fae9
 80052d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80052d4:	3e21ee9e 	.word	0x3e21ee9e
 80052d8:	809c52ad 	.word	0x809c52ad
 80052dc:	3e927e4f 	.word	0x3e927e4f
 80052e0:	19cb1590 	.word	0x19cb1590
 80052e4:	3efa01a0 	.word	0x3efa01a0
 80052e8:	16c15177 	.word	0x16c15177
 80052ec:	3f56c16c 	.word	0x3f56c16c
 80052f0:	5555554c 	.word	0x5555554c
 80052f4:	3fa55555 	.word	0x3fa55555
 80052f8:	3fe00000 	.word	0x3fe00000
 80052fc:	3fd33332 	.word	0x3fd33332
 8005300:	3ff00000 	.word	0x3ff00000
 8005304:	3fe90000 	.word	0x3fe90000
 8005308:	3fd20000 	.word	0x3fd20000
 800530c:	00000000 	.word	0x00000000

08005310 <__kernel_rem_pio2>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	ed2d 8b02 	vpush	{d8}
 8005318:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800531c:	1ed4      	subs	r4, r2, #3
 800531e:	9308      	str	r3, [sp, #32]
 8005320:	9101      	str	r1, [sp, #4]
 8005322:	4bc5      	ldr	r3, [pc, #788]	; (8005638 <__kernel_rem_pio2+0x328>)
 8005324:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005326:	9009      	str	r0, [sp, #36]	; 0x24
 8005328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	9b08      	ldr	r3, [sp, #32]
 8005330:	3b01      	subs	r3, #1
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	2318      	movs	r3, #24
 8005336:	fb94 f4f3 	sdiv	r4, r4, r3
 800533a:	f06f 0317 	mvn.w	r3, #23
 800533e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005342:	fb04 3303 	mla	r3, r4, r3, r3
 8005346:	eb03 0a02 	add.w	sl, r3, r2
 800534a:	9b04      	ldr	r3, [sp, #16]
 800534c:	9a07      	ldr	r2, [sp, #28]
 800534e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005628 <__kernel_rem_pio2+0x318>
 8005352:	eb03 0802 	add.w	r8, r3, r2
 8005356:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005358:	1aa7      	subs	r7, r4, r2
 800535a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800535e:	ae22      	add	r6, sp, #136	; 0x88
 8005360:	2500      	movs	r5, #0
 8005362:	4545      	cmp	r5, r8
 8005364:	dd13      	ble.n	800538e <__kernel_rem_pio2+0x7e>
 8005366:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005628 <__kernel_rem_pio2+0x318>
 800536a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800536e:	2600      	movs	r6, #0
 8005370:	9b04      	ldr	r3, [sp, #16]
 8005372:	429e      	cmp	r6, r3
 8005374:	dc32      	bgt.n	80053dc <__kernel_rem_pio2+0xcc>
 8005376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005378:	9302      	str	r3, [sp, #8]
 800537a:	9b08      	ldr	r3, [sp, #32]
 800537c:	199d      	adds	r5, r3, r6
 800537e:	ab22      	add	r3, sp, #136	; 0x88
 8005380:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005384:	9306      	str	r3, [sp, #24]
 8005386:	ec59 8b18 	vmov	r8, r9, d8
 800538a:	2700      	movs	r7, #0
 800538c:	e01f      	b.n	80053ce <__kernel_rem_pio2+0xbe>
 800538e:	42ef      	cmn	r7, r5
 8005390:	d407      	bmi.n	80053a2 <__kernel_rem_pio2+0x92>
 8005392:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005396:	f7fb f869 	bl	800046c <__aeabi_i2d>
 800539a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800539e:	3501      	adds	r5, #1
 80053a0:	e7df      	b.n	8005362 <__kernel_rem_pio2+0x52>
 80053a2:	ec51 0b18 	vmov	r0, r1, d8
 80053a6:	e7f8      	b.n	800539a <__kernel_rem_pio2+0x8a>
 80053a8:	9906      	ldr	r1, [sp, #24]
 80053aa:	9d02      	ldr	r5, [sp, #8]
 80053ac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80053b0:	9106      	str	r1, [sp, #24]
 80053b2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80053b6:	9502      	str	r5, [sp, #8]
 80053b8:	f7fb f8c2 	bl	8000540 <__aeabi_dmul>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fa ff06 	bl	80001d4 <__adddf3>
 80053c8:	3701      	adds	r7, #1
 80053ca:	4680      	mov	r8, r0
 80053cc:	4689      	mov	r9, r1
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	429f      	cmp	r7, r3
 80053d2:	dde9      	ble.n	80053a8 <__kernel_rem_pio2+0x98>
 80053d4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80053d8:	3601      	adds	r6, #1
 80053da:	e7c9      	b.n	8005370 <__kernel_rem_pio2+0x60>
 80053dc:	9b04      	ldr	r3, [sp, #16]
 80053de:	aa0e      	add	r2, sp, #56	; 0x38
 80053e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053e4:	930c      	str	r3, [sp, #48]	; 0x30
 80053e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80053e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053ec:	9c04      	ldr	r4, [sp, #16]
 80053ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f0:	ab9a      	add	r3, sp, #616	; 0x268
 80053f2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80053f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053fe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005402:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005406:	ab9a      	add	r3, sp, #616	; 0x268
 8005408:	445b      	add	r3, fp
 800540a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800540e:	2500      	movs	r5, #0
 8005410:	1b63      	subs	r3, r4, r5
 8005412:	2b00      	cmp	r3, #0
 8005414:	dc78      	bgt.n	8005508 <__kernel_rem_pio2+0x1f8>
 8005416:	4650      	mov	r0, sl
 8005418:	ec49 8b10 	vmov	d0, r8, r9
 800541c:	f000 fc00 	bl	8005c20 <scalbn>
 8005420:	ec57 6b10 	vmov	r6, r7, d0
 8005424:	2200      	movs	r2, #0
 8005426:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800542a:	ee10 0a10 	vmov	r0, s0
 800542e:	4639      	mov	r1, r7
 8005430:	f7fb f886 	bl	8000540 <__aeabi_dmul>
 8005434:	ec41 0b10 	vmov	d0, r0, r1
 8005438:	f000 fb6e 	bl	8005b18 <floor>
 800543c:	2200      	movs	r2, #0
 800543e:	ec51 0b10 	vmov	r0, r1, d0
 8005442:	4b7e      	ldr	r3, [pc, #504]	; (800563c <__kernel_rem_pio2+0x32c>)
 8005444:	f7fb f87c 	bl	8000540 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fa febe 	bl	80001d0 <__aeabi_dsub>
 8005454:	460f      	mov	r7, r1
 8005456:	4606      	mov	r6, r0
 8005458:	f7fb fb0c 	bl	8000a74 <__aeabi_d2iz>
 800545c:	9006      	str	r0, [sp, #24]
 800545e:	f7fb f805 	bl	800046c <__aeabi_i2d>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4630      	mov	r0, r6
 8005468:	4639      	mov	r1, r7
 800546a:	f7fa feb1 	bl	80001d0 <__aeabi_dsub>
 800546e:	f1ba 0f00 	cmp.w	sl, #0
 8005472:	4606      	mov	r6, r0
 8005474:	460f      	mov	r7, r1
 8005476:	dd6c      	ble.n	8005552 <__kernel_rem_pio2+0x242>
 8005478:	1e62      	subs	r2, r4, #1
 800547a:	ab0e      	add	r3, sp, #56	; 0x38
 800547c:	f1ca 0118 	rsb	r1, sl, #24
 8005480:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005484:	9d06      	ldr	r5, [sp, #24]
 8005486:	fa40 f301 	asr.w	r3, r0, r1
 800548a:	441d      	add	r5, r3
 800548c:	408b      	lsls	r3, r1
 800548e:	1ac0      	subs	r0, r0, r3
 8005490:	ab0e      	add	r3, sp, #56	; 0x38
 8005492:	9506      	str	r5, [sp, #24]
 8005494:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005498:	f1ca 0317 	rsb	r3, sl, #23
 800549c:	fa40 f303 	asr.w	r3, r0, r3
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dd62      	ble.n	800556e <__kernel_rem_pio2+0x25e>
 80054a8:	9b06      	ldr	r3, [sp, #24]
 80054aa:	2200      	movs	r2, #0
 80054ac:	3301      	adds	r3, #1
 80054ae:	9306      	str	r3, [sp, #24]
 80054b0:	4615      	mov	r5, r2
 80054b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80054b6:	4294      	cmp	r4, r2
 80054b8:	f300 8095 	bgt.w	80055e6 <__kernel_rem_pio2+0x2d6>
 80054bc:	f1ba 0f00 	cmp.w	sl, #0
 80054c0:	dd07      	ble.n	80054d2 <__kernel_rem_pio2+0x1c2>
 80054c2:	f1ba 0f01 	cmp.w	sl, #1
 80054c6:	f000 80a2 	beq.w	800560e <__kernel_rem_pio2+0x2fe>
 80054ca:	f1ba 0f02 	cmp.w	sl, #2
 80054ce:	f000 80c1 	beq.w	8005654 <__kernel_rem_pio2+0x344>
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d14a      	bne.n	800556e <__kernel_rem_pio2+0x25e>
 80054d8:	4632      	mov	r2, r6
 80054da:	463b      	mov	r3, r7
 80054dc:	2000      	movs	r0, #0
 80054de:	4958      	ldr	r1, [pc, #352]	; (8005640 <__kernel_rem_pio2+0x330>)
 80054e0:	f7fa fe76 	bl	80001d0 <__aeabi_dsub>
 80054e4:	4606      	mov	r6, r0
 80054e6:	460f      	mov	r7, r1
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	d040      	beq.n	800556e <__kernel_rem_pio2+0x25e>
 80054ec:	4650      	mov	r0, sl
 80054ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005630 <__kernel_rem_pio2+0x320>
 80054f2:	f000 fb95 	bl	8005c20 <scalbn>
 80054f6:	4630      	mov	r0, r6
 80054f8:	4639      	mov	r1, r7
 80054fa:	ec53 2b10 	vmov	r2, r3, d0
 80054fe:	f7fa fe67 	bl	80001d0 <__aeabi_dsub>
 8005502:	4606      	mov	r6, r0
 8005504:	460f      	mov	r7, r1
 8005506:	e032      	b.n	800556e <__kernel_rem_pio2+0x25e>
 8005508:	2200      	movs	r2, #0
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <__kernel_rem_pio2+0x334>)
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fb f816 	bl	8000540 <__aeabi_dmul>
 8005514:	f7fb faae 	bl	8000a74 <__aeabi_d2iz>
 8005518:	f7fa ffa8 	bl	800046c <__aeabi_i2d>
 800551c:	2200      	movs	r2, #0
 800551e:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <__kernel_rem_pio2+0x338>)
 8005520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005524:	f7fb f80c 	bl	8000540 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4640      	mov	r0, r8
 800552e:	4649      	mov	r1, r9
 8005530:	f7fa fe4e 	bl	80001d0 <__aeabi_dsub>
 8005534:	f7fb fa9e 	bl	8000a74 <__aeabi_d2iz>
 8005538:	ab0e      	add	r3, sp, #56	; 0x38
 800553a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800553e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005546:	f7fa fe45 	bl	80001d4 <__adddf3>
 800554a:	3501      	adds	r5, #1
 800554c:	4680      	mov	r8, r0
 800554e:	4689      	mov	r9, r1
 8005550:	e75e      	b.n	8005410 <__kernel_rem_pio2+0x100>
 8005552:	d105      	bne.n	8005560 <__kernel_rem_pio2+0x250>
 8005554:	1e63      	subs	r3, r4, #1
 8005556:	aa0e      	add	r2, sp, #56	; 0x38
 8005558:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800555c:	15c3      	asrs	r3, r0, #23
 800555e:	e79f      	b.n	80054a0 <__kernel_rem_pio2+0x190>
 8005560:	2200      	movs	r2, #0
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <__kernel_rem_pio2+0x33c>)
 8005564:	f7fb fa72 	bl	8000a4c <__aeabi_dcmpge>
 8005568:	2800      	cmp	r0, #0
 800556a:	d139      	bne.n	80055e0 <__kernel_rem_pio2+0x2d0>
 800556c:	9002      	str	r0, [sp, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	2300      	movs	r3, #0
 8005572:	4630      	mov	r0, r6
 8005574:	4639      	mov	r1, r7
 8005576:	f7fb fa4b 	bl	8000a10 <__aeabi_dcmpeq>
 800557a:	2800      	cmp	r0, #0
 800557c:	f000 80c7 	beq.w	800570e <__kernel_rem_pio2+0x3fe>
 8005580:	1e65      	subs	r5, r4, #1
 8005582:	462b      	mov	r3, r5
 8005584:	2200      	movs	r2, #0
 8005586:	9904      	ldr	r1, [sp, #16]
 8005588:	428b      	cmp	r3, r1
 800558a:	da6a      	bge.n	8005662 <__kernel_rem_pio2+0x352>
 800558c:	2a00      	cmp	r2, #0
 800558e:	f000 8088 	beq.w	80056a2 <__kernel_rem_pio2+0x392>
 8005592:	ab0e      	add	r3, sp, #56	; 0x38
 8005594:	f1aa 0a18 	sub.w	sl, sl, #24
 8005598:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80b4 	beq.w	800570a <__kernel_rem_pio2+0x3fa>
 80055a2:	4650      	mov	r0, sl
 80055a4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005630 <__kernel_rem_pio2+0x320>
 80055a8:	f000 fb3a 	bl	8005c20 <scalbn>
 80055ac:	00ec      	lsls	r4, r5, #3
 80055ae:	ab72      	add	r3, sp, #456	; 0x1c8
 80055b0:	191e      	adds	r6, r3, r4
 80055b2:	ec59 8b10 	vmov	r8, r9, d0
 80055b6:	f106 0a08 	add.w	sl, r6, #8
 80055ba:	462f      	mov	r7, r5
 80055bc:	2f00      	cmp	r7, #0
 80055be:	f280 80df 	bge.w	8005780 <__kernel_rem_pio2+0x470>
 80055c2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005628 <__kernel_rem_pio2+0x318>
 80055c6:	f04f 0a00 	mov.w	sl, #0
 80055ca:	eba5 030a 	sub.w	r3, r5, sl
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f2c0 810a 	blt.w	80057e8 <__kernel_rem_pio2+0x4d8>
 80055d4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005650 <__kernel_rem_pio2+0x340>
 80055d8:	ec59 8b18 	vmov	r8, r9, d8
 80055dc:	2700      	movs	r7, #0
 80055de:	e0f5      	b.n	80057cc <__kernel_rem_pio2+0x4bc>
 80055e0:	2302      	movs	r3, #2
 80055e2:	9302      	str	r3, [sp, #8]
 80055e4:	e760      	b.n	80054a8 <__kernel_rem_pio2+0x198>
 80055e6:	ab0e      	add	r3, sp, #56	; 0x38
 80055e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ec:	b94d      	cbnz	r5, 8005602 <__kernel_rem_pio2+0x2f2>
 80055ee:	b12b      	cbz	r3, 80055fc <__kernel_rem_pio2+0x2ec>
 80055f0:	a80e      	add	r0, sp, #56	; 0x38
 80055f2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80055f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80055fa:	2301      	movs	r3, #1
 80055fc:	3201      	adds	r2, #1
 80055fe:	461d      	mov	r5, r3
 8005600:	e759      	b.n	80054b6 <__kernel_rem_pio2+0x1a6>
 8005602:	a80e      	add	r0, sp, #56	; 0x38
 8005604:	1acb      	subs	r3, r1, r3
 8005606:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800560a:	462b      	mov	r3, r5
 800560c:	e7f6      	b.n	80055fc <__kernel_rem_pio2+0x2ec>
 800560e:	1e62      	subs	r2, r4, #1
 8005610:	ab0e      	add	r3, sp, #56	; 0x38
 8005612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005616:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800561a:	a90e      	add	r1, sp, #56	; 0x38
 800561c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005620:	e757      	b.n	80054d2 <__kernel_rem_pio2+0x1c2>
 8005622:	bf00      	nop
 8005624:	f3af 8000 	nop.w
	...
 8005634:	3ff00000 	.word	0x3ff00000
 8005638:	08006178 	.word	0x08006178
 800563c:	40200000 	.word	0x40200000
 8005640:	3ff00000 	.word	0x3ff00000
 8005644:	3e700000 	.word	0x3e700000
 8005648:	41700000 	.word	0x41700000
 800564c:	3fe00000 	.word	0x3fe00000
 8005650:	08006138 	.word	0x08006138
 8005654:	1e62      	subs	r2, r4, #1
 8005656:	ab0e      	add	r3, sp, #56	; 0x38
 8005658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005660:	e7db      	b.n	800561a <__kernel_rem_pio2+0x30a>
 8005662:	a90e      	add	r1, sp, #56	; 0x38
 8005664:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005668:	3b01      	subs	r3, #1
 800566a:	430a      	orrs	r2, r1
 800566c:	e78b      	b.n	8005586 <__kernel_rem_pio2+0x276>
 800566e:	3301      	adds	r3, #1
 8005670:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005674:	2900      	cmp	r1, #0
 8005676:	d0fa      	beq.n	800566e <__kernel_rem_pio2+0x35e>
 8005678:	9a08      	ldr	r2, [sp, #32]
 800567a:	4422      	add	r2, r4
 800567c:	00d2      	lsls	r2, r2, #3
 800567e:	a922      	add	r1, sp, #136	; 0x88
 8005680:	18e3      	adds	r3, r4, r3
 8005682:	9206      	str	r2, [sp, #24]
 8005684:	440a      	add	r2, r1
 8005686:	9302      	str	r3, [sp, #8]
 8005688:	f10b 0108 	add.w	r1, fp, #8
 800568c:	f102 0308 	add.w	r3, r2, #8
 8005690:	1c66      	adds	r6, r4, #1
 8005692:	910a      	str	r1, [sp, #40]	; 0x28
 8005694:	2500      	movs	r5, #0
 8005696:	930d      	str	r3, [sp, #52]	; 0x34
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	42b3      	cmp	r3, r6
 800569c:	da04      	bge.n	80056a8 <__kernel_rem_pio2+0x398>
 800569e:	461c      	mov	r4, r3
 80056a0:	e6a6      	b.n	80053f0 <__kernel_rem_pio2+0xe0>
 80056a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7e3      	b.n	8005670 <__kernel_rem_pio2+0x360>
 80056a8:	9b06      	ldr	r3, [sp, #24]
 80056aa:	18ef      	adds	r7, r5, r3
 80056ac:	ab22      	add	r3, sp, #136	; 0x88
 80056ae:	441f      	add	r7, r3
 80056b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056b6:	f7fa fed9 	bl	800046c <__aeabi_i2d>
 80056ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056bc:	461c      	mov	r4, r3
 80056be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056c0:	e9c7 0100 	strd	r0, r1, [r7]
 80056c4:	eb03 0b05 	add.w	fp, r3, r5
 80056c8:	2700      	movs	r7, #0
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	f04f 0900 	mov.w	r9, #0
 80056d2:	9b07      	ldr	r3, [sp, #28]
 80056d4:	429f      	cmp	r7, r3
 80056d6:	dd08      	ble.n	80056ea <__kernel_rem_pio2+0x3da>
 80056d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056da:	aa72      	add	r2, sp, #456	; 0x1c8
 80056dc:	18eb      	adds	r3, r5, r3
 80056de:	4413      	add	r3, r2
 80056e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80056e4:	3601      	adds	r6, #1
 80056e6:	3508      	adds	r5, #8
 80056e8:	e7d6      	b.n	8005698 <__kernel_rem_pio2+0x388>
 80056ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80056ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80056f2:	f7fa ff25 	bl	8000540 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fa fd69 	bl	80001d4 <__adddf3>
 8005702:	3701      	adds	r7, #1
 8005704:	4680      	mov	r8, r0
 8005706:	4689      	mov	r9, r1
 8005708:	e7e3      	b.n	80056d2 <__kernel_rem_pio2+0x3c2>
 800570a:	3d01      	subs	r5, #1
 800570c:	e741      	b.n	8005592 <__kernel_rem_pio2+0x282>
 800570e:	f1ca 0000 	rsb	r0, sl, #0
 8005712:	ec47 6b10 	vmov	d0, r6, r7
 8005716:	f000 fa83 	bl	8005c20 <scalbn>
 800571a:	ec57 6b10 	vmov	r6, r7, d0
 800571e:	2200      	movs	r2, #0
 8005720:	4b99      	ldr	r3, [pc, #612]	; (8005988 <__kernel_rem_pio2+0x678>)
 8005722:	ee10 0a10 	vmov	r0, s0
 8005726:	4639      	mov	r1, r7
 8005728:	f7fb f990 	bl	8000a4c <__aeabi_dcmpge>
 800572c:	b1f8      	cbz	r0, 800576e <__kernel_rem_pio2+0x45e>
 800572e:	2200      	movs	r2, #0
 8005730:	4b96      	ldr	r3, [pc, #600]	; (800598c <__kernel_rem_pio2+0x67c>)
 8005732:	4630      	mov	r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	f7fa ff03 	bl	8000540 <__aeabi_dmul>
 800573a:	f7fb f99b 	bl	8000a74 <__aeabi_d2iz>
 800573e:	4680      	mov	r8, r0
 8005740:	f7fa fe94 	bl	800046c <__aeabi_i2d>
 8005744:	2200      	movs	r2, #0
 8005746:	4b90      	ldr	r3, [pc, #576]	; (8005988 <__kernel_rem_pio2+0x678>)
 8005748:	f7fa fefa 	bl	8000540 <__aeabi_dmul>
 800574c:	460b      	mov	r3, r1
 800574e:	4602      	mov	r2, r0
 8005750:	4639      	mov	r1, r7
 8005752:	4630      	mov	r0, r6
 8005754:	f7fa fd3c 	bl	80001d0 <__aeabi_dsub>
 8005758:	f7fb f98c 	bl	8000a74 <__aeabi_d2iz>
 800575c:	1c65      	adds	r5, r4, #1
 800575e:	ab0e      	add	r3, sp, #56	; 0x38
 8005760:	f10a 0a18 	add.w	sl, sl, #24
 8005764:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005768:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800576c:	e719      	b.n	80055a2 <__kernel_rem_pio2+0x292>
 800576e:	4630      	mov	r0, r6
 8005770:	4639      	mov	r1, r7
 8005772:	f7fb f97f 	bl	8000a74 <__aeabi_d2iz>
 8005776:	ab0e      	add	r3, sp, #56	; 0x38
 8005778:	4625      	mov	r5, r4
 800577a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800577e:	e710      	b.n	80055a2 <__kernel_rem_pio2+0x292>
 8005780:	ab0e      	add	r3, sp, #56	; 0x38
 8005782:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005786:	f7fa fe71 	bl	800046c <__aeabi_i2d>
 800578a:	4642      	mov	r2, r8
 800578c:	464b      	mov	r3, r9
 800578e:	f7fa fed7 	bl	8000540 <__aeabi_dmul>
 8005792:	2200      	movs	r2, #0
 8005794:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005798:	4b7c      	ldr	r3, [pc, #496]	; (800598c <__kernel_rem_pio2+0x67c>)
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fa fecf 	bl	8000540 <__aeabi_dmul>
 80057a2:	3f01      	subs	r7, #1
 80057a4:	4680      	mov	r8, r0
 80057a6:	4689      	mov	r9, r1
 80057a8:	e708      	b.n	80055bc <__kernel_rem_pio2+0x2ac>
 80057aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80057b6:	f7fa fec3 	bl	8000540 <__aeabi_dmul>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4640      	mov	r0, r8
 80057c0:	4649      	mov	r1, r9
 80057c2:	f7fa fd07 	bl	80001d4 <__adddf3>
 80057c6:	3701      	adds	r7, #1
 80057c8:	4680      	mov	r8, r0
 80057ca:	4689      	mov	r9, r1
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	429f      	cmp	r7, r3
 80057d0:	dc01      	bgt.n	80057d6 <__kernel_rem_pio2+0x4c6>
 80057d2:	45ba      	cmp	sl, r7
 80057d4:	dae9      	bge.n	80057aa <__kernel_rem_pio2+0x49a>
 80057d6:	ab4a      	add	r3, sp, #296	; 0x128
 80057d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057dc:	e9c3 8900 	strd	r8, r9, [r3]
 80057e0:	f10a 0a01 	add.w	sl, sl, #1
 80057e4:	3e08      	subs	r6, #8
 80057e6:	e6f0      	b.n	80055ca <__kernel_rem_pio2+0x2ba>
 80057e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d85b      	bhi.n	80058a6 <__kernel_rem_pio2+0x596>
 80057ee:	e8df f003 	tbb	[pc, r3]
 80057f2:	264a      	.short	0x264a
 80057f4:	0226      	.short	0x0226
 80057f6:	ab9a      	add	r3, sp, #616	; 0x268
 80057f8:	441c      	add	r4, r3
 80057fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80057fe:	46a2      	mov	sl, r4
 8005800:	46ab      	mov	fp, r5
 8005802:	f1bb 0f00 	cmp.w	fp, #0
 8005806:	dc6c      	bgt.n	80058e2 <__kernel_rem_pio2+0x5d2>
 8005808:	46a2      	mov	sl, r4
 800580a:	46ab      	mov	fp, r5
 800580c:	f1bb 0f01 	cmp.w	fp, #1
 8005810:	f300 8086 	bgt.w	8005920 <__kernel_rem_pio2+0x610>
 8005814:	2000      	movs	r0, #0
 8005816:	2100      	movs	r1, #0
 8005818:	2d01      	cmp	r5, #1
 800581a:	f300 80a0 	bgt.w	800595e <__kernel_rem_pio2+0x64e>
 800581e:	9b02      	ldr	r3, [sp, #8]
 8005820:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005824:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005828:	2b00      	cmp	r3, #0
 800582a:	f040 809e 	bne.w	800596a <__kernel_rem_pio2+0x65a>
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	e9c3 7800 	strd	r7, r8, [r3]
 8005834:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005838:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800583c:	e033      	b.n	80058a6 <__kernel_rem_pio2+0x596>
 800583e:	3408      	adds	r4, #8
 8005840:	ab4a      	add	r3, sp, #296	; 0x128
 8005842:	441c      	add	r4, r3
 8005844:	462e      	mov	r6, r5
 8005846:	2000      	movs	r0, #0
 8005848:	2100      	movs	r1, #0
 800584a:	2e00      	cmp	r6, #0
 800584c:	da3a      	bge.n	80058c4 <__kernel_rem_pio2+0x5b4>
 800584e:	9b02      	ldr	r3, [sp, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d03d      	beq.n	80058d0 <__kernel_rem_pio2+0x5c0>
 8005854:	4602      	mov	r2, r0
 8005856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800585a:	9c01      	ldr	r4, [sp, #4]
 800585c:	e9c4 2300 	strd	r2, r3, [r4]
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005868:	f7fa fcb2 	bl	80001d0 <__aeabi_dsub>
 800586c:	ae4c      	add	r6, sp, #304	; 0x130
 800586e:	2401      	movs	r4, #1
 8005870:	42a5      	cmp	r5, r4
 8005872:	da30      	bge.n	80058d6 <__kernel_rem_pio2+0x5c6>
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	b113      	cbz	r3, 800587e <__kernel_rem_pio2+0x56e>
 8005878:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800587c:	4619      	mov	r1, r3
 800587e:	9b01      	ldr	r3, [sp, #4]
 8005880:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005884:	e00f      	b.n	80058a6 <__kernel_rem_pio2+0x596>
 8005886:	ab9a      	add	r3, sp, #616	; 0x268
 8005888:	441c      	add	r4, r3
 800588a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800588e:	2000      	movs	r0, #0
 8005890:	2100      	movs	r1, #0
 8005892:	2d00      	cmp	r5, #0
 8005894:	da10      	bge.n	80058b8 <__kernel_rem_pio2+0x5a8>
 8005896:	9b02      	ldr	r3, [sp, #8]
 8005898:	b113      	cbz	r3, 80058a0 <__kernel_rem_pio2+0x590>
 800589a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800589e:	4619      	mov	r1, r3
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	e9c3 0100 	strd	r0, r1, [r3]
 80058a6:	9b06      	ldr	r3, [sp, #24]
 80058a8:	f003 0007 	and.w	r0, r3, #7
 80058ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80058b0:	ecbd 8b02 	vpop	{d8}
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058bc:	f7fa fc8a 	bl	80001d4 <__adddf3>
 80058c0:	3d01      	subs	r5, #1
 80058c2:	e7e6      	b.n	8005892 <__kernel_rem_pio2+0x582>
 80058c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058c8:	f7fa fc84 	bl	80001d4 <__adddf3>
 80058cc:	3e01      	subs	r6, #1
 80058ce:	e7bc      	b.n	800584a <__kernel_rem_pio2+0x53a>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	e7c1      	b.n	800585a <__kernel_rem_pio2+0x54a>
 80058d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80058da:	f7fa fc7b 	bl	80001d4 <__adddf3>
 80058de:	3401      	adds	r4, #1
 80058e0:	e7c6      	b.n	8005870 <__kernel_rem_pio2+0x560>
 80058e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80058e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80058ea:	4640      	mov	r0, r8
 80058ec:	ec53 2b17 	vmov	r2, r3, d7
 80058f0:	4649      	mov	r1, r9
 80058f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80058f6:	f7fa fc6d 	bl	80001d4 <__adddf3>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4606      	mov	r6, r0
 8005900:	460f      	mov	r7, r1
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fc63 	bl	80001d0 <__aeabi_dsub>
 800590a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800590e:	f7fa fc61 	bl	80001d4 <__adddf3>
 8005912:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005916:	e9ca 0100 	strd	r0, r1, [sl]
 800591a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800591e:	e770      	b.n	8005802 <__kernel_rem_pio2+0x4f2>
 8005920:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005924:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005928:	4630      	mov	r0, r6
 800592a:	ec53 2b17 	vmov	r2, r3, d7
 800592e:	4639      	mov	r1, r7
 8005930:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005934:	f7fa fc4e 	bl	80001d4 <__adddf3>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4680      	mov	r8, r0
 800593e:	4689      	mov	r9, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fc44 	bl	80001d0 <__aeabi_dsub>
 8005948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594c:	f7fa fc42 	bl	80001d4 <__adddf3>
 8005950:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005954:	e9ca 0100 	strd	r0, r1, [sl]
 8005958:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800595c:	e756      	b.n	800580c <__kernel_rem_pio2+0x4fc>
 800595e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005962:	f7fa fc37 	bl	80001d4 <__adddf3>
 8005966:	3d01      	subs	r5, #1
 8005968:	e756      	b.n	8005818 <__kernel_rem_pio2+0x508>
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	9a01      	ldr	r2, [sp, #4]
 800596e:	601f      	str	r7, [r3, #0]
 8005970:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005974:	605c      	str	r4, [r3, #4]
 8005976:	609d      	str	r5, [r3, #8]
 8005978:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800597c:	60d3      	str	r3, [r2, #12]
 800597e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005982:	6110      	str	r0, [r2, #16]
 8005984:	6153      	str	r3, [r2, #20]
 8005986:	e78e      	b.n	80058a6 <__kernel_rem_pio2+0x596>
 8005988:	41700000 	.word	0x41700000
 800598c:	3e700000 	.word	0x3e700000

08005990 <__kernel_sin>:
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	ec55 4b10 	vmov	r4, r5, d0
 8005998:	b085      	sub	sp, #20
 800599a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800599e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80059a2:	ed8d 1b00 	vstr	d1, [sp]
 80059a6:	9002      	str	r0, [sp, #8]
 80059a8:	da06      	bge.n	80059b8 <__kernel_sin+0x28>
 80059aa:	ee10 0a10 	vmov	r0, s0
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fb f860 	bl	8000a74 <__aeabi_d2iz>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d051      	beq.n	8005a5c <__kernel_sin+0xcc>
 80059b8:	4622      	mov	r2, r4
 80059ba:	462b      	mov	r3, r5
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa fdbe 	bl	8000540 <__aeabi_dmul>
 80059c4:	4682      	mov	sl, r0
 80059c6:	468b      	mov	fp, r1
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fdb6 	bl	8000540 <__aeabi_dmul>
 80059d4:	a341      	add	r3, pc, #260	; (adr r3, 8005adc <__kernel_sin+0x14c>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	4680      	mov	r8, r0
 80059dc:	4689      	mov	r9, r1
 80059de:	4650      	mov	r0, sl
 80059e0:	4659      	mov	r1, fp
 80059e2:	f7fa fdad 	bl	8000540 <__aeabi_dmul>
 80059e6:	a33f      	add	r3, pc, #252	; (adr r3, 8005ae4 <__kernel_sin+0x154>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fbf0 	bl	80001d0 <__aeabi_dsub>
 80059f0:	4652      	mov	r2, sl
 80059f2:	465b      	mov	r3, fp
 80059f4:	f7fa fda4 	bl	8000540 <__aeabi_dmul>
 80059f8:	a33c      	add	r3, pc, #240	; (adr r3, 8005aec <__kernel_sin+0x15c>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fbe9 	bl	80001d4 <__adddf3>
 8005a02:	4652      	mov	r2, sl
 8005a04:	465b      	mov	r3, fp
 8005a06:	f7fa fd9b 	bl	8000540 <__aeabi_dmul>
 8005a0a:	a33a      	add	r3, pc, #232	; (adr r3, 8005af4 <__kernel_sin+0x164>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fbde 	bl	80001d0 <__aeabi_dsub>
 8005a14:	4652      	mov	r2, sl
 8005a16:	465b      	mov	r3, fp
 8005a18:	f7fa fd92 	bl	8000540 <__aeabi_dmul>
 8005a1c:	a337      	add	r3, pc, #220	; (adr r3, 8005afc <__kernel_sin+0x16c>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fbd7 	bl	80001d4 <__adddf3>
 8005a26:	9b02      	ldr	r3, [sp, #8]
 8005a28:	4606      	mov	r6, r0
 8005a2a:	460f      	mov	r7, r1
 8005a2c:	b9db      	cbnz	r3, 8005a66 <__kernel_sin+0xd6>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4650      	mov	r0, sl
 8005a34:	4659      	mov	r1, fp
 8005a36:	f7fa fd83 	bl	8000540 <__aeabi_dmul>
 8005a3a:	a325      	add	r3, pc, #148	; (adr r3, 8005ad0 <__kernel_sin+0x140>)
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f7fa fbc6 	bl	80001d0 <__aeabi_dsub>
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	f7fa fd7a 	bl	8000540 <__aeabi_dmul>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4620      	mov	r0, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	f7fa fbbe 	bl	80001d4 <__adddf3>
 8005a58:	4604      	mov	r4, r0
 8005a5a:	460d      	mov	r5, r1
 8005a5c:	ec45 4b10 	vmov	d0, r4, r5
 8005a60:	b005      	add	sp, #20
 8005a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a66:	2200      	movs	r2, #0
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <__kernel_sin+0x148>)
 8005a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a6e:	f7fa fd67 	bl	8000540 <__aeabi_dmul>
 8005a72:	4632      	mov	r2, r6
 8005a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a78:	463b      	mov	r3, r7
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	f7fa fd5f 	bl	8000540 <__aeabi_dmul>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8a:	f7fa fba1 	bl	80001d0 <__aeabi_dsub>
 8005a8e:	4652      	mov	r2, sl
 8005a90:	465b      	mov	r3, fp
 8005a92:	f7fa fd55 	bl	8000540 <__aeabi_dmul>
 8005a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a9a:	f7fa fb99 	bl	80001d0 <__aeabi_dsub>
 8005a9e:	a30c      	add	r3, pc, #48	; (adr r3, 8005ad0 <__kernel_sin+0x140>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fa fd48 	bl	8000540 <__aeabi_dmul>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f7fa fb8c 	bl	80001d4 <__adddf3>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	f7fa fb84 	bl	80001d0 <__aeabi_dsub>
 8005ac8:	e7c6      	b.n	8005a58 <__kernel_sin+0xc8>
 8005aca:	bf00      	nop
 8005acc:	f3af 8000 	nop.w
 8005ad0:	55555549 	.word	0x55555549
 8005ad4:	3fc55555 	.word	0x3fc55555
 8005ad8:	3fe00000 	.word	0x3fe00000
 8005adc:	5acfd57c 	.word	0x5acfd57c
 8005ae0:	3de5d93a 	.word	0x3de5d93a
 8005ae4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ae8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005aec:	57b1fe7d 	.word	0x57b1fe7d
 8005af0:	3ec71de3 	.word	0x3ec71de3
 8005af4:	19c161d5 	.word	0x19c161d5
 8005af8:	3f2a01a0 	.word	0x3f2a01a0
 8005afc:	1110f8a6 	.word	0x1110f8a6
 8005b00:	3f811111 	.word	0x3f811111

08005b04 <fabs>:
 8005b04:	ec51 0b10 	vmov	r0, r1, d0
 8005b08:	ee10 2a10 	vmov	r2, s0
 8005b0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b10:	ec43 2b10 	vmov	d0, r2, r3
 8005b14:	4770      	bx	lr
	...

08005b18 <floor>:
 8005b18:	ec51 0b10 	vmov	r0, r1, d0
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005b24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005b28:	2e13      	cmp	r6, #19
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	ee10 5a10 	vmov	r5, s0
 8005b30:	4680      	mov	r8, r0
 8005b32:	dc34      	bgt.n	8005b9e <floor+0x86>
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	da16      	bge.n	8005b66 <floor+0x4e>
 8005b38:	a335      	add	r3, pc, #212	; (adr r3, 8005c10 <floor+0xf8>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fb49 	bl	80001d4 <__adddf3>
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	f7fa ff8b 	bl	8000a60 <__aeabi_dcmpgt>
 8005b4a:	b148      	cbz	r0, 8005b60 <floor+0x48>
 8005b4c:	2c00      	cmp	r4, #0
 8005b4e:	da59      	bge.n	8005c04 <floor+0xec>
 8005b50:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005b54:	4a30      	ldr	r2, [pc, #192]	; (8005c18 <floor+0x100>)
 8005b56:	432b      	orrs	r3, r5
 8005b58:	2500      	movs	r5, #0
 8005b5a:	42ab      	cmp	r3, r5
 8005b5c:	bf18      	it	ne
 8005b5e:	4614      	movne	r4, r2
 8005b60:	4621      	mov	r1, r4
 8005b62:	4628      	mov	r0, r5
 8005b64:	e025      	b.n	8005bb2 <floor+0x9a>
 8005b66:	4f2d      	ldr	r7, [pc, #180]	; (8005c1c <floor+0x104>)
 8005b68:	4137      	asrs	r7, r6
 8005b6a:	ea01 0307 	and.w	r3, r1, r7
 8005b6e:	4303      	orrs	r3, r0
 8005b70:	d01f      	beq.n	8005bb2 <floor+0x9a>
 8005b72:	a327      	add	r3, pc, #156	; (adr r3, 8005c10 <floor+0xf8>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f7fa fb2c 	bl	80001d4 <__adddf3>
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f7fa ff6e 	bl	8000a60 <__aeabi_dcmpgt>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d0eb      	beq.n	8005b60 <floor+0x48>
 8005b88:	2c00      	cmp	r4, #0
 8005b8a:	bfbe      	ittt	lt
 8005b8c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b90:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b94:	19a4      	addlt	r4, r4, r6
 8005b96:	ea24 0407 	bic.w	r4, r4, r7
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	e7e0      	b.n	8005b60 <floor+0x48>
 8005b9e:	2e33      	cmp	r6, #51	; 0x33
 8005ba0:	dd0b      	ble.n	8005bba <floor+0xa2>
 8005ba2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ba6:	d104      	bne.n	8005bb2 <floor+0x9a>
 8005ba8:	ee10 2a10 	vmov	r2, s0
 8005bac:	460b      	mov	r3, r1
 8005bae:	f7fa fb11 	bl	80001d4 <__adddf3>
 8005bb2:	ec41 0b10 	vmov	d0, r0, r1
 8005bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	fa23 f707 	lsr.w	r7, r3, r7
 8005bc6:	4207      	tst	r7, r0
 8005bc8:	d0f3      	beq.n	8005bb2 <floor+0x9a>
 8005bca:	a311      	add	r3, pc, #68	; (adr r3, 8005c10 <floor+0xf8>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f7fa fb00 	bl	80001d4 <__adddf3>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f7fa ff42 	bl	8000a60 <__aeabi_dcmpgt>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d0bf      	beq.n	8005b60 <floor+0x48>
 8005be0:	2c00      	cmp	r4, #0
 8005be2:	da02      	bge.n	8005bea <floor+0xd2>
 8005be4:	2e14      	cmp	r6, #20
 8005be6:	d103      	bne.n	8005bf0 <floor+0xd8>
 8005be8:	3401      	adds	r4, #1
 8005bea:	ea25 0507 	bic.w	r5, r5, r7
 8005bee:	e7b7      	b.n	8005b60 <floor+0x48>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005bf6:	fa03 f606 	lsl.w	r6, r3, r6
 8005bfa:	4435      	add	r5, r6
 8005bfc:	4545      	cmp	r5, r8
 8005bfe:	bf38      	it	cc
 8005c00:	18e4      	addcc	r4, r4, r3
 8005c02:	e7f2      	b.n	8005bea <floor+0xd2>
 8005c04:	2500      	movs	r5, #0
 8005c06:	462c      	mov	r4, r5
 8005c08:	e7aa      	b.n	8005b60 <floor+0x48>
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	8800759c 	.word	0x8800759c
 8005c14:	7e37e43c 	.word	0x7e37e43c
 8005c18:	bff00000 	.word	0xbff00000
 8005c1c:	000fffff 	.word	0x000fffff

08005c20 <scalbn>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	ec55 4b10 	vmov	r4, r5, d0
 8005c26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	b9aa      	cbnz	r2, 8005c5c <scalbn+0x3c>
 8005c30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c34:	4323      	orrs	r3, r4
 8005c36:	d03b      	beq.n	8005cb0 <scalbn+0x90>
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <scalbn+0xe0>)
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	ee10 0a10 	vmov	r0, s0
 8005c42:	f7fa fc7d 	bl	8000540 <__aeabi_dmul>
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <scalbn+0xe4>)
 8005c48:	429e      	cmp	r6, r3
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	da12      	bge.n	8005c76 <scalbn+0x56>
 8005c50:	a327      	add	r3, pc, #156	; (adr r3, 8005cf0 <scalbn+0xd0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fc73 	bl	8000540 <__aeabi_dmul>
 8005c5a:	e009      	b.n	8005c70 <scalbn+0x50>
 8005c5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005c60:	428a      	cmp	r2, r1
 8005c62:	d10c      	bne.n	8005c7e <scalbn+0x5e>
 8005c64:	ee10 2a10 	vmov	r2, s0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	f7fa fab2 	bl	80001d4 <__adddf3>
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	e01c      	b.n	8005cb0 <scalbn+0x90>
 8005c76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	3a36      	subs	r2, #54	; 0x36
 8005c7e:	4432      	add	r2, r6
 8005c80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c84:	428a      	cmp	r2, r1
 8005c86:	dd0b      	ble.n	8005ca0 <scalbn+0x80>
 8005c88:	ec45 4b11 	vmov	d1, r4, r5
 8005c8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005cf8 <scalbn+0xd8>
 8005c90:	f000 f83c 	bl	8005d0c <copysign>
 8005c94:	a318      	add	r3, pc, #96	; (adr r3, 8005cf8 <scalbn+0xd8>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	ec51 0b10 	vmov	r0, r1, d0
 8005c9e:	e7da      	b.n	8005c56 <scalbn+0x36>
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	dd08      	ble.n	8005cb6 <scalbn+0x96>
 8005ca4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ca8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cb0:	ec45 4b10 	vmov	d0, r4, r5
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005cba:	da0d      	bge.n	8005cd8 <scalbn+0xb8>
 8005cbc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005cc0:	429e      	cmp	r6, r3
 8005cc2:	ec45 4b11 	vmov	d1, r4, r5
 8005cc6:	dce1      	bgt.n	8005c8c <scalbn+0x6c>
 8005cc8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005cf0 <scalbn+0xd0>
 8005ccc:	f000 f81e 	bl	8005d0c <copysign>
 8005cd0:	a307      	add	r3, pc, #28	; (adr r3, 8005cf0 <scalbn+0xd0>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	e7e0      	b.n	8005c9a <scalbn+0x7a>
 8005cd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cdc:	3236      	adds	r2, #54	; 0x36
 8005cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	2200      	movs	r2, #0
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <scalbn+0xe8>)
 8005cee:	e7b2      	b.n	8005c56 <scalbn+0x36>
 8005cf0:	c2f8f359 	.word	0xc2f8f359
 8005cf4:	01a56e1f 	.word	0x01a56e1f
 8005cf8:	8800759c 	.word	0x8800759c
 8005cfc:	7e37e43c 	.word	0x7e37e43c
 8005d00:	43500000 	.word	0x43500000
 8005d04:	ffff3cb0 	.word	0xffff3cb0
 8005d08:	3c900000 	.word	0x3c900000

08005d0c <copysign>:
 8005d0c:	ec51 0b10 	vmov	r0, r1, d0
 8005d10:	ee11 0a90 	vmov	r0, s3
 8005d14:	ee10 2a10 	vmov	r2, s0
 8005d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005d20:	ea41 0300 	orr.w	r3, r1, r0
 8005d24:	ec43 2b10 	vmov	d0, r2, r3
 8005d28:	4770      	bx	lr

08005d2a <abort>:
 8005d2a:	b508      	push	{r3, lr}
 8005d2c:	2006      	movs	r0, #6
 8005d2e:	f000 f8bf 	bl	8005eb0 <raise>
 8005d32:	2001      	movs	r0, #1
 8005d34:	f7fe ff1e 	bl	8004b74 <_exit>

08005d38 <__errno>:
 8005d38:	4b01      	ldr	r3, [pc, #4]	; (8005d40 <__errno+0x8>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000010 	.word	0x20000010

08005d44 <__libc_init_array>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4e0d      	ldr	r6, [pc, #52]	; (8005d7c <__libc_init_array+0x38>)
 8005d48:	4c0d      	ldr	r4, [pc, #52]	; (8005d80 <__libc_init_array+0x3c>)
 8005d4a:	1ba4      	subs	r4, r4, r6
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	2500      	movs	r5, #0
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	d109      	bne.n	8005d68 <__libc_init_array+0x24>
 8005d54:	4e0b      	ldr	r6, [pc, #44]	; (8005d84 <__libc_init_array+0x40>)
 8005d56:	4c0c      	ldr	r4, [pc, #48]	; (8005d88 <__libc_init_array+0x44>)
 8005d58:	f000 f8de 	bl	8005f18 <_init>
 8005d5c:	1ba4      	subs	r4, r4, r6
 8005d5e:	10a4      	asrs	r4, r4, #2
 8005d60:	2500      	movs	r5, #0
 8005d62:	42a5      	cmp	r5, r4
 8005d64:	d105      	bne.n	8005d72 <__libc_init_array+0x2e>
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d6c:	4798      	blx	r3
 8005d6e:	3501      	adds	r5, #1
 8005d70:	e7ee      	b.n	8005d50 <__libc_init_array+0xc>
 8005d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d76:	4798      	blx	r3
 8005d78:	3501      	adds	r5, #1
 8005d7a:	e7f2      	b.n	8005d62 <__libc_init_array+0x1e>
 8005d7c:	08006188 	.word	0x08006188
 8005d80:	08006188 	.word	0x08006188
 8005d84:	08006188 	.word	0x08006188
 8005d88:	0800618c 	.word	0x0800618c

08005d8c <free>:
 8005d8c:	4b02      	ldr	r3, [pc, #8]	; (8005d98 <free+0xc>)
 8005d8e:	4601      	mov	r1, r0
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	f000 b817 	b.w	8005dc4 <_free_r>
 8005d96:	bf00      	nop
 8005d98:	20000010 	.word	0x20000010

08005d9c <memcpy>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	1e43      	subs	r3, r0, #1
 8005da0:	440a      	add	r2, r1
 8005da2:	4291      	cmp	r1, r2
 8005da4:	d100      	bne.n	8005da8 <memcpy+0xc>
 8005da6:	bd10      	pop	{r4, pc}
 8005da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db0:	e7f7      	b.n	8005da2 <memcpy+0x6>

08005db2 <memset>:
 8005db2:	4402      	add	r2, r0
 8005db4:	4603      	mov	r3, r0
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d100      	bne.n	8005dbc <memset+0xa>
 8005dba:	4770      	bx	lr
 8005dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc0:	e7f9      	b.n	8005db6 <memset+0x4>
	...

08005dc4 <_free_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	d045      	beq.n	8005e58 <_free_r+0x94>
 8005dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd0:	1f0c      	subs	r4, r1, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bfb8      	it	lt
 8005dd6:	18e4      	addlt	r4, r4, r3
 8005dd8:	f000 f89b 	bl	8005f12 <__malloc_lock>
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <_free_r+0x98>)
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	4610      	mov	r0, r2
 8005de2:	b933      	cbnz	r3, 8005df2 <_free_r+0x2e>
 8005de4:	6063      	str	r3, [r4, #4]
 8005de6:	6014      	str	r4, [r2, #0]
 8005de8:	4628      	mov	r0, r5
 8005dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dee:	f000 b891 	b.w	8005f14 <__malloc_unlock>
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	d90c      	bls.n	8005e10 <_free_r+0x4c>
 8005df6:	6821      	ldr	r1, [r4, #0]
 8005df8:	1862      	adds	r2, r4, r1
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	bf04      	itt	eq
 8005dfe:	681a      	ldreq	r2, [r3, #0]
 8005e00:	685b      	ldreq	r3, [r3, #4]
 8005e02:	6063      	str	r3, [r4, #4]
 8005e04:	bf04      	itt	eq
 8005e06:	1852      	addeq	r2, r2, r1
 8005e08:	6022      	streq	r2, [r4, #0]
 8005e0a:	6004      	str	r4, [r0, #0]
 8005e0c:	e7ec      	b.n	8005de8 <_free_r+0x24>
 8005e0e:	4613      	mov	r3, r2
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	b10a      	cbz	r2, 8005e18 <_free_r+0x54>
 8005e14:	42a2      	cmp	r2, r4
 8005e16:	d9fa      	bls.n	8005e0e <_free_r+0x4a>
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	1858      	adds	r0, r3, r1
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	d10b      	bne.n	8005e38 <_free_r+0x74>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	4401      	add	r1, r0
 8005e24:	1858      	adds	r0, r3, r1
 8005e26:	4282      	cmp	r2, r0
 8005e28:	6019      	str	r1, [r3, #0]
 8005e2a:	d1dd      	bne.n	8005de8 <_free_r+0x24>
 8005e2c:	6810      	ldr	r0, [r2, #0]
 8005e2e:	6852      	ldr	r2, [r2, #4]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	4401      	add	r1, r0
 8005e34:	6019      	str	r1, [r3, #0]
 8005e36:	e7d7      	b.n	8005de8 <_free_r+0x24>
 8005e38:	d902      	bls.n	8005e40 <_free_r+0x7c>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	e7d3      	b.n	8005de8 <_free_r+0x24>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	1821      	adds	r1, r4, r0
 8005e44:	428a      	cmp	r2, r1
 8005e46:	bf04      	itt	eq
 8005e48:	6811      	ldreq	r1, [r2, #0]
 8005e4a:	6852      	ldreq	r2, [r2, #4]
 8005e4c:	6062      	str	r2, [r4, #4]
 8005e4e:	bf04      	itt	eq
 8005e50:	1809      	addeq	r1, r1, r0
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	605c      	str	r4, [r3, #4]
 8005e56:	e7c7      	b.n	8005de8 <_free_r+0x24>
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000114 	.word	0x20000114

08005e60 <_raise_r>:
 8005e60:	291f      	cmp	r1, #31
 8005e62:	b538      	push	{r3, r4, r5, lr}
 8005e64:	4604      	mov	r4, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	d904      	bls.n	8005e74 <_raise_r+0x14>
 8005e6a:	2316      	movs	r3, #22
 8005e6c:	6003      	str	r3, [r0, #0]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e76:	b112      	cbz	r2, 8005e7e <_raise_r+0x1e>
 8005e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e7c:	b94b      	cbnz	r3, 8005e92 <_raise_r+0x32>
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 f830 	bl	8005ee4 <_getpid_r>
 8005e84:	462a      	mov	r2, r5
 8005e86:	4601      	mov	r1, r0
 8005e88:	4620      	mov	r0, r4
 8005e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e8e:	f000 b817 	b.w	8005ec0 <_kill_r>
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d00a      	beq.n	8005eac <_raise_r+0x4c>
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	d103      	bne.n	8005ea2 <_raise_r+0x42>
 8005e9a:	2316      	movs	r3, #22
 8005e9c:	6003      	str	r3, [r0, #0]
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	e7e7      	b.n	8005e72 <_raise_r+0x12>
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	4798      	blx	r3
 8005eac:	2000      	movs	r0, #0
 8005eae:	e7e0      	b.n	8005e72 <_raise_r+0x12>

08005eb0 <raise>:
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <raise+0xc>)
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	f7ff bfd3 	b.w	8005e60 <_raise_r>
 8005eba:	bf00      	nop
 8005ebc:	20000010 	.word	0x20000010

08005ec0 <_kill_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4c07      	ldr	r4, [pc, #28]	; (8005ee0 <_kill_r+0x20>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	f7fe fe41 	bl	8004b54 <_kill>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d102      	bne.n	8005edc <_kill_r+0x1c>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	b103      	cbz	r3, 8005edc <_kill_r+0x1c>
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop
 8005ee0:	2000011c 	.word	0x2000011c

08005ee4 <_getpid_r>:
 8005ee4:	f7fe be2e 	b.w	8004b44 <_getpid>

08005ee8 <strncpy>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	3901      	subs	r1, #1
 8005eec:	4604      	mov	r4, r0
 8005eee:	b902      	cbnz	r2, 8005ef2 <strncpy+0xa>
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005ef8:	f803 5b01 	strb.w	r5, [r3], #1
 8005efc:	1e56      	subs	r6, r2, #1
 8005efe:	b92d      	cbnz	r5, 8005f0c <strncpy+0x24>
 8005f00:	4414      	add	r4, r2
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	d0f4      	beq.n	8005ef0 <strncpy+0x8>
 8005f06:	f803 5b01 	strb.w	r5, [r3], #1
 8005f0a:	e7fa      	b.n	8005f02 <strncpy+0x1a>
 8005f0c:	461c      	mov	r4, r3
 8005f0e:	4632      	mov	r2, r6
 8005f10:	e7ed      	b.n	8005eee <strncpy+0x6>

08005f12 <__malloc_lock>:
 8005f12:	4770      	bx	lr

08005f14 <__malloc_unlock>:
 8005f14:	4770      	bx	lr
	...

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
