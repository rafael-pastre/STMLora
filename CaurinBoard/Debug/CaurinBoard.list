
CaurinBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c94  08006c94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c9c  08006c9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000070  08006d18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006d18  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000262c  00000000  00000000  00034966  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  00036f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b21f  00000000  00000000  00039370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3de  00000000  00000000  0006458f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8bbf  00000000  00000000  0007196d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a52c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056fc  00000000  00000000  0016a5a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aec 	.word	0x08006aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006aec 	.word	0x08006aec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b972 	b.w	8000a04 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	4688      	mov	r8, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14b      	bne.n	80007de <__udivmoddi4+0xa6>
 8000746:	428a      	cmp	r2, r1
 8000748:	4615      	mov	r5, r2
 800074a:	d967      	bls.n	800081c <__udivmoddi4+0xe4>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0720 	rsb	r7, r2, #32
 8000756:	fa01 f302 	lsl.w	r3, r1, r2
 800075a:	fa20 f707 	lsr.w	r7, r0, r7
 800075e:	4095      	lsls	r5, r2
 8000760:	ea47 0803 	orr.w	r8, r7, r3
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000770:	fa1f fc85 	uxth.w	ip, r5
 8000774:	fb0e 8817 	mls	r8, lr, r7, r8
 8000778:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077c:	fb07 f10c 	mul.w	r1, r7, ip
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18eb      	adds	r3, r5, r3
 8000786:	f107 30ff 	add.w	r0, r7, #4294967295
 800078a:	f080 811b 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8118 	bls.w	80009c4 <__udivmoddi4+0x28c>
 8000794:	3f02      	subs	r7, #2
 8000796:	442b      	add	r3, r5
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0fe 	udiv	r0, r3, lr
 80007a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ac:	45a4      	cmp	ip, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	192c      	adds	r4, r5, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8107 	bcs.w	80009c8 <__udivmoddi4+0x290>
 80007ba:	45a4      	cmp	ip, r4
 80007bc:	f240 8104 	bls.w	80009c8 <__udivmoddi4+0x290>
 80007c0:	3802      	subs	r0, #2
 80007c2:	442c      	add	r4, r5
 80007c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c8:	eba4 040c 	sub.w	r4, r4, ip
 80007cc:	2700      	movs	r7, #0
 80007ce:	b11e      	cbz	r6, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c6 4300 	strd	r4, r3, [r6]
 80007d8:	4639      	mov	r1, r7
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0xbe>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80eb 	beq.w	80009be <__udivmoddi4+0x286>
 80007e8:	2700      	movs	r7, #0
 80007ea:	e9c6 0100 	strd	r0, r1, [r6]
 80007ee:	4638      	mov	r0, r7
 80007f0:	4639      	mov	r1, r7
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	fab3 f783 	clz	r7, r3
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d147      	bne.n	800088e <__udivmoddi4+0x156>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d302      	bcc.n	8000808 <__udivmoddi4+0xd0>
 8000802:	4282      	cmp	r2, r0
 8000804:	f200 80fa 	bhi.w	80009fc <__udivmoddi4+0x2c4>
 8000808:	1a84      	subs	r4, r0, r2
 800080a:	eb61 0303 	sbc.w	r3, r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	4698      	mov	r8, r3
 8000812:	2e00      	cmp	r6, #0
 8000814:	d0e0      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000816:	e9c6 4800 	strd	r4, r8, [r6]
 800081a:	e7dd      	b.n	80007d8 <__udivmoddi4+0xa0>
 800081c:	b902      	cbnz	r2, 8000820 <__udivmoddi4+0xe8>
 800081e:	deff      	udf	#255	; 0xff
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	2a00      	cmp	r2, #0
 8000826:	f040 808f 	bne.w	8000948 <__udivmoddi4+0x210>
 800082a:	1b49      	subs	r1, r1, r5
 800082c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000830:	fa1f f885 	uxth.w	r8, r5
 8000834:	2701      	movs	r7, #1
 8000836:	fbb1 fcfe 	udiv	ip, r1, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000844:	fb08 f10c 	mul.w	r1, r8, ip
 8000848:	4299      	cmp	r1, r3
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x124>
 800084c:	18eb      	adds	r3, r5, r3
 800084e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4299      	cmp	r1, r3
 8000856:	f200 80cd 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 800085a:	4684      	mov	ip, r0
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	b2a3      	uxth	r3, r4
 8000860:	fbb1 f0fe 	udiv	r0, r1, lr
 8000864:	fb0e 1410 	mls	r4, lr, r0, r1
 8000868:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800086c:	fb08 f800 	mul.w	r8, r8, r0
 8000870:	45a0      	cmp	r8, r4
 8000872:	d907      	bls.n	8000884 <__udivmoddi4+0x14c>
 8000874:	192c      	adds	r4, r5, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295
 800087a:	d202      	bcs.n	8000882 <__udivmoddi4+0x14a>
 800087c:	45a0      	cmp	r8, r4
 800087e:	f200 80b6 	bhi.w	80009ee <__udivmoddi4+0x2b6>
 8000882:	4618      	mov	r0, r3
 8000884:	eba4 0408 	sub.w	r4, r4, r8
 8000888:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800088c:	e79f      	b.n	80007ce <__udivmoddi4+0x96>
 800088e:	f1c7 0c20 	rsb	ip, r7, #32
 8000892:	40bb      	lsls	r3, r7
 8000894:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000898:	ea4e 0e03 	orr.w	lr, lr, r3
 800089c:	fa01 f407 	lsl.w	r4, r1, r7
 80008a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80008a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80008a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008ac:	4325      	orrs	r5, r4
 80008ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80008b2:	0c2c      	lsrs	r4, r5, #16
 80008b4:	fb08 3319 	mls	r3, r8, r9, r3
 80008b8:	fa1f fa8e 	uxth.w	sl, lr
 80008bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008c0:	fb09 f40a 	mul.w	r4, r9, sl
 80008c4:	429c      	cmp	r4, r3
 80008c6:	fa02 f207 	lsl.w	r2, r2, r7
 80008ca:	fa00 f107 	lsl.w	r1, r0, r7
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1e 0303 	adds.w	r3, lr, r3
 80008d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008d8:	f080 8087 	bcs.w	80009ea <__udivmoddi4+0x2b2>
 80008dc:	429c      	cmp	r4, r3
 80008de:	f240 8084 	bls.w	80009ea <__udivmoddi4+0x2b2>
 80008e2:	f1a9 0902 	sub.w	r9, r9, #2
 80008e6:	4473      	add	r3, lr
 80008e8:	1b1b      	subs	r3, r3, r4
 80008ea:	b2ad      	uxth	r5, r5
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008fc:	45a2      	cmp	sl, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1e 0404 	adds.w	r4, lr, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	d26b      	bcs.n	80009e2 <__udivmoddi4+0x2aa>
 800090a:	45a2      	cmp	sl, r4
 800090c:	d969      	bls.n	80009e2 <__udivmoddi4+0x2aa>
 800090e:	3802      	subs	r0, #2
 8000910:	4474      	add	r4, lr
 8000912:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000916:	fba0 8902 	umull	r8, r9, r0, r2
 800091a:	eba4 040a 	sub.w	r4, r4, sl
 800091e:	454c      	cmp	r4, r9
 8000920:	46c2      	mov	sl, r8
 8000922:	464b      	mov	r3, r9
 8000924:	d354      	bcc.n	80009d0 <__udivmoddi4+0x298>
 8000926:	d051      	beq.n	80009cc <__udivmoddi4+0x294>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d069      	beq.n	8000a00 <__udivmoddi4+0x2c8>
 800092c:	ebb1 050a 	subs.w	r5, r1, sl
 8000930:	eb64 0403 	sbc.w	r4, r4, r3
 8000934:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000938:	40fd      	lsrs	r5, r7
 800093a:	40fc      	lsrs	r4, r7
 800093c:	ea4c 0505 	orr.w	r5, ip, r5
 8000940:	e9c6 5400 	strd	r5, r4, [r6]
 8000944:	2700      	movs	r7, #0
 8000946:	e747      	b.n	80007d8 <__udivmoddi4+0xa0>
 8000948:	f1c2 0320 	rsb	r3, r2, #32
 800094c:	fa20 f703 	lsr.w	r7, r0, r3
 8000950:	4095      	lsls	r5, r2
 8000952:	fa01 f002 	lsl.w	r0, r1, r2
 8000956:	fa21 f303 	lsr.w	r3, r1, r3
 800095a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800095e:	4338      	orrs	r0, r7
 8000960:	0c01      	lsrs	r1, r0, #16
 8000962:	fbb3 f7fe 	udiv	r7, r3, lr
 8000966:	fa1f f885 	uxth.w	r8, r5
 800096a:	fb0e 3317 	mls	r3, lr, r7, r3
 800096e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000972:	fb07 f308 	mul.w	r3, r7, r8
 8000976:	428b      	cmp	r3, r1
 8000978:	fa04 f402 	lsl.w	r4, r4, r2
 800097c:	d907      	bls.n	800098e <__udivmoddi4+0x256>
 800097e:	1869      	adds	r1, r5, r1
 8000980:	f107 3cff 	add.w	ip, r7, #4294967295
 8000984:	d22f      	bcs.n	80009e6 <__udivmoddi4+0x2ae>
 8000986:	428b      	cmp	r3, r1
 8000988:	d92d      	bls.n	80009e6 <__udivmoddi4+0x2ae>
 800098a:	3f02      	subs	r7, #2
 800098c:	4429      	add	r1, r5
 800098e:	1acb      	subs	r3, r1, r3
 8000990:	b281      	uxth	r1, r0
 8000992:	fbb3 f0fe 	udiv	r0, r3, lr
 8000996:	fb0e 3310 	mls	r3, lr, r0, r3
 800099a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800099e:	fb00 f308 	mul.w	r3, r0, r8
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d907      	bls.n	80009b6 <__udivmoddi4+0x27e>
 80009a6:	1869      	adds	r1, r5, r1
 80009a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ac:	d217      	bcs.n	80009de <__udivmoddi4+0x2a6>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d915      	bls.n	80009de <__udivmoddi4+0x2a6>
 80009b2:	3802      	subs	r0, #2
 80009b4:	4429      	add	r1, r5
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009bc:	e73b      	b.n	8000836 <__udivmoddi4+0xfe>
 80009be:	4637      	mov	r7, r6
 80009c0:	4630      	mov	r0, r6
 80009c2:	e709      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c4:	4607      	mov	r7, r0
 80009c6:	e6e7      	b.n	8000798 <__udivmoddi4+0x60>
 80009c8:	4618      	mov	r0, r3
 80009ca:	e6fb      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009cc:	4541      	cmp	r1, r8
 80009ce:	d2ab      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009d4:	eb69 020e 	sbc.w	r2, r9, lr
 80009d8:	3801      	subs	r0, #1
 80009da:	4613      	mov	r3, r2
 80009dc:	e7a4      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009de:	4660      	mov	r0, ip
 80009e0:	e7e9      	b.n	80009b6 <__udivmoddi4+0x27e>
 80009e2:	4618      	mov	r0, r3
 80009e4:	e795      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e6:	4667      	mov	r7, ip
 80009e8:	e7d1      	b.n	800098e <__udivmoddi4+0x256>
 80009ea:	4681      	mov	r9, r0
 80009ec:	e77c      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	442c      	add	r4, r5
 80009f2:	e747      	b.n	8000884 <__udivmoddi4+0x14c>
 80009f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f8:	442b      	add	r3, r5
 80009fa:	e72f      	b.n	800085c <__udivmoddi4+0x124>
 80009fc:	4638      	mov	r0, r7
 80009fe:	e708      	b.n	8000812 <__udivmoddi4+0xda>
 8000a00:	4637      	mov	r7, r6
 8000a02:	e6e9      	b.n	80007d8 <__udivmoddi4+0xa0>

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 f95a 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 f80d 	bl	8000a38 <HAL_InitTick>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	e001      	b.n	8000a2e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a2a:	f004 fec5 	bl	80057b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_InitTick+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d022      	beq.n	8000a92 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_InitTick+0x6c>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_InitTick+0x68>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f968 	bl	8000d36 <HAL_SYSTICK_Config>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10f      	bne.n	8000a8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d809      	bhi.n	8000a86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7a:	f000 f932 	bl	8000ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x70>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e007      	b.n	8000a96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	e004      	b.n	8000a96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	e001      	b.n	8000a96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000abc:	6013      	str	r3, [r2, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	200002c0 	.word	0x200002c0
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200002c0 	.word	0x200002c0

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d004      	beq.n	8000b0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_Delay+0x40>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0c:	bf00      	nop
 8000b0e:	f7ff ffdf 	bl	8000ad0 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d8f7      	bhi.n	8000b0e <HAL_Delay+0x26>
  {
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000004 	.word	0x20000004

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e17f      	b.n	8001060 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8171 	beq.w	800105a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x38>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d123      	bne.n	8000dd0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	6939      	ldr	r1, [r7, #16]
 8000dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0203 	and.w	r2, r3, #3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00b      	beq.n	8000e24 <HAL_GPIO_Init+0xd4>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b12      	cmp	r3, #18
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d118      	bne.n	8000ec4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ac 	beq.w	800105a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b5e      	ldr	r3, [pc, #376]	; (800107c <HAL_GPIO_Init+0x32c>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a5d      	ldr	r2, [pc, #372]	; (800107c <HAL_GPIO_Init+0x32c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_GPIO_Init+0x32c>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f1a:	4a59      	ldr	r2, [pc, #356]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x242>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x23e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_GPIO_Init+0x338>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x23a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_GPIO_Init+0x33c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x236>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4b      	ldr	r2, [pc, #300]	; (8001090 <HAL_GPIO_Init+0x340>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x232>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4a      	ldr	r2, [pc, #296]	; (8001094 <HAL_GPIO_Init+0x344>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a49      	ldr	r2, [pc, #292]	; (8001098 <HAL_GPIO_Init+0x348>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x22a>
 8000f76:	2306      	movs	r3, #6
 8000f78:	e00c      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00a      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f82:	2304      	movs	r3, #4
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa4:	4936      	ldr	r1, [pc, #216]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fb2:	4b3a      	ldr	r3, [pc, #232]	; (800109c <HAL_GPIO_Init+0x34c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd6:	4a31      	ldr	r2, [pc, #196]	; (800109c <HAL_GPIO_Init+0x34c>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_GPIO_Init+0x34c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_GPIO_Init+0x34c>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_GPIO_Init+0x34c>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_GPIO_Init+0x34c>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_GPIO_Init+0x34c>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_GPIO_Init+0x34c>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa22 f303 	lsr.w	r3, r2, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	f47f ae78 	bne.w	8000d60 <HAL_GPIO_Init+0x10>
  }
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48001000 	.word	0x48001000
 8001094:	48001400 	.word	0x48001400
 8001098:	48001800 	.word	0x48001800
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fb1a 	bl	8005728 <HAL_GPIO_EXTI_Callback>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_PWREx_GetVoltageRange+0x18>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40007000 	.word	0x40007000

0800111c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112a:	d130      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001138:	d038      	beq.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001148:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2232      	movs	r2, #50	; 0x32
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9b      	lsrs	r3, r3, #18
 800115c:	3301      	adds	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001160:	e002      	b.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b01      	subs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001174:	d102      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f2      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	d110      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e00f      	b.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119a:	d007      	beq.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a4:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40007000 	.word	0x40007000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	431bde83 	.word	0x431bde83

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e39d      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011da:	4ba4      	ldr	r3, [pc, #656]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e4:	4ba1      	ldr	r3, [pc, #644]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80e1 	beq.w	80013be <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_RCC_OscConfig+0x4a>
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	f040 8088 	bne.w	800131a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 8084 	bne.w	800131a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001212:	4b96      	ldr	r3, [pc, #600]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x62>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e375      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1a      	ldr	r2, [r3, #32]
 800122e:	4b8f      	ldr	r3, [pc, #572]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <HAL_RCC_OscConfig+0x7c>
 800123a:	4b8c      	ldr	r3, [pc, #560]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001242:	e005      	b.n	8001250 <HAL_RCC_OscConfig+0x88>
 8001244:	4b89      	ldr	r3, [pc, #548]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001250:	4293      	cmp	r3, r2
 8001252:	d223      	bcs.n	800129c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fd09 	bl	8001c70 <RCC_SetFlashLatencyFromMSIRange>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e356      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a7f      	ldr	r2, [pc, #508]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b7d      	ldr	r3, [pc, #500]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	497a      	ldr	r1, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4975      	ldr	r1, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
 800129a:	e022      	b.n	80012e2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129c:	4b73      	ldr	r3, [pc, #460]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a72      	ldr	r2, [pc, #456]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b70      	ldr	r3, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	496d      	ldr	r1, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ba:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	4968      	ldr	r1, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fccc 	bl	8001c70 <RCC_SetFlashLatencyFromMSIRange>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e319      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012e2:	f000 fc03 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 80012e6:	4601      	mov	r1, r0
 80012e8:	4b60      	ldr	r3, [pc, #384]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a5f      	ldr	r2, [pc, #380]	; (8001470 <HAL_RCC_OscConfig+0x2a8>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	fa21 f303 	lsr.w	r3, r1, r3
 80012fe:	4a5d      	ldr	r2, [pc, #372]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001302:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x2b0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb96 	bl	8000a38 <HAL_InitTick>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d052      	beq.n	80013bc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	e2fd      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d032      	beq.n	8001388 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132e:	f7ff fbcf 	bl	8000ad0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001336:	f7ff fbcb 	bl	8000ad0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e2e6      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a44      	ldr	r2, [pc, #272]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	493f      	ldr	r1, [pc, #252]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	493a      	ldr	r1, [pc, #232]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
 8001386:	e01a      	b.n	80013be <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a37      	ldr	r2, [pc, #220]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001394:	f7ff fb9c 	bl	8000ad0 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139c:	f7ff fb98 	bl	8000ad0 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e2b3      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1d4>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d074      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_OscConfig+0x214>
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	d10e      	bne.n	80013f4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d10b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d064      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2ea>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d160      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e290      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d106      	bne.n	800140c <HAL_RCC_OscConfig+0x244>
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0x280>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x268>
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x280>
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01c      	beq.n	800148a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fb3e 	bl	8000ad0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001456:	e011      	b.n	800147c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fb3a 	bl	8000ad0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d90a      	bls.n	800147c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e255      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	08006bb4 	.word	0x08006bb4
 8001474:	20000008 	.word	0x20000008
 8001478:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147c:	4bae      	ldr	r3, [pc, #696]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0e7      	beq.n	8001458 <HAL_RCC_OscConfig+0x290>
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fb21 	bl	8000ad0 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001492:	f7ff fb1d 	bl	8000ad0 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e238      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a4:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x2ca>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d060      	beq.n	8001582 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x30a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d119      	bne.n	8001500 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d2:	4b99      	ldr	r3, [pc, #612]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x322>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e215      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b93      	ldr	r3, [pc, #588]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	498f      	ldr	r1, [pc, #572]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fe:	e040      	b.n	8001582 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d023      	beq.n	8001550 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a8a      	ldr	r2, [pc, #552]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fadc 	bl	8000ad0 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fad8 	bl	8000ad0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	497b      	ldr	r1, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
 800154e:	e018      	b.n	8001582 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001550:	4b79      	ldr	r3, [pc, #484]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a78      	ldr	r2, [pc, #480]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fab8 	bl	8000ad0 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fab4 	bl	8000ad0 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1cf      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001576:	4b70      	ldr	r3, [pc, #448]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03c      	beq.n	8001608 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b68      	ldr	r3, [pc, #416]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159c:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fa93 	bl	8000ad0 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fa8f 	bl	8000ad0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1aa      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x3e6>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b59      	ldr	r3, [pc, #356]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	4a58      	ldr	r2, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fa76 	bl	8000ad0 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fa72 	bl	8000ad0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e18d      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fa:	4b4f      	ldr	r3, [pc, #316]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ef      	bne.n	80015e8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a5 	beq.w	8001760 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10d      	bne.n	8001642 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a43      	ldr	r2, [pc, #268]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <HAL_RCC_OscConfig+0x574>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_OscConfig+0x574>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a3a      	ldr	r2, [pc, #232]	; (800173c <HAL_RCC_OscConfig+0x574>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff fa39 	bl	8000ad0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fa35 	bl	8000ad0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x574>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_RCC_OscConfig+0x4d2>
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168e:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001698:	e024      	b.n	80016e4 <HAL_RCC_OscConfig+0x51c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d110      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4fc>
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a8:	4a23      	ldr	r2, [pc, #140]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x51c>
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d016      	beq.n	800171a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff f9f0 	bl	8000ad0 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff f9ec 	bl	8000ad0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e105      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x570>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ed      	beq.n	80016f4 <HAL_RCC_OscConfig+0x52c>
 8001718:	e019      	b.n	800174e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff f9d9 	bl	8000ad0 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001720:	e00e      	b.n	8001740 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff f9d5 	bl	8000ad0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d905      	bls.n	8001740 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0ee      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001740:	4b77      	ldr	r3, [pc, #476]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1e9      	bne.n	8001722 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	4a71      	ldr	r2, [pc, #452]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 800175a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80d5 	beq.w	8001914 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	f000 808e 	beq.w	800188e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	2b02      	cmp	r3, #2
 8001778:	d15b      	bne.n	8001832 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b69      	ldr	r3, [pc, #420]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a68      	ldr	r2, [pc, #416]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f9a3 	bl	8000ad0 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f99f 	bl	8000ad0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0ba      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ac:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x75c>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017bc:	3a01      	subs	r2, #1
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c6:	0212      	lsls	r2, r2, #8
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017ce:	0852      	lsrs	r2, r2, #1
 80017d0:	3a01      	subs	r2, #1
 80017d2:	0552      	lsls	r2, r2, #21
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017da:	0852      	lsrs	r2, r2, #1
 80017dc:	3a01      	subs	r2, #1
 80017de:	0652      	lsls	r2, r2, #25
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017e6:	0912      	lsrs	r2, r2, #4
 80017e8:	0452      	lsls	r2, r2, #17
 80017ea:	430a      	orrs	r2, r1
 80017ec:	494c      	ldr	r1, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a4a      	ldr	r2, [pc, #296]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 80017f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017fe:	4b48      	ldr	r3, [pc, #288]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4a47      	ldr	r2, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001808:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff f961 	bl	8000ad0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff f95d 	bl	8000ad0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e078      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001824:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x64a>
 8001830:	e070      	b.n	8001914 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a3a      	ldr	r2, [pc, #232]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a34      	ldr	r2, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001850:	f023 0303 	bic.w	r3, r3, #3
 8001854:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a31      	ldr	r2, [pc, #196]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 800185c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff f933 	bl	8000ad0 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f92f 	bl	8000ad0 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e04a      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x6a6>
 800188c:	e042      	b.n	8001914 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e03d      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x758>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d130      	bne.n	8001910 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	3b01      	subs	r3, #1
 80018ba:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d127      	bne.n	8001910 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d11f      	bne.n	8001910 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018da:	2a07      	cmp	r2, #7
 80018dc:	bf14      	ite	ne
 80018de:	2201      	movne	r2, #1
 80018e0:	2200      	moveq	r2, #0
 80018e2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d113      	bne.n	8001910 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d109      	bne.n	8001910 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	3b01      	subs	r3, #1
 800190a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	f99d808c 	.word	0xf99d808c

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0c8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d910      	bls.n	800196c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4961      	ldr	r1, [pc, #388]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d04c      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d121      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e09e      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e092      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e086      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e07e      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d0:	4b42      	ldr	r3, [pc, #264]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 0203 	bic.w	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	493f      	ldr	r1, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e2:	f7ff f875 	bl	8000ad0 <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f7ff f871 	bl	8000ad0 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e066      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 020c 	and.w	r2, r3, #12
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d1eb      	bne.n	80019ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	492c      	ldr	r1, [pc, #176]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d210      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4924      	ldr	r1, [pc, #144]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e036      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4918      	ldr	r1, [pc, #96]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4910      	ldr	r1, [pc, #64]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a9e:	f000 f825 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe ffb8 	bl	8000a38 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	72fb      	strb	r3, [r7, #11]

  return status;
 8001acc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08006bb4 	.word	0x08006bb4
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d11e      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e004      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d133      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0xaa>
 8001b8e:	e005      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b92:	617b      	str	r3, [r7, #20]
      break;
 8001b94:	e005      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b98:	617b      	str	r3, [r7, #20]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	617b      	str	r3, [r7, #20]
      break;
 8001ba0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	3301      	adds	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	fb02 f203 	mul.w	r2, r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0e5b      	lsrs	r3, r3, #25
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001be2:	69bb      	ldr	r3, [r7, #24]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3724      	adds	r7, #36	; 0x24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08006bcc 	.word	0x08006bcc
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4601      	mov	r1, r0
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08006bc4 	.word	0x08006bc4

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c48:	f7ff ffda 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0adb      	lsrs	r3, r3, #11
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08006bc4 	.word	0x08006bc4

08001c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c88:	f7ff fa3a 	bl	8001100 <HAL_PWREx_GetVoltageRange>
 8001c8c:	6178      	str	r0, [r7, #20]
 8001c8e:	e014      	b.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ca8:	f7ff fa2a 	bl	8001100 <HAL_PWREx_GetVoltageRange>
 8001cac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc0:	d10b      	bne.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b80      	cmp	r3, #128	; 0x80
 8001cc6:	d919      	bls.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2ba0      	cmp	r3, #160	; 0xa0
 8001ccc:	d902      	bls.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cce:	2302      	movs	r3, #2
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e013      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e010      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d902      	bls.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e00a      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b80      	cmp	r3, #128	; 0x80
 8001cea:	d102      	bne.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cec:	2302      	movs	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e004      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b70      	cmp	r3, #112	; 0x70
 8001cf6:	d101      	bne.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	4909      	ldr	r1, [pc, #36]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40022000 	.word	0x40022000

08001d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03f      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d54:	d01c      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5a:	d802      	bhi.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d60:	e01f      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d66:	d003      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d6c:	d01c      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d6e:	e018      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d70:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a84      	ldr	r2, [pc, #528]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d7c:	e015      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fab9 	bl	80022fc <RCCEx_PLLSAI1_Config>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d8e:	e00c      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3320      	adds	r3, #32
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fba0 	bl	80024dc <RCCEx_PLLSAI2_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da0:	e003      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	74fb      	strb	r3, [r7, #19]
      break;
 8001da6:	e000      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db0:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dbe:	4972      	ldr	r1, [pc, #456]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dc6:	e001      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d03f      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d01c      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001de2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de6:	d802      	bhi.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001dec:	e01f      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df2:	d003      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001df4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001df8:	d01c      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001dfa:	e018      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dfc:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a61      	ldr	r2, [pc, #388]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e08:	e015      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fa73 	bl	80022fc <RCCEx_PLLSAI1_Config>
 8001e16:	4603      	mov	r3, r0
 8001e18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e1a:	e00c      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3320      	adds	r3, #32
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fb5a 	bl	80024dc <RCCEx_PLLSAI2_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e2c:	e003      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	74fb      	strb	r3, [r7, #19]
      break;
 8001e32:	e000      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e3c:	4b52      	ldr	r3, [pc, #328]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e4a:	494f      	ldr	r1, [pc, #316]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e52:	e001      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e54:	7cfb      	ldrb	r3, [r7, #19]
 8001e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a0 	beq.w	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a40      	ldr	r2, [pc, #256]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fe12 	bl	8000ad0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eae:	e009      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7fe fe0e 	bl	8000ad0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d902      	bls.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ef      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d15c      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01f      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d019      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe fdcd 	bl	8000ad0 <HAL_GetTick>
 8001f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f38:	e00b      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fdc9 	bl	8000ad0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d902      	bls.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f50:	e006      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ec      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f76:	4904      	ldr	r1, [pc, #16]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f7e:	e009      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	74bb      	strb	r3, [r7, #18]
 8001f84:	e006      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f94:	7c7b      	ldrb	r3, [r7, #17]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b9e      	ldr	r3, [pc, #632]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	4a9d      	ldr	r2, [pc, #628]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb2:	4b98      	ldr	r3, [pc, #608]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f023 0203 	bic.w	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	4994      	ldr	r1, [pc, #592]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd4:	4b8f      	ldr	r3, [pc, #572]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f023 020c 	bic.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	498c      	ldr	r1, [pc, #560]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ff6:	4b87      	ldr	r3, [pc, #540]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4983      	ldr	r1, [pc, #524]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	497b      	ldr	r1, [pc, #492]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002048:	4972      	ldr	r1, [pc, #456]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205c:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	496a      	ldr	r1, [pc, #424]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800207e:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	4961      	ldr	r1, [pc, #388]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020a0:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	4959      	ldr	r1, [pc, #356]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c2:	4b54      	ldr	r3, [pc, #336]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	4950      	ldr	r1, [pc, #320]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	4948      	ldr	r1, [pc, #288]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	493f      	ldr	r1, [pc, #252]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d028      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002128:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002136:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002146:	d106      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002152:	60d3      	str	r3, [r2, #12]
 8002154:	e011      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800215e:	d10c      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f8c8 	bl	80022fc <RCCEx_PLLSAI1_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d028      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	491f      	ldr	r1, [pc, #124]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b0:	60d3      	str	r3, [r2, #12]
 80021b2:	e011      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2101      	movs	r1, #1
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 f899 	bl	80022fc <RCCEx_PLLSAI1_Config>
 80021ca:	4603      	mov	r3, r0
 80021cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02b      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002202:	d109      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a02      	ldr	r2, [pc, #8]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
 8002210:	e014      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002220:	d10c      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	2101      	movs	r1, #1
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f867 	bl	80022fc <RCCEx_PLLSAI1_Config>
 800222e:	4603      	mov	r3, r0
 8002230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02f      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002256:	4928      	ldr	r1, [pc, #160]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002266:	d10d      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	2102      	movs	r1, #2
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f844 	bl	80022fc <RCCEx_PLLSAI1_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d014      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	74bb      	strb	r3, [r7, #18]
 8002282:	e011      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3320      	adds	r3, #32
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f921 	bl	80024dc <RCCEx_PLLSAI2_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c2:	490d      	ldr	r1, [pc, #52]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e6:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d018      	beq.n	8002348 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002316:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d10d      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
       ||
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
       ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d044      	beq.n	80023cc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e041      	b.n	80023cc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d00c      	beq.n	800236a <RCCEx_PLLSAI1_Config+0x6e>
 8002350:	2b03      	cmp	r3, #3
 8002352:	d013      	beq.n	800237c <RCCEx_PLLSAI1_Config+0x80>
 8002354:	2b01      	cmp	r3, #1
 8002356:	d120      	bne.n	800239a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002358:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11d      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e01a      	b.n	80023a0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237a:	e013      	b.n	80023a4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800237c:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002398:	e006      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      break;
 800239e:	e004      	b.n	80023aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023a0:	bf00      	nop
 80023a2:	e002      	b.n	80023aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	430b      	orrs	r3, r1
 80023c6:	4944      	ldr	r1, [pc, #272]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d17d      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a40      	ldr	r2, [pc, #256]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023de:	f7fe fb77 	bl	8000ad0 <HAL_GetTick>
 80023e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023e4:	e009      	b.n	80023fa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023e6:	f7fe fb73 	bl	8000ad0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d902      	bls.n	80023fa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	73fb      	strb	r3, [r7, #15]
        break;
 80023f8:	e005      	b.n	8002406 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ef      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d160      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d111      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800241a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6892      	ldr	r2, [r2, #8]
 8002422:	0211      	lsls	r1, r2, #8
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68d2      	ldr	r2, [r2, #12]
 8002428:	0912      	lsrs	r2, r2, #4
 800242a:	0452      	lsls	r2, r2, #17
 800242c:	430a      	orrs	r2, r1
 800242e:	492a      	ldr	r1, [pc, #168]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	610b      	str	r3, [r1, #16]
 8002434:	e027      	b.n	8002486 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d112      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002444:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6892      	ldr	r2, [r2, #8]
 800244c:	0211      	lsls	r1, r2, #8
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6912      	ldr	r2, [r2, #16]
 8002452:	0852      	lsrs	r2, r2, #1
 8002454:	3a01      	subs	r2, #1
 8002456:	0552      	lsls	r2, r2, #21
 8002458:	430a      	orrs	r2, r1
 800245a:	491f      	ldr	r1, [pc, #124]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	610b      	str	r3, [r1, #16]
 8002460:	e011      	b.n	8002486 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800246a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6892      	ldr	r2, [r2, #8]
 8002472:	0211      	lsls	r1, r2, #8
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6952      	ldr	r2, [r2, #20]
 8002478:	0852      	lsrs	r2, r2, #1
 800247a:	3a01      	subs	r2, #1
 800247c:	0652      	lsls	r2, r2, #25
 800247e:	430a      	orrs	r2, r1
 8002480:	4915      	ldr	r1, [pc, #84]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800248c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002490:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fb1d 	bl	8000ad0 <HAL_GetTick>
 8002496:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002498:	e009      	b.n	80024ae <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800249a:	f7fe fb19 	bl	8000ad0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d902      	bls.n	80024ae <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	73fb      	strb	r3, [r7, #15]
          break;
 80024ac:	e005      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ef      	beq.n	800249a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000

080024dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ea:	4b68      	ldr	r3, [pc, #416]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
       ||
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
       ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d044      	beq.n	80025ac <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e041      	b.n	80025ac <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d00c      	beq.n	800254a <RCCEx_PLLSAI2_Config+0x6e>
 8002530:	2b03      	cmp	r3, #3
 8002532:	d013      	beq.n	800255c <RCCEx_PLLSAI2_Config+0x80>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d120      	bne.n	800257a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002538:	4b54      	ldr	r3, [pc, #336]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d11d      	bne.n	8002580 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002548:	e01a      	b.n	8002580 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800254a:	4b50      	ldr	r3, [pc, #320]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255a:	e013      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10f      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002568:	4b48      	ldr	r3, [pc, #288]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002578:	e006      	b.n	8002588 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      break;
 800257e:	e004      	b.n	800258a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002580:	bf00      	nop
 8002582:	e002      	b.n	800258a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002588:	bf00      	nop
    }

    if(status == HAL_OK)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002590:	4b3e      	ldr	r3, [pc, #248]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	430b      	orrs	r3, r1
 80025a6:	4939      	ldr	r1, [pc, #228]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d167      	bne.n	8002682 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a35      	ldr	r2, [pc, #212]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025be:	f7fe fa87 	bl	8000ad0 <HAL_GetTick>
 80025c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025c4:	e009      	b.n	80025da <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025c6:	f7fe fa83 	bl	8000ad0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d902      	bls.n	80025da <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	73fb      	strb	r3, [r7, #15]
        break;
 80025d8:	e005      	b.n	80025e6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ef      	bne.n	80025c6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d14a      	bne.n	8002682 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	0211      	lsls	r1, r2, #8
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68d2      	ldr	r2, [r2, #12]
 8002608:	0912      	lsrs	r2, r2, #4
 800260a:	0452      	lsls	r2, r2, #17
 800260c:	430a      	orrs	r2, r1
 800260e:	491f      	ldr	r1, [pc, #124]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	614b      	str	r3, [r1, #20]
 8002614:	e011      	b.n	800263a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800261e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	0211      	lsls	r1, r2, #8
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6912      	ldr	r2, [r2, #16]
 800262c:	0852      	lsrs	r2, r2, #1
 800262e:	3a01      	subs	r2, #1
 8002630:	0652      	lsls	r2, r2, #25
 8002632:	430a      	orrs	r2, r1
 8002634:	4915      	ldr	r1, [pc, #84]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a13      	ldr	r2, [pc, #76]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fa43 	bl	8000ad0 <HAL_GetTick>
 800264a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800264c:	e009      	b.n	8002662 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800264e:	f7fe fa3f 	bl	8000ad0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	73fb      	strb	r3, [r7, #15]
          break;
 8002660:	e005      	b.n	800266e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ef      	beq.n	800264e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d106      	bne.n	8002682 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <RCCEx_PLLSAI2_Config+0x1b0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07c      	b.n	800279c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f003 f89f 	bl	8005800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026e2:	d902      	bls.n	80026ea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e002      	b.n	80026f0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80026f8:	d007      	beq.n	800270a <HAL_SPI_Init+0x7a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002702:	d002      	beq.n	800270a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800271a:	d903      	bls.n	8002724 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
 8002722:	e002      	b.n	800272a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	ea42 0103 	orr.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	f003 0204 	and.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	ea42 0103 	orr.w	r1, r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_SPI_Transmit+0x22>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e150      	b.n	8002a68 <HAL_SPI_Transmit+0x2c4>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ce:	f7fe f97f 	bl	8000ad0 <HAL_GetTick>
 80027d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
 80027e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027e8:	e135      	b.n	8002a56 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Transmit+0x52>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027fa:	e12c      	b.n	8002a56 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2203      	movs	r2, #3
 8002800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	88fa      	ldrh	r2, [r7, #6]
 8002814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002846:	d107      	bne.n	8002858 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002856:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d007      	beq.n	8002876 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800287e:	d94b      	bls.n	8002918 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_SPI_Transmit+0xea>
 8002888:	8afb      	ldrh	r3, [r7, #22]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d13e      	bne.n	800290c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028b2:	e02b      	b.n	800290c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d112      	bne.n	80028e8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	1c9a      	adds	r2, r3, #2
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028e6:	e011      	b.n	800290c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e8:	f7fe f8f2 	bl	8000ad0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d803      	bhi.n	8002900 <HAL_SPI_Transmit+0x15c>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d102      	bne.n	8002906 <HAL_SPI_Transmit+0x162>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	77fb      	strb	r3, [r7, #31]
          goto error;
 800290a:	e0a4      	b.n	8002a56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ce      	bne.n	80028b4 <HAL_SPI_Transmit+0x110>
 8002916:	e07c      	b.n	8002a12 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_SPI_Transmit+0x182>
 8002920:	8afb      	ldrh	r3, [r7, #22]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d170      	bne.n	8002a08 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d912      	bls.n	8002956 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b02      	subs	r3, #2
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002954:	e058      	b.n	8002a08 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800297c:	e044      	b.n	8002a08 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d12b      	bne.n	80029e4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d912      	bls.n	80029bc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	881a      	ldrh	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	1c9a      	adds	r2, r3, #2
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b02      	subs	r3, #2
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029ba:	e025      	b.n	8002a08 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e2:	e011      	b.n	8002a08 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e4:	f7fe f874 	bl	8000ad0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d803      	bhi.n	80029fc <HAL_SPI_Transmit+0x258>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d102      	bne.n	8002a02 <HAL_SPI_Transmit+0x25e>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a06:	e026      	b.n	8002a56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1b5      	bne.n	800297e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fc94 	bl	8003344 <SPI_EndRxTxTransaction>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e000      	b.n	8002a56 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002a54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8c:	d112      	bne.n	8002ab4 <HAL_SPI_Receive+0x44>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10e      	bne.n	8002ab4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f908 	bl	8002cc0 <HAL_SPI_TransmitReceive>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	e101      	b.n	8002cb8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_SPI_Receive+0x52>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0fa      	b.n	8002cb8 <HAL_SPI_Receive+0x248>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aca:	f7fe f801 	bl	8000ad0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ae0:	e0e1      	b.n	8002ca6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_SPI_Receive+0x7e>
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002af2:	e0d8      	b.n	8002ca6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2204      	movs	r2, #4
 8002af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b3e:	d908      	bls.n	8002b52 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	e007      	b.n	8002b62 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b60:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6a:	d107      	bne.n	8002b7c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d007      	beq.n	8002b9a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ba2:	d867      	bhi.n	8002c74 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ba4:	e030      	b.n	8002c08 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d117      	bne.n	8002be4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f103 020c 	add.w	r2, r3, #12
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	7812      	ldrb	r2, [r2, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002be2:	e011      	b.n	8002c08 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be4:	f7fd ff74 	bl	8000ad0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d803      	bhi.n	8002bfc <HAL_SPI_Receive+0x18c>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d102      	bne.n	8002c02 <HAL_SPI_Receive+0x192>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c06:	e04e      	b.n	8002ca6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1c8      	bne.n	8002ba6 <HAL_SPI_Receive+0x136>
 8002c14:	e034      	b.n	8002c80 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d115      	bne.n	8002c50 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c4e:	e011      	b.n	8002c74 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c50:	f7fd ff3e 	bl	8000ad0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d803      	bhi.n	8002c68 <HAL_SPI_Receive+0x1f8>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d102      	bne.n	8002c6e <HAL_SPI_Receive+0x1fe>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c72:	e018      	b.n	8002ca6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ca      	bne.n	8002c16 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fb05 	bl	8003294 <SPI_EndRxTransaction>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
 8002ca2:	e000      	b.n	8002ca6 <HAL_SPI_Receive+0x236>
  }

error :
 8002ca4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_SPI_TransmitReceive+0x26>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e1fb      	b.n	80030de <HAL_SPI_TransmitReceive+0x41e>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cee:	f7fd feef 	bl	8000ad0 <HAL_GetTick>
 8002cf2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cfa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d0a:	7efb      	ldrb	r3, [r7, #27]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d00e      	beq.n	8002d2e <HAL_SPI_TransmitReceive+0x6e>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d16:	d106      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_TransmitReceive+0x66>
 8002d20:	7efb      	ldrb	r3, [r7, #27]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d003      	beq.n	8002d2e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d2c:	e1cd      	b.n	80030ca <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x80>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x80>
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d46:	e1c0      	b.n	80030ca <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d003      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2205      	movs	r2, #5
 8002d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d9e:	d802      	bhi.n	8002da6 <HAL_SPI_TransmitReceive+0xe6>
 8002da0:	8a3b      	ldrh	r3, [r7, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d908      	bls.n	8002db8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e007      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d007      	beq.n	8002de6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dee:	d97c      	bls.n	8002eea <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_TransmitReceive+0x13e>
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d169      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e22:	e056      	b.n	8002ed2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d11b      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x1aa>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d016      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x1aa>
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d113      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d11c      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x1f2>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d016      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	1c9a      	adds	r2, r3, #2
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eb2:	f7fd fe0d 	bl	8000ad0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d807      	bhi.n	8002ed2 <HAL_SPI_TransmitReceive+0x212>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d003      	beq.n	8002ed2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ed0:	e0fb      	b.n	80030ca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1a3      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x164>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d19d      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x164>
 8002ee8:	e0df      	b.n	80030aa <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x23a>
 8002ef2:	8a7b      	ldrh	r3, [r7, #18]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 80cb 	bne.w	8003090 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d912      	bls.n	8002f2a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b02      	subs	r3, #2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f28:	e0b2      	b.n	8003090 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f50:	e09e      	b.n	8003090 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d134      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x30a>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02f      	beq.n	8002fca <HAL_SPI_TransmitReceive+0x30a>
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d12c      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d912      	bls.n	8002fa0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b02      	subs	r3, #2
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f9e:	e012      	b.n	8002fc6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d148      	bne.n	800306a <HAL_SPI_TransmitReceive+0x3aa>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d042      	beq.n	800306a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d923      	bls.n	8003038 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	b292      	uxth	r2, r2
 8002ffc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b02      	subs	r3, #2
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d81f      	bhi.n	8003066 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e016      	b.n	8003066 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f103 020c 	add.w	r2, r3, #12
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800306a:	f7fd fd31 	bl	8000ad0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003076:	429a      	cmp	r2, r3
 8003078:	d803      	bhi.n	8003082 <HAL_SPI_TransmitReceive+0x3c2>
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d102      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x3c8>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800308e:	e01c      	b.n	80030ca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f47f af5b 	bne.w	8002f52 <HAL_SPI_TransmitReceive+0x292>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f47f af54 	bne.w	8002f52 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f948 	bl	8003344 <SPI_EndRxTxTransaction>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	661a      	str	r2, [r3, #96]	; 0x60
 80030c6:	e000      	b.n	80030ca <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80030c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f6:	e04c      	b.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d048      	beq.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003100:	f7fd fce6 	bl	8000ad0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d902      	bls.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d13d      	bne.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d111      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d004      	beq.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d107      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315c:	d10f      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1a3      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80031c8:	e057      	b.n	800327a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031d0:	d106      	bne.n	80031e0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d048      	beq.n	800327a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031e8:	f7fd fc72 	bl	8000ad0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d902      	bls.n	80031fe <SPI_WaitFifoStateUntilTimeout+0x44>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d13d      	bne.n	800327a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800320c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003216:	d111      	bne.n	800323c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	d004      	beq.n	800322c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d107      	bne.n	800323c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003244:	d10f      	bne.n	8003266 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e008      	b.n	800328c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d19f      	bne.n	80031ca <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a8:	d111      	bne.n	80032ce <SPI_EndRxTransaction+0x3a>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d004      	beq.n	80032be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d107      	bne.n	80032ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f7ff ff04 	bl	80030e6 <SPI_WaitFlagStateUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e023      	b.n	800333c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fc:	d11d      	bne.n	800333a <SPI_EndRxTransaction+0xa6>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003306:	d004      	beq.n	8003312 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	d113      	bne.n	800333a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff ff4b 	bl	80031ba <SPI_WaitFifoStateUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e000      	b.n	800333c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff ff2c 	bl	80031ba <SPI_WaitFifoStateUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e027      	b.n	80033c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2200      	movs	r2, #0
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff feaf 	bl	80030e6 <SPI_WaitFlagStateUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e014      	b.n	80033c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff ff05 	bl	80031ba <SPI_WaitFifoStateUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e000      	b.n	80033c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e01d      	b.n	800341e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f002 fa64 	bl	80058c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 f8c2 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_TIM_ConfigClockSource+0x18>
 800343a:	2302      	movs	r3, #2
 800343c:	e0a8      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x16a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003460:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003468:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d067      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x124>
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d80b      	bhi.n	8003496 <HAL_TIM_ConfigClockSource+0x70>
 800347e:	2b10      	cmp	r3, #16
 8003480:	d073      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x144>
 8003482:	2b10      	cmp	r3, #16
 8003484:	d802      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x66>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06f      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800348a:	e078      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800348c:	2b20      	cmp	r3, #32
 800348e:	d06c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x144>
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d06a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003494:	e073      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003496:	2b70      	cmp	r3, #112	; 0x70
 8003498:	d00d      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x90>
 800349a:	2b70      	cmp	r3, #112	; 0x70
 800349c:	d804      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x82>
 800349e:	2b50      	cmp	r3, #80	; 0x50
 80034a0:	d033      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xe4>
 80034a2:	2b60      	cmp	r3, #96	; 0x60
 80034a4:	d041      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80034a6:	e06a      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d066      	beq.n	800357c <HAL_TIM_ConfigClockSource+0x156>
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b2:	d017      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80034b4:	e063      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f000 f97b 	bl	80037c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04c      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f000 f964 	bl	80037c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e039      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 f8d8 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	; 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f931 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8003528:	e029      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f8f7 	bl	800372a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	; 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f921 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8003548:	e019      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f8b8 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f911 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8003568:	e009      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 f908 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 800357a:	e000      	b.n	800357e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800357c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a40      	ldr	r2, [pc, #256]	; (80036ac <TIM_Base_SetConfig+0x114>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d00f      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <TIM_Base_SetConfig+0x118>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3c      	ldr	r2, [pc, #240]	; (80036b4 <TIM_Base_SetConfig+0x11c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <TIM_Base_SetConfig+0x120>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3a      	ldr	r2, [pc, #232]	; (80036bc <TIM_Base_SetConfig+0x124>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <TIM_Base_SetConfig+0x114>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d01b      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <TIM_Base_SetConfig+0x118>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d017      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <TIM_Base_SetConfig+0x11c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <TIM_Base_SetConfig+0x120>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00f      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a29      	ldr	r2, [pc, #164]	; (80036bc <TIM_Base_SetConfig+0x124>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00b      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a28      	ldr	r2, [pc, #160]	; (80036c0 <TIM_Base_SetConfig+0x128>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <TIM_Base_SetConfig+0x12c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <TIM_Base_SetConfig+0x130>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <TIM_Base_SetConfig+0x114>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00f      	beq.n	8003690 <TIM_Base_SetConfig+0xf8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <TIM_Base_SetConfig+0x124>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00b      	beq.n	8003690 <TIM_Base_SetConfig+0xf8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <TIM_Base_SetConfig+0x128>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0xf8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <TIM_Base_SetConfig+0x12c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0xf8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <TIM_Base_SetConfig+0x130>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d103      	bne.n	8003698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	615a      	str	r2, [r3, #20]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40013400 	.word	0x40013400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 030a 	bic.w	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003766:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f043 0307 	orr.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e045      	b.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003876:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400

080038b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e040      	b.n	800394c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f002 f812 	bl	8005904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f82c 	bl	8003954 <UART_SetConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fb68 	bl	8003fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fbef 	bl	8004128 <UART_CheckIdleState>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003958:	b088      	sub	sp, #32
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4313      	orrs	r3, r2
 8003980:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4bac      	ldr	r3, [pc, #688]	; (8003c3c <UART_SetConfig+0x2e8>)
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	69f9      	ldr	r1, [r7, #28]
 8003992:	430b      	orrs	r3, r1
 8003994:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4aa2      	ldr	r2, [pc, #648]	; (8003c40 <UART_SetConfig+0x2ec>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a99      	ldr	r2, [pc, #612]	; (8003c44 <UART_SetConfig+0x2f0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d121      	bne.n	8003a28 <UART_SetConfig+0xd4>
 80039e4:	4b98      	ldr	r3, [pc, #608]	; (8003c48 <UART_SetConfig+0x2f4>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d816      	bhi.n	8003a20 <UART_SetConfig+0xcc>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0xa4>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a15 	.word	0x08003a15
 8003a00:	08003a0f 	.word	0x08003a0f
 8003a04:	08003a1b 	.word	0x08003a1b
 8003a08:	2301      	movs	r3, #1
 8003a0a:	76fb      	strb	r3, [r7, #27]
 8003a0c:	e0e8      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	76fb      	strb	r3, [r7, #27]
 8003a12:	e0e5      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a14:	2304      	movs	r3, #4
 8003a16:	76fb      	strb	r3, [r7, #27]
 8003a18:	e0e2      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	76fb      	strb	r3, [r7, #27]
 8003a1e:	e0df      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a20:	2310      	movs	r3, #16
 8003a22:	76fb      	strb	r3, [r7, #27]
 8003a24:	bf00      	nop
 8003a26:	e0db      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a87      	ldr	r2, [pc, #540]	; (8003c4c <UART_SetConfig+0x2f8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d134      	bne.n	8003a9c <UART_SetConfig+0x148>
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <UART_SetConfig+0x2f4>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	d829      	bhi.n	8003a94 <UART_SetConfig+0x140>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <UART_SetConfig+0xf4>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003a95 	.word	0x08003a95
 8003a50:	08003a95 	.word	0x08003a95
 8003a54:	08003a95 	.word	0x08003a95
 8003a58:	08003a89 	.word	0x08003a89
 8003a5c:	08003a95 	.word	0x08003a95
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003a95 	.word	0x08003a95
 8003a68:	08003a83 	.word	0x08003a83
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a95 	.word	0x08003a95
 8003a78:	08003a8f 	.word	0x08003a8f
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	76fb      	strb	r3, [r7, #27]
 8003a80:	e0ae      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a82:	2302      	movs	r3, #2
 8003a84:	76fb      	strb	r3, [r7, #27]
 8003a86:	e0ab      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e0a8      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e0a5      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a94:	2310      	movs	r3, #16
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	bf00      	nop
 8003a9a:	e0a1      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6b      	ldr	r2, [pc, #428]	; (8003c50 <UART_SetConfig+0x2fc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d120      	bne.n	8003ae8 <UART_SetConfig+0x194>
 8003aa6:	4b68      	ldr	r3, [pc, #416]	; (8003c48 <UART_SetConfig+0x2f4>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d00f      	beq.n	8003ad4 <UART_SetConfig+0x180>
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d802      	bhi.n	8003abe <UART_SetConfig+0x16a>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <UART_SetConfig+0x174>
 8003abc:	e010      	b.n	8003ae0 <UART_SetConfig+0x18c>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d005      	beq.n	8003ace <UART_SetConfig+0x17a>
 8003ac2:	2b30      	cmp	r3, #48	; 0x30
 8003ac4:	d009      	beq.n	8003ada <UART_SetConfig+0x186>
 8003ac6:	e00b      	b.n	8003ae0 <UART_SetConfig+0x18c>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	e088      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	76fb      	strb	r3, [r7, #27]
 8003ad2:	e085      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	76fb      	strb	r3, [r7, #27]
 8003ad8:	e082      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003ada:	2308      	movs	r3, #8
 8003adc:	76fb      	strb	r3, [r7, #27]
 8003ade:	e07f      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	76fb      	strb	r3, [r7, #27]
 8003ae4:	bf00      	nop
 8003ae6:	e07b      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a59      	ldr	r2, [pc, #356]	; (8003c54 <UART_SetConfig+0x300>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d120      	bne.n	8003b34 <UART_SetConfig+0x1e0>
 8003af2:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <UART_SetConfig+0x2f4>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d00f      	beq.n	8003b20 <UART_SetConfig+0x1cc>
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d802      	bhi.n	8003b0a <UART_SetConfig+0x1b6>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <UART_SetConfig+0x1c0>
 8003b08:	e010      	b.n	8003b2c <UART_SetConfig+0x1d8>
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d005      	beq.n	8003b1a <UART_SetConfig+0x1c6>
 8003b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b10:	d009      	beq.n	8003b26 <UART_SetConfig+0x1d2>
 8003b12:	e00b      	b.n	8003b2c <UART_SetConfig+0x1d8>
 8003b14:	2300      	movs	r3, #0
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	e062      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	76fb      	strb	r3, [r7, #27]
 8003b1e:	e05f      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b20:	2304      	movs	r3, #4
 8003b22:	76fb      	strb	r3, [r7, #27]
 8003b24:	e05c      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b26:	2308      	movs	r3, #8
 8003b28:	76fb      	strb	r3, [r7, #27]
 8003b2a:	e059      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	76fb      	strb	r3, [r7, #27]
 8003b30:	bf00      	nop
 8003b32:	e055      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a47      	ldr	r2, [pc, #284]	; (8003c58 <UART_SetConfig+0x304>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d124      	bne.n	8003b88 <UART_SetConfig+0x234>
 8003b3e:	4b42      	ldr	r3, [pc, #264]	; (8003c48 <UART_SetConfig+0x2f4>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4c:	d012      	beq.n	8003b74 <UART_SetConfig+0x220>
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b52:	d802      	bhi.n	8003b5a <UART_SetConfig+0x206>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <UART_SetConfig+0x214>
 8003b58:	e012      	b.n	8003b80 <UART_SetConfig+0x22c>
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d006      	beq.n	8003b6e <UART_SetConfig+0x21a>
 8003b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b64:	d009      	beq.n	8003b7a <UART_SetConfig+0x226>
 8003b66:	e00b      	b.n	8003b80 <UART_SetConfig+0x22c>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	76fb      	strb	r3, [r7, #27]
 8003b6c:	e038      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	76fb      	strb	r3, [r7, #27]
 8003b72:	e035      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b74:	2304      	movs	r3, #4
 8003b76:	76fb      	strb	r3, [r7, #27]
 8003b78:	e032      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	76fb      	strb	r3, [r7, #27]
 8003b7e:	e02f      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b80:	2310      	movs	r3, #16
 8003b82:	76fb      	strb	r3, [r7, #27]
 8003b84:	bf00      	nop
 8003b86:	e02b      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d124      	bne.n	8003bdc <UART_SetConfig+0x288>
 8003b92:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <UART_SetConfig+0x2f4>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba0:	d012      	beq.n	8003bc8 <UART_SetConfig+0x274>
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d802      	bhi.n	8003bae <UART_SetConfig+0x25a>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <UART_SetConfig+0x268>
 8003bac:	e012      	b.n	8003bd4 <UART_SetConfig+0x280>
 8003bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb2:	d006      	beq.n	8003bc2 <UART_SetConfig+0x26e>
 8003bb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bb8:	d009      	beq.n	8003bce <UART_SetConfig+0x27a>
 8003bba:	e00b      	b.n	8003bd4 <UART_SetConfig+0x280>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	76fb      	strb	r3, [r7, #27]
 8003bc0:	e00e      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	76fb      	strb	r3, [r7, #27]
 8003bc6:	e00b      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e008      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	76fb      	strb	r3, [r7, #27]
 8003bd2:	e005      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	bf00      	nop
 8003bda:	e001      	b.n	8003be0 <UART_SetConfig+0x28c>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f040 80fa 	bne.w	8003de0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bec:	7efb      	ldrb	r3, [r7, #27]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d836      	bhi.n	8003c60 <UART_SetConfig+0x30c>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0x2a4>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c61 	.word	0x08003c61
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c61 	.word	0x08003c61
 8003c08:	08003c2b 	.word	0x08003c2b
 8003c0c:	08003c61 	.word	0x08003c61
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7fd fffc 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8003c20:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c22:	e020      	b.n	8003c66 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <UART_SetConfig+0x308>)
 8003c26:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c28:	e01d      	b.n	8003c66 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7fd ff5f 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003c2e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c30:	e019      	b.n	8003c66 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c36:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c38:	e015      	b.n	8003c66 <UART_SetConfig+0x312>
 8003c3a:	bf00      	nop
 8003c3c:	efff69f3 	.word	0xefff69f3
 8003c40:	40008000 	.word	0x40008000
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40004800 	.word	0x40004800
 8003c54:	40004c00 	.word	0x40004c00
 8003c58:	40005000 	.word	0x40005000
 8003c5c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	74fb      	strb	r3, [r7, #19]
        break;
 8003c64:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 81ac 	beq.w	8003fc6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d305      	bcc.n	8003c8a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d902      	bls.n	8003c90 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	74fb      	strb	r3, [r7, #19]
 8003c8e:	e19a      	b.n	8003fc6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003c90:	7efb      	ldrb	r3, [r7, #27]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	f200 8091 	bhi.w	8003dba <UART_SetConfig+0x466>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x34c>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003dbb 	.word	0x08003dbb
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003dbb 	.word	0x08003dbb
 8003cb0:	08003d45 	.word	0x08003d45
 8003cb4:	08003dbb 	.word	0x08003dbb
 8003cb8:	08003dbb 	.word	0x08003dbb
 8003cbc:	08003dbb 	.word	0x08003dbb
 8003cc0:	08003d91 	.word	0x08003d91
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cc4:	f7fd ffa8 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	f04f 0400 	mov.w	r4, #0
 8003cd8:	0214      	lsls	r4, r2, #8
 8003cda:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003cde:	020b      	lsls	r3, r1, #8
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6852      	ldr	r2, [r2, #4]
 8003ce4:	0852      	lsrs	r2, r2, #1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	eb13 0b01 	adds.w	fp, r3, r1
 8003cf0:	eb44 0c02 	adc.w	ip, r4, r2
 8003cf4:	4658      	mov	r0, fp
 8003cf6:	4661      	mov	r1, ip
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	461a      	mov	r2, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	f7fc fd00 	bl	8000708 <__aeabi_uldivmod>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d0e:	e057      	b.n	8003dc0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	49b1      	ldr	r1, [pc, #708]	; (8003fe0 <UART_SetConfig+0x68c>)
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	eb13 0b01 	adds.w	fp, r3, r1
 8003d24:	eb44 0c02 	adc.w	ip, r4, r2
 8003d28:	4658      	mov	r0, fp
 8003d2a:	4661      	mov	r1, ip
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	f7fc fce6 	bl	8000708 <__aeabi_uldivmod>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d42:	e03d      	b.n	8003dc0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d44:	f7fd fed2 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	f04f 0400 	mov.w	r4, #0
 8003d58:	0214      	lsls	r4, r2, #8
 8003d5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d5e:	020b      	lsls	r3, r1, #8
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6852      	ldr	r2, [r2, #4]
 8003d64:	0852      	lsrs	r2, r2, #1
 8003d66:	4611      	mov	r1, r2
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	eb13 0b01 	adds.w	fp, r3, r1
 8003d70:	eb44 0c02 	adc.w	ip, r4, r2
 8003d74:	4658      	mov	r0, fp
 8003d76:	4661      	mov	r1, ip
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	461a      	mov	r2, r3
 8003d82:	4623      	mov	r3, r4
 8003d84:	f7fc fcc0 	bl	8000708 <__aeabi_uldivmod>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d8e:	e017      	b.n	8003dc0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003d9e:	f144 0100 	adc.w	r1, r4, #0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	f7fc fcab 	bl	8000708 <__aeabi_uldivmod>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003db8:	e002      	b.n	8003dc0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	74fb      	strb	r3, [r7, #19]
            break;
 8003dbe:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc6:	d308      	bcc.n	8003dda <UART_SetConfig+0x486>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d204      	bcs.n	8003dda <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	e0f5      	b.n	8003fc6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	74fb      	strb	r3, [r7, #19]
 8003dde:	e0f2      	b.n	8003fc6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	d17f      	bne.n	8003eea <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003dea:	7efb      	ldrb	r3, [r7, #27]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d85c      	bhi.n	8003eaa <UART_SetConfig+0x556>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0x4a4>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003eab 	.word	0x08003eab
 8003e08:	08003e75 	.word	0x08003e75
 8003e0c:	08003eab 	.word	0x08003eab
 8003e10:	08003eab 	.word	0x08003eab
 8003e14:	08003eab 	.word	0x08003eab
 8003e18:	08003e93 	.word	0x08003e93
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e1c:	f7fd fefc 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8003e20:	4603      	mov	r3, r0
 8003e22:	005a      	lsls	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	441a      	add	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e38:	e03a      	b.n	8003eb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e3a:	f7fd ff03 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	005a      	lsls	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e56:	e02b      	b.n	8003eb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003e62:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6852      	ldr	r2, [r2, #4]
 8003e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e72:	e01d      	b.n	8003eb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e74:	f7fd fe3a 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	005a      	lsls	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	441a      	add	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e90:	e00e      	b.n	8003eb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ea8:	e002      	b.n	8003eb0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	74fb      	strb	r3, [r7, #19]
        break;
 8003eae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d916      	bls.n	8003ee4 <UART_SetConfig+0x590>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d212      	bcs.n	8003ee4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f023 030f 	bic.w	r3, r3, #15
 8003ec6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	897b      	ldrh	r3, [r7, #10]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	897a      	ldrh	r2, [r7, #10]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	e070      	b.n	8003fc6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	74fb      	strb	r3, [r7, #19]
 8003ee8:	e06d      	b.n	8003fc6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d859      	bhi.n	8003fa4 <UART_SetConfig+0x650>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x5a4>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003fa5 	.word	0x08003fa5
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003fa5 	.word	0x08003fa5
 8003f10:	08003fa5 	.word	0x08003fa5
 8003f14:	08003fa5 	.word	0x08003fa5
 8003f18:	08003f8d 	.word	0x08003f8d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f1c:	f7fd fe7c 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f36:	e038      	b.n	8003faa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f38:	f7fd fe84 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f52:	e02a      	b.n	8003faa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f5e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6852      	ldr	r2, [r2, #4]
 8003f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f6e:	e01c      	b.n	8003faa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f70:	f7fd fdbc 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f8a:	e00e      	b.n	8003faa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa2:	e002      	b.n	8003faa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d908      	bls.n	8003fc2 <UART_SetConfig+0x66e>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d204      	bcs.n	8003fc2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	e001      	b.n	8003fc6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	f4240000 	.word	0xf4240000

08003fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01a      	beq.n	80040fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d10a      	bne.n	80040fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af02      	add	r7, sp, #8
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004136:	f7fc fccb 	bl	8000ad0 <HAL_GetTick>
 800413a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d10e      	bne.n	8004168 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800414a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f82a 	bl	80041b2 <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e020      	b.n	80041aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d10e      	bne.n	8004194 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004176:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f814 	bl	80041b2 <UART_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e00a      	b.n	80041aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c2:	e02a      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d026      	beq.n	800421a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fc fc80 	bl	8000ad0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11b      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	429a      	cmp	r2, r3
 8004236:	d0c5      	beq.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_ZN9LoRaClass5writeEPKc>:
  float packetSnr();
  long packetFrequencyError();

  // from Print
  virtual size_t write(uint8_t byte);
  size_t write(const char *str) {
 8004242:	b590      	push	{r4, r7, lr}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
    if (str == NULL) return 0;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <_ZN9LoRaClass5writeEPKc+0x14>
 8004252:	2300      	movs	r3, #0
 8004254:	e00c      	b.n	8004270 <_ZN9LoRaClass5writeEPKc+0x2e>
    return write((const uint8_t *)str, strlen(str));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3304      	adds	r3, #4
 800425c:	681c      	ldr	r4, [r3, #0]
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f7fb ffb6 	bl	80001d0 <strlen>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	47a0      	blx	r4
 800426e:	4603      	mov	r3, r0
  }
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bd90      	pop	{r4, r7, pc}

08004278 <_ZN9LoRaClassC1Ev>:
#define IRQ_PAYLOAD_CRC_ERROR_MASK 0x20
#define IRQ_RX_DONE_MASK           0x40

#define MAX_PKT_LENGTH           255

LoRaClass::LoRaClass() :
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(NULL)
 8004280:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <_ZN9LoRaClassC1Ev+0x34>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	61da      	str	r2, [r3, #28]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	621a      	str	r2, [r3, #32]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	625a      	str	r2, [r3, #36]	; 0x24
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	629a      	str	r2, [r3, #40]	; 0x28
{
  // overide Stream timeout value
  //setTimeout(0);
}
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	08006b9c 	.word	0x08006b9c

080042b0 <_ZN9LoRaClass10sendPacketEPvj>:

//New methods
int LoRaClass::sendPacket(void* pData, size_t dataSize){
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
	size_t i;
	beginPacket();
 80042bc:	2100      	movs	r1, #0
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f8d2 	bl	8004468 <_ZN9LoRaClass11beginPacketEi>
	for(i = 0; i < dataSize; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d20b      	bcs.n	80042e8 <_ZN9LoRaClass10sendPacketEPvj+0x38>
		print(((char*)pData)[i]);
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4413      	add	r3, r2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fe5e 	bl	8004f9c <_ZN9LoRaClass5printEc>
	for(i = 0; i < dataSize; i++)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3301      	adds	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e7ef      	b.n	80042c8 <_ZN9LoRaClass10sendPacketEPvj+0x18>
	endPacket();
 80042e8:	2100      	movs	r1, #0
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f902 	bl	80044f4 <_ZN9LoRaClass9endPacketEb>

	return 1;
 80042f0:	2301      	movs	r3, #1
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_ZN9LoRaClass10readPacketEPvj>:

int LoRaClass::readPacket(void* pBuffer, size_t bufferSize){
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
	size_t i = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
	size_t packetSize;

	packetSize = parsePacket();
 800430a:	2100      	movs	r1, #0
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f949 	bl	80045a4 <_ZN9LoRaClass11parsePacketEi>
 8004312:	4603      	mov	r3, r0
 8004314:	613b      	str	r3, [r7, #16]

	while (available() && i < bufferSize && i < packetSize) {
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	4798      	blx	r3
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <_ZN9LoRaClass10readPacketEPvj+0x42>
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d205      	bcs.n	800433c <_ZN9LoRaClass10readPacketEPvj+0x42>
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	429a      	cmp	r2, r3
 8004336:	d201      	bcs.n	800433c <_ZN9LoRaClass10readPacketEPvj+0x42>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <_ZN9LoRaClass10readPacketEPvj+0x44>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00e      	beq.n	8004360 <_ZN9LoRaClass10readPacketEPvj+0x66>
		((char*)pBuffer)[i++] = (char)read();
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	4798      	blx	r3
 800434e:	4601      	mov	r1, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	617a      	str	r2, [r7, #20]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	b2ca      	uxtb	r2, r1
 800435c:	701a      	strb	r2, [r3, #0]
	while (available() && i < bufferSize && i < packetSize) {
 800435e:	e7da      	b.n	8004316 <_ZN9LoRaClass10readPacketEPvj+0x1c>
	}

	reset();
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f805 	bl	8004370 <_ZN9LoRaClass5resetEv>

	return 1;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZN9LoRaClass5resetEv>:

void LoRaClass::reset(){
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	begin(_frequency);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f816 	bl	80043b0 <_ZN9LoRaClass5beginEl>

	setSignalBandwidth(125E3);
 8004384:	4909      	ldr	r1, [pc, #36]	; (80043ac <_ZN9LoRaClass5resetEv+0x3c>)
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fba2 	bl	8004ad0 <_ZN9LoRaClass18setSignalBandwidthEl>
	setSpreadingFactor(11);
 800438c:	210b      	movs	r1, #11
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fb0a 	bl	80049a8 <_ZN9LoRaClass18setSpreadingFactorEi>
	enableCrc();
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fc96 	bl	8004cc6 <_ZN9LoRaClass9enableCrcEv>
	receive();
 800439a:	2100      	movs	r1, #0
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fa23 	bl	80047e8 <_ZN9LoRaClass7receiveEi>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	0001e848 	.word	0x0001e848

080043b0 <_ZN9LoRaClass5beginEl>:

//LoRa Padrao
int LoRaClass::begin(long frequency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]

  if (_reset_pin != 65535) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8b1b      	ldrh	r3, [r3, #24]
 80043be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d015      	beq.n	80043f2 <_ZN9LoRaClass5beginEl+0x42>

    // perform reset
	HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_RESET);	//digitalWrite(_reset, LOW);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6958      	ldr	r0, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8b1b      	ldrh	r3, [r3, #24]
 80043ce:	2200      	movs	r2, #0
 80043d0:	4619      	mov	r1, r3
 80043d2:	f7fc fe65 	bl	80010a0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80043d6:	200a      	movs	r0, #10
 80043d8:	f7fc fb86 	bl	8000ae8 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_gpio_port, _reset_pin, GPIO_PIN_SET);		//digitalWrite(_reset, HIGH);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6958      	ldr	r0, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8b1b      	ldrh	r3, [r3, #24]
 80043e4:	2201      	movs	r2, #1
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7fc fe5a 	bl	80010a0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80043ec:	200a      	movs	r0, #10
 80043ee:	f7fc fb7b 	bl	8000ae8 <HAL_Delay>

  // start SPI
  //_spi->begin();

  // check version
  uint8_t version = readRegister(REG_VERSION);
 80043f2:	2142      	movs	r1, #66	; 0x42
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fd5c 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b12      	cmp	r3, #18
 8004402:	d001      	beq.n	8004408 <_ZN9LoRaClass5beginEl+0x58>
    return 0;
 8004404:	2300      	movs	r3, #0
 8004406:	e02b      	b.n	8004460 <_ZN9LoRaClass5beginEl+0xb0>
  }

  // put in sleep mode
  sleep();
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa19 	bl	8004840 <_ZN9LoRaClass5sleepEv>

  // set frequency
  setFrequency(frequency);
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fa77 	bl	8004904 <_ZN9LoRaClass12setFrequencyEl>

  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	210e      	movs	r1, #14
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fd7a 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	210f      	movs	r1, #15
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fd75 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 800442a:	210c      	movs	r1, #12
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fd40 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004432:	4603      	mov	r3, r0
 8004434:	f043 0303 	orr.w	r3, r3, #3
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	210c      	movs	r1, #12
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fd68 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8004444:	2204      	movs	r2, #4
 8004446:	2126      	movs	r1, #38	; 0x26
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fd63 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  // set output power to 17 dBm
  setTxPower(17);
 800444e:	2201      	movs	r2, #1
 8004450:	2111      	movs	r1, #17
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fa01 	bl	800485a <_ZN9LoRaClass10setTxPowerEii>

  // put in standby mode
  idle();
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f9e4 	bl	8004826 <_ZN9LoRaClass4idleEv>

  return 1;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <_ZN9LoRaClass11beginPacketEi>:
  //_spi->end();
}

//LATER
int LoRaClass::beginPacket(int implicitHeader)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  if (isTransmitting()) {
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f86a 	bl	800454c <_ZN9LoRaClass14isTransmittingEv>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <_ZN9LoRaClass11beginPacketEi+0x1a>
    return 0;
 800447e:	2300      	movs	r3, #0
 8004480:	e017      	b.n	80044b2 <_ZN9LoRaClass11beginPacketEi+0x4a>
  }

  // put in standby mode
  idle();
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9cf 	bl	8004826 <_ZN9LoRaClass4idleEv>

  if (implicitHeader) {
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <_ZN9LoRaClass11beginPacketEi+0x2e>
    implicitHeaderMode();
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fcb3 	bl	8004dfa <_ZN9LoRaClass18implicitHeaderModeEv>
 8004494:	e002      	b.n	800449c <_ZN9LoRaClass11beginPacketEi+0x34>
  } else {
    explicitHeaderMode();
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fc97 	bl	8004dca <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 800449c:	2200      	movs	r2, #0
 800449e:	210d      	movs	r1, #13
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fd37 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 80044a6:	2200      	movs	r2, #0
 80044a8:	2122      	movs	r1, #34	; 0x22
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fd32 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  return 1;
 80044b0:	2301      	movs	r3, #1
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZN9LoRaClass7delayUSEj>:

//NEW
void LoRaClass::delayUS(unsigned int us){
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
	_htim->Instance->CNT = 0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24
	while(_htim->Instance->CNT < us);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	bf8c      	ite	hi
 80044dc:	2301      	movhi	r3, #1
 80044de:	2300      	movls	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d000      	beq.n	80044e8 <_ZN9LoRaClass7delayUSEj+0x2e>
 80044e6:	e7f2      	b.n	80044ce <_ZN9LoRaClass7delayUSEj+0x14>
	return;
 80044e8:	bf00      	nop
}
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <_ZN9LoRaClass9endPacketEb>:

//writeRegister(), delayMicroseconds(), yield()
int LoRaClass::endPacket(bool async)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8004500:	2283      	movs	r2, #131	; 0x83
 8004502:	2101      	movs	r1, #1
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fd05 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  if (async) {
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <_ZN9LoRaClass9endPacketEb+0x26>
    // grace time is required for the radio
    delayUS(150);
 8004510:	2196      	movs	r1, #150	; 0x96
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ffd1 	bl	80044ba <_ZN9LoRaClass7delayUSEj>
 8004518:	e013      	b.n	8004542 <_ZN9LoRaClass9endPacketEb+0x4e>
  } else {
    // wait for TX done
    while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800451a:	2112      	movs	r1, #18
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fcc8 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d000      	beq.n	8004538 <_ZN9LoRaClass9endPacketEb+0x44>
 8004536:	e7f0      	b.n	800451a <_ZN9LoRaClass9endPacketEb+0x26>

      //yield();
    }
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8004538:	2208      	movs	r2, #8
 800453a:	2112      	movs	r1, #18
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fce9 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return 1;
 8004542:	2301      	movs	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_ZN9LoRaClass14isTransmittingEv>:

//readRegister(), writeRegister()
bool LoRaClass::isTransmitting()
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8004554:	2101      	movs	r1, #1
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fcab 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 800455c:	4603      	mov	r3, r0
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b03      	cmp	r3, #3
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <_ZN9LoRaClass14isTransmittingEv+0x28>
    return true;
 8004570:	2301      	movs	r3, #1
 8004572:	e013      	b.n	800459c <_ZN9LoRaClass14isTransmittingEv+0x50>
  }

  if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 8004574:	2112      	movs	r1, #18
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fc9b 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 800457c:	4603      	mov	r3, r0
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <_ZN9LoRaClass14isTransmittingEv+0x4e>
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8004590:	2208      	movs	r2, #8
 8004592:	2112      	movs	r1, #18
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fcbd 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return false;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZN9LoRaClass11parsePacketEi>:

//LATER
int LoRaClass::parsePacket(int size)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80045b2:	2112      	movs	r1, #18
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fc7c 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 80045ba:	4603      	mov	r3, r0
 80045bc:	60bb      	str	r3, [r7, #8]

  if (size > 0) {
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	dd0a      	ble.n	80045da <_ZN9LoRaClass11parsePacketEi+0x36>
    implicitHeaderMode();
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fc18 	bl	8004dfa <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	2122      	movs	r1, #34	; 0x22
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fc9e 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
 80045d8:	e002      	b.n	80045e0 <_ZN9LoRaClass11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fbf5 	bl	8004dca <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	2112      	movs	r1, #18
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fc93 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  if (!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK))) {
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <_ZN9LoRaClass11parsePacketEi+0x5e>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <_ZN9LoRaClass11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]

    // read packet length
    if (_implicitHeaderMode) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <_ZN9LoRaClass11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8004610:	2122      	movs	r1, #34	; 0x22
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fc4d 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004618:	4603      	mov	r3, r0
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e005      	b.n	800462a <_ZN9LoRaClass11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 800461e:	2113      	movs	r1, #19
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fc46 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004626:	4603      	mov	r3, r0
 8004628:	60fb      	str	r3, [r7, #12]
    }

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800462a:	2110      	movs	r1, #16
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fc40 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	210d      	movs	r1, #13
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fc6b 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

    // put in standby mode
    idle();
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8f1 	bl	8004826 <_ZN9LoRaClass4idleEv>
 8004644:	e015      	b.n	8004672 <_ZN9LoRaClass11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8004646:	2101      	movs	r1, #1
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fc32 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 800464e:	4603      	mov	r3, r0
 8004650:	2b86      	cmp	r3, #134	; 0x86
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <_ZN9LoRaClass11parsePacketEi+0xce>
    // not currently in RX mode

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 800465e:	2200      	movs	r2, #0
 8004660:	210d      	movs	r1, #13
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fc56 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8004668:	2286      	movs	r2, #134	; 0x86
 800466a:	2101      	movs	r1, #1
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fc51 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return packetLength;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZN9LoRaClass5writeEh>:
  return static_cast<long>(fError);
}

//readRegister(), writeRegister()
size_t LoRaClass::write(uint8_t byte)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3304      	adds	r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1cf9      	adds	r1, r7, #3
 8004692:	2201      	movs	r2, #1
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_ZN9LoRaClass5writeEPKhj>:

//readRegister(), writeRegister()
size_t LoRaClass::write(const uint8_t *buffer, size_t size)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80046ae:	2122      	movs	r1, #34	; 0x22
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fbfe 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 80046b6:	4603      	mov	r3, r0
 80046b8:	613b      	str	r3, [r7, #16]

  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	2bff      	cmp	r3, #255	; 0xff
 80046c2:	d903      	bls.n	80046cc <_ZN9LoRaClass5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80046ca:	607b      	str	r3, [r7, #4]
  }

  // write data
  for (size_t i = 0; i < size; i++) {
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d20c      	bcs.n	80046f2 <_ZN9LoRaClass5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	2100      	movs	r1, #0
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fc15 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e7ee      	b.n	80046d0 <_ZN9LoRaClass5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	2122      	movs	r1, #34	; 0x22
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fc06 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  return size;
 8004708:	687b      	ldr	r3, [r7, #4]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <_ZN9LoRaClass9availableEv>:

//readRegister()
int LoRaClass::available()
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800471a:	2113      	movs	r1, #19
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fbc8 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	1ad3      	subs	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <_ZN9LoRaClass4readEv>:

//readRegister(), available()
int LoRaClass::read()
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <_ZN9LoRaClass4readEv+0x2a>
    return -1;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	e009      	b.n	8004772 <_ZN9LoRaClass4readEv+0x3e>
  }

  _packetIndex++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	621a      	str	r2, [r3, #32]

  return readRegister(REG_FIFO);
 8004768:	2100      	movs	r1, #0
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fba1 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <_ZN9LoRaClass4peekEv>:

//writeRegister(), readRegister()
int LoRaClass::peek()
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3308      	adds	r3, #8
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <_ZN9LoRaClass4peekEv+0x2a>
    return -1;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e013      	b.n	80047cc <_ZN9LoRaClass4peekEv+0x52>
  }

  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 80047a4:	210d      	movs	r1, #13
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fb83 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 80047ac:	4603      	mov	r3, r0
 80047ae:	60fb      	str	r3, [r7, #12]

  // read
  uint8_t b = readRegister(REG_FIFO);
 80047b0:	2100      	movs	r1, #0
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fb7d 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 80047b8:	4603      	mov	r3, r0
 80047ba:	72fb      	strb	r3, [r7, #11]

  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	210d      	movs	r1, #13
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fba5 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  return b;
 80047ca:	7afb      	ldrb	r3, [r7, #11]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZN9LoRaClass5flushEv>:

//DONE
void LoRaClass::flush()
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZN9LoRaClass7receiveEi>:
  }
}

//writeRegister(), explicitHeaderMode()
void LoRaClass::receive(int size)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dd0a      	ble.n	800480e <_ZN9LoRaClass7receiveEi+0x26>
    implicitHeaderMode();
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fafe 	bl	8004dfa <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	2122      	movs	r1, #34	; 0x22
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fb84 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
 800480c:	e002      	b.n	8004814 <_ZN9LoRaClass7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fadb 	bl	8004dca <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8004814:	2285      	movs	r2, #133	; 0x85
 8004816:	2101      	movs	r1, #1
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb7b 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <_ZN9LoRaClass4idleEv>:

//writeRegister()
void LoRaClass::idle()
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800482e:	2281      	movs	r2, #129	; 0x81
 8004830:	2101      	movs	r1, #1
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fb6e 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <_ZN9LoRaClass5sleepEv>:

//writeRegister()
void LoRaClass::sleep()
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8004848:	2280      	movs	r2, #128	; 0x80
 800484a:	2101      	movs	r1, #1
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb61 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <_ZN9LoRaClass10setTxPowerEii>:

//writeRegister()
void LoRaClass::setTxPower(int level, int outputPin)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d116      	bne.n	800489a <_ZN9LoRaClass10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	da02      	bge.n	8004878 <_ZN9LoRaClass10setTxPowerEii+0x1e>
      level = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	e004      	b.n	8004882 <_ZN9LoRaClass10setTxPowerEii+0x28>
    } else if (level > 14) {
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b0e      	cmp	r3, #14
 800487c:	dd01      	ble.n	8004882 <_ZN9LoRaClass10setTxPowerEii+0x28>
      level = 14;
 800487e:	230e      	movs	r3, #14
 8004880:	60bb      	str	r3, [r7, #8]
    }

    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	b25b      	sxtb	r3, r3
 8004886:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800488a:	b25b      	sxtb	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	2109      	movs	r1, #9
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fb3e 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
    }

    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8004898:	e030      	b.n	80048fc <_ZN9LoRaClass10setTxPowerEii+0xa2>
    if (level > 17) {
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b11      	cmp	r3, #17
 800489e:	dd11      	ble.n	80048c4 <_ZN9LoRaClass10setTxPowerEii+0x6a>
      if (level > 20) {
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b14      	cmp	r3, #20
 80048a4:	dd01      	ble.n	80048aa <_ZN9LoRaClass10setTxPowerEii+0x50>
        level = 20;
 80048a6:	2314      	movs	r3, #20
 80048a8:	60bb      	str	r3, [r7, #8]
      level -= 3;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3b03      	subs	r3, #3
 80048ae:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x87);
 80048b0:	2287      	movs	r2, #135	; 0x87
 80048b2:	214d      	movs	r1, #77	; 0x4d
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb2d 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(140);
 80048ba:	218c      	movs	r1, #140	; 0x8c
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa17 	bl	8004cf0 <_ZN9LoRaClass6setOCPEh>
 80048c2:	e00d      	b.n	80048e0 <_ZN9LoRaClass10setTxPowerEii+0x86>
      if (level < 2) {
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	dc01      	bgt.n	80048ce <_ZN9LoRaClass10setTxPowerEii+0x74>
        level = 2;
 80048ca:	2302      	movs	r3, #2
 80048cc:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x84);
 80048ce:	2284      	movs	r2, #132	; 0x84
 80048d0:	214d      	movs	r1, #77	; 0x4d
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fb1e 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
 80048d8:	2164      	movs	r1, #100	; 0x64
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fa08 	bl	8004cf0 <_ZN9LoRaClass6setOCPEh>
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	3b02      	subs	r3, #2
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	b25b      	sxtb	r3, r3
 80048ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	2109      	movs	r1, #9
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fb0c 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <_ZN9LoRaClass12setFrequencyEl>:

//writeRegister()
void LoRaClass::setFrequency(long frequency)
{
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	61da      	str	r2, [r3, #28]

  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800491a:	135e      	asrs	r6, r3, #13
 800491c:	04dd      	lsls	r5, r3, #19
 800491e:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <_ZN9LoRaClass12setFrequencyEl+0x84>)
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	4628      	mov	r0, r5
 8004926:	4631      	mov	r1, r6
 8004928:	f7fb feee 	bl	8000708 <__aeabi_uldivmod>
 800492c:	4603      	mov	r3, r0
 800492e:	460c      	mov	r4, r1
 8004930:	e9c7 3402 	strd	r3, r4, [r7, #8]

  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004934:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f04f 0400 	mov.w	r4, #0
 8004940:	0c0b      	lsrs	r3, r1, #16
 8004942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004946:	0c14      	lsrs	r4, r2, #16
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	2106      	movs	r1, #6
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fae0 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004954:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	f04f 0400 	mov.w	r4, #0
 8004960:	0a0b      	lsrs	r3, r1, #8
 8004962:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004966:	0a14      	lsrs	r4, r2, #8
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	2107      	movs	r1, #7
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fad0 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8004974:	7a3b      	ldrb	r3, [r7, #8]
 8004976:	461a      	mov	r2, r3
 8004978:	2108      	movs	r1, #8
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 faca 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004988:	01e84800 	.word	0x01e84800

0800498c <_ZN9LoRaClass18getSpreadingFactorEv>:

//readRegister()
int LoRaClass::getSpreadingFactor()
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  return readRegister(REG_MODEM_CONFIG_2) >> 4;
 8004994:	211e      	movs	r1, #30
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa8b 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 800499c:	4603      	mov	r3, r0
 800499e:	111b      	asrs	r3, r3, #4
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_ZN9LoRaClass18setSpreadingFactorEi>:

//writeRegister(), setLdoFlag(), readRegister()
void LoRaClass::setSpreadingFactor(int sf)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	dc02      	bgt.n	80049be <_ZN9LoRaClass18setSpreadingFactorEi+0x16>
    sf = 6;
 80049b8:	2306      	movs	r3, #6
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	e004      	b.n	80049c8 <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	dd01      	ble.n	80049c8 <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
    sf = 12;
 80049c4:	230c      	movs	r3, #12
 80049c6:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d10a      	bne.n	80049e4 <_ZN9LoRaClass18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 80049ce:	22c5      	movs	r2, #197	; 0xc5
 80049d0:	2131      	movs	r1, #49	; 0x31
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa9e 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 80049d8:	220c      	movs	r2, #12
 80049da:	2137      	movs	r1, #55	; 0x37
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa99 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
 80049e2:	e009      	b.n	80049f8 <_ZN9LoRaClass18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80049e4:	22c3      	movs	r2, #195	; 0xc3
 80049e6:	2131      	movs	r1, #49	; 0x31
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa93 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80049ee:	220a      	movs	r2, #10
 80049f0:	2137      	movs	r1, #55	; 0x37
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa8e 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  }

  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80049f8:	211e      	movs	r1, #30
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa59 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004a00:	4603      	mov	r3, r0
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	b25a      	sxtb	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	b25b      	sxtb	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	211e      	movs	r1, #30
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa7a 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f919 	bl	8004c58 <_ZN9LoRaClass10setLdoFlagEv>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <_ZN9LoRaClass18getSignalBandwidthEv>:

//readRegister()
long LoRaClass::getSignalBandwidth()
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint8_t bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
 8004a38:	211d      	movs	r1, #29
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa39 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004a40:	4603      	mov	r3, r0
 8004a42:	111b      	asrs	r3, r3, #4
 8004a44:	73fb      	strb	r3, [r7, #15]

  switch (bw) {
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d832      	bhi.n	8004ab2 <_ZN9LoRaClass18getSignalBandwidthEv+0x82>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <_ZN9LoRaClass18getSignalBandwidthEv+0x24>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a8f 	.word	0x08004a8f
 8004a64:	08004a95 	.word	0x08004a95
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aab 	.word	0x08004aab
 8004a78:	08004aaf 	.word	0x08004aaf
    case 0: return 7.8E3;
 8004a7c:	f641 6378 	movw	r3, #7800	; 0x1e78
 8004a80:	e019      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 1: return 10.4E3;
 8004a82:	f642 03a0 	movw	r3, #10400	; 0x28a0
 8004a86:	e016      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 2: return 15.6E3;
 8004a88:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 8004a8c:	e013      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 3: return 20.8E3;
 8004a8e:	f245 1340 	movw	r3, #20800	; 0x5140
 8004a92:	e010      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 4: return 31.25E3;
 8004a94:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004a98:	e00d      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 5: return 41.7E3;
 8004a9a:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 8004a9e:	e00a      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 6: return 62.5E3;
 8004aa0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004aa4:	e007      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 7: return 125E3;
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <_ZN9LoRaClass18getSignalBandwidthEv+0x90>)
 8004aa8:	e005      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 8: return 250E3;
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <_ZN9LoRaClass18getSignalBandwidthEv+0x94>)
 8004aac:	e003      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 9: return 500E3;
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <_ZN9LoRaClass18getSignalBandwidthEv+0x98>)
 8004ab0:	e001      	b.n	8004ab6 <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
  }

  return -1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	0001e848 	.word	0x0001e848
 8004ac4:	0003d090 	.word	0x0003d090
 8004ac8:	0007a120 	.word	0x0007a120
 8004acc:	00000000 	.word	0x00000000

08004ad0 <_ZN9LoRaClass18setSignalBandwidthEl>:

//writeRegister(), setLdoFlag()
void LoRaClass::setSignalBandwidth(long sbw)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  int bw;

  if (sbw <= 7.8E3) {
 8004ada:	6838      	ldr	r0, [r7, #0]
 8004adc:	f7fb fd22 	bl	8000524 <__aeabi_i2d>
 8004ae0:	a34b      	add	r3, pc, #300	; (adr r3, 8004c10 <_ZN9LoRaClass18setSignalBandwidthEl+0x140>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fdf1 	bl	80006cc <__aeabi_dcmple>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <_ZN9LoRaClass18setSignalBandwidthEl+0x26>
    bw = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e071      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 10.4E3) {
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f7fb fd14 	bl	8000524 <__aeabi_i2d>
 8004afc:	a346      	add	r3, pc, #280	; (adr r3, 8004c18 <_ZN9LoRaClass18setSignalBandwidthEl+0x148>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb fde3 	bl	80006cc <__aeabi_dcmple>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <_ZN9LoRaClass18setSignalBandwidthEl+0x42>
    bw = 1;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e063      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 15.6E3) {
 8004b12:	6838      	ldr	r0, [r7, #0]
 8004b14:	f7fb fd06 	bl	8000524 <__aeabi_i2d>
 8004b18:	a341      	add	r3, pc, #260	; (adr r3, 8004c20 <_ZN9LoRaClass18setSignalBandwidthEl+0x150>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fdd5 	bl	80006cc <__aeabi_dcmple>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <_ZN9LoRaClass18setSignalBandwidthEl+0x5e>
    bw = 2;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e055      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 20.8E3) {
 8004b2e:	6838      	ldr	r0, [r7, #0]
 8004b30:	f7fb fcf8 	bl	8000524 <__aeabi_i2d>
 8004b34:	a33c      	add	r3, pc, #240	; (adr r3, 8004c28 <_ZN9LoRaClass18setSignalBandwidthEl+0x158>)
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f7fb fdc7 	bl	80006cc <__aeabi_dcmple>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <_ZN9LoRaClass18setSignalBandwidthEl+0x7a>
    bw = 3;
 8004b44:	2303      	movs	r3, #3
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e047      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 31.25E3) {
 8004b4a:	6838      	ldr	r0, [r7, #0]
 8004b4c:	f7fb fcea 	bl	8000524 <__aeabi_i2d>
 8004b50:	a337      	add	r3, pc, #220	; (adr r3, 8004c30 <_ZN9LoRaClass18setSignalBandwidthEl+0x160>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fdb9 	bl	80006cc <__aeabi_dcmple>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <_ZN9LoRaClass18setSignalBandwidthEl+0x96>
    bw = 4;
 8004b60:	2304      	movs	r3, #4
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e039      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 41.7E3) {
 8004b66:	6838      	ldr	r0, [r7, #0]
 8004b68:	f7fb fcdc 	bl	8000524 <__aeabi_i2d>
 8004b6c:	a332      	add	r3, pc, #200	; (adr r3, 8004c38 <_ZN9LoRaClass18setSignalBandwidthEl+0x168>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fdab 	bl	80006cc <__aeabi_dcmple>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <_ZN9LoRaClass18setSignalBandwidthEl+0xb2>
    bw = 5;
 8004b7c:	2305      	movs	r3, #5
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e02b      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 62.5E3) {
 8004b82:	6838      	ldr	r0, [r7, #0]
 8004b84:	f7fb fcce 	bl	8000524 <__aeabi_i2d>
 8004b88:	a32d      	add	r3, pc, #180	; (adr r3, 8004c40 <_ZN9LoRaClass18setSignalBandwidthEl+0x170>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f7fb fd9d 	bl	80006cc <__aeabi_dcmple>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <_ZN9LoRaClass18setSignalBandwidthEl+0xce>
    bw = 6;
 8004b98:	2306      	movs	r3, #6
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e01d      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 125E3) {
 8004b9e:	6838      	ldr	r0, [r7, #0]
 8004ba0:	f7fb fcc0 	bl	8000524 <__aeabi_i2d>
 8004ba4:	a328      	add	r3, pc, #160	; (adr r3, 8004c48 <_ZN9LoRaClass18setSignalBandwidthEl+0x178>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fd8f 	bl	80006cc <__aeabi_dcmple>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <_ZN9LoRaClass18setSignalBandwidthEl+0xea>
    bw = 7;
 8004bb4:	2307      	movs	r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e00f      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else if (sbw <= 250E3) {
 8004bba:	6838      	ldr	r0, [r7, #0]
 8004bbc:	f7fb fcb2 	bl	8000524 <__aeabi_i2d>
 8004bc0:	a323      	add	r3, pc, #140	; (adr r3, 8004c50 <_ZN9LoRaClass18setSignalBandwidthEl+0x180>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fd81 	bl	80006cc <__aeabi_dcmple>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <_ZN9LoRaClass18setSignalBandwidthEl+0x106>
    bw = 8;
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e001      	b.n	8004bda <_ZN9LoRaClass18setSignalBandwidthEl+0x10a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8004bd6:	2309      	movs	r3, #9
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8004bda:	211d      	movs	r1, #29
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f968 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004be2:	4603      	mov	r3, r0
 8004be4:	b25b      	sxtb	r3, r3
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	b25a      	sxtb	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	211d      	movs	r1, #29
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f989 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f828 	bl	8004c58 <_ZN9LoRaClass10setLdoFlagEv>
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	00000000 	.word	0x00000000
 8004c14:	40be7800 	.word	0x40be7800
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	40c45000 	.word	0x40c45000
 8004c20:	00000000 	.word	0x00000000
 8004c24:	40ce7800 	.word	0x40ce7800
 8004c28:	00000000 	.word	0x00000000
 8004c2c:	40d45000 	.word	0x40d45000
 8004c30:	00000000 	.word	0x00000000
 8004c34:	40de8480 	.word	0x40de8480
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	40e45c80 	.word	0x40e45c80
 8004c40:	00000000 	.word	0x00000000
 8004c44:	40ee8480 	.word	0x40ee8480
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	40fe8480 	.word	0x40fe8480
 8004c50:	00000000 	.word	0x00000000
 8004c54:	410e8480 	.word	0x410e8480

08004c58 <_ZN9LoRaClass10setLdoFlagEv>:

//writeRegister(), readRegister(), getSignalBandwidth(), getSpreadingFactor(), bitWrite()
void LoRaClass::setLdoFlag()
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  // Section 4.1.1.5
  long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fee5 	bl	8004a30 <_ZN9LoRaClass18getSignalBandwidthEv>
 8004c66:	4604      	mov	r4, r0
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fe8f 	bl	800498c <_ZN9LoRaClass18getSpreadingFactorEv>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	2301      	movs	r3, #1
 8004c72:	4093      	lsls	r3, r2
 8004c74:	fb94 f3f3 	sdiv	r3, r4, r3
 8004c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c80:	613b      	str	r3, [r7, #16]

  // Section 4.1.1.6
  bool ldoOn = symbolDuration > 16;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	bfcc      	ite	gt
 8004c88:	2301      	movgt	r3, #1
 8004c8a:	2300      	movle	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]

  uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
 8004c8e:	2126      	movs	r1, #38	; 0x26
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f90e 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]

  //bitWrite(config3, 3, ldoOn);
  //NEW
  if(ldoOn == true){
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <_ZN9LoRaClass10setLdoFlagEv+0x52>
	  config3 ^= 0b00001000;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	f083 0308 	eor.w	r3, r3, #8
 8004ca6:	75fb      	strb	r3, [r7, #23]
 8004ca8:	e003      	b.n	8004cb2 <_ZN9LoRaClass10setLdoFlagEv+0x5a>
  }
  else{
	  config3 &= 0b11110111;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	f023 0308 	bic.w	r3, r3, #8
 8004cb0:	75fb      	strb	r3, [r7, #23]
  }

  writeRegister(REG_MODEM_CONFIG_3, config3);
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2126      	movs	r1, #38	; 0x26
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f92b 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd90      	pop	{r4, r7, pc}

08004cc6 <_ZN9LoRaClass9enableCrcEv>:
  writeRegister(REG_SYNC_WORD, sw);
}

//writeRegister()
void LoRaClass::enableCrc()
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8004cce:	211e      	movs	r1, #30
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8ee 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f043 0304 	orr.w	r3, r3, #4
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	211e      	movs	r1, #30
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f916 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <_ZN9LoRaClass6setOCPEh>:
  writeRegister(REG_INVERTIQ2, 0x1d);
}

//writeRegister()
void LoRaClass::setOCP(uint8_t mA)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8004cfc:	231b      	movs	r3, #27
 8004cfe:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	2b78      	cmp	r3, #120	; 0x78
 8004d04:	d809      	bhi.n	8004d1a <_ZN9LoRaClass6setOCPEh+0x2a>
    ocpTrim = (mA - 45) / 5;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	3b2d      	subs	r3, #45	; 0x2d
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <_ZN9LoRaClass6setOCPEh+0x64>)
 8004d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8004d10:	1052      	asrs	r2, r2, #1
 8004d12:	17db      	asrs	r3, r3, #31
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e00b      	b.n	8004d32 <_ZN9LoRaClass6setOCPEh+0x42>
  } else if (mA <=240) {
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2bf0      	cmp	r3, #240	; 0xf0
 8004d1e:	d808      	bhi.n	8004d32 <_ZN9LoRaClass6setOCPEh+0x42>
    ocpTrim = (mA + 30) / 10;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	331e      	adds	r3, #30
 8004d24:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <_ZN9LoRaClass6setOCPEh+0x64>)
 8004d26:	fb82 1203 	smull	r1, r2, r2, r3
 8004d2a:	1092      	asrs	r2, r2, #2
 8004d2c:	17db      	asrs	r3, r3, #31
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	73fb      	strb	r3, [r7, #15]
  }

  writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	210b      	movs	r1, #11
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8e5 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	66666667 	.word	0x66666667

08004d58 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>:
  return readRegister(REG_RSSI_WIDEBAND);
}

//internal setting
void LoRaClass::setPins(GPIO_TypeDef * nss_gpio_port, uint16_t nss_pin, GPIO_TypeDef * reset_gpio_port, uint16_t reset_pin, IRQn_Type dio0_IRQ)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
	_nss_gpio_port = nss_gpio_port;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
	_nss_pin = nss_pin,
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	821a      	strh	r2, [r3, #16]
	_reset_gpio_port = reset_gpio_port;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	615a      	str	r2, [r3, #20]
	_reset_pin = reset_pin;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8b3a      	ldrh	r2, [r7, #24]
 8004d7e:	831a      	strh	r2, [r3, #24]
	_dio0_IRQ = dio0_IRQ;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	7f3a      	ldrb	r2, [r7, #28]
 8004d84:	769a      	strb	r2, [r3, #26]
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>:

//internal setting
void LoRaClass::setSPI(SPI_HandleTypeDef* hspi)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  _hspi = hspi;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	605a      	str	r2, [r3, #4]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>:

//NEW
void LoRaClass::setTIM(TIM_HandleTypeDef* htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  _htim = htim;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZN9LoRaClass18explicitHeaderModeEv>:
  }
}

//writeRegister()
void LoRaClass::explicitHeaderMode()
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8004dd8:	211d      	movs	r1, #29
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f869 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	211d      	movs	r1, #29
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f891 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <_ZN9LoRaClass18implicitHeaderModeEv>:

//writeRegister()
void LoRaClass::implicitHeaderMode()
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8004e08:	211d      	movs	r1, #29
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f851 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	211d      	movs	r1, #29
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f879 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <_ZN9LoRaClass14handleDio0RiseEv>:

//readRegister(), writeRegister(), _onReceive
void LoRaClass::handleDio0Rise()
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8004e32:	2112      	movs	r1, #18
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f83c 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	2112      	movs	r1, #18
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f864 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

  if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d129      	bne.n	8004eaa <_ZN9LoRaClass14handleDio0RiseEv+0x80>
    // received a packet
    _packetIndex = 0;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	621a      	str	r2, [r3, #32]

    // read packet length
    int packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <_ZN9LoRaClass14handleDio0RiseEv+0x46>
 8004e64:	2122      	movs	r1, #34	; 0x22
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f823 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	e004      	b.n	8004e7a <_ZN9LoRaClass14handleDio0RiseEv+0x50>
 8004e70:	2113      	movs	r1, #19
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f81d 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	60bb      	str	r3, [r7, #8]

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8004e7c:	2110      	movs	r1, #16
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f817 	bl	8004eb2 <_ZN9LoRaClass12readRegisterEh>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	210d      	movs	r1, #13
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f842 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>

    if (_onReceive) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <_ZN9LoRaClass14handleDio0RiseEv+0x76>
      _onReceive(packetLength);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	68b8      	ldr	r0, [r7, #8]
 8004e9e:	4798      	blx	r3
    }

    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	210d      	movs	r1, #13
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f835 	bl	8004f14 <_ZN9LoRaClass13writeRegisterEhh>
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <_ZN9LoRaClass12readRegisterEh>:

//NEW
uint8_t LoRaClass::readRegister(uint8_t address)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	70fb      	strb	r3, [r7, #3]
  //return singleTransfer(address & 0x7f, 0x00);
	uint8_t value = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
	address = address & 0x7f;
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68d8      	ldr	r0, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8a1b      	ldrh	r3, [r3, #16]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f7fc f8e2 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, &address, 1, 100);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6858      	ldr	r0, [r3, #4]
 8004ee0:	1cf9      	adds	r1, r7, #3
 8004ee2:	2364      	movs	r3, #100	; 0x64
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f7fd fc5d 	bl	80027a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive (_hspi, &value, 1, 100);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6858      	ldr	r0, [r3, #4]
 8004eee:	f107 010f 	add.w	r1, r7, #15
 8004ef2:	2364      	movs	r3, #100	; 0x64
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f7fd fdbb 	bl	8002a70 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68d8      	ldr	r0, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8a1b      	ldrh	r3, [r3, #16]
 8004f02:	2201      	movs	r2, #1
 8004f04:	4619      	mov	r1, r3
 8004f06:	f7fc f8cb 	bl	80010a0 <HAL_GPIO_WritePin>
	return value;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZN9LoRaClass13writeRegisterEhh>:

//NEW
void LoRaClass::writeRegister(uint8_t address, uint8_t value)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
 8004f20:	4613      	mov	r3, r2
 8004f22:	70bb      	strb	r3, [r7, #2]
  //singleTransfer(address | 0x80, value);
	uint8_t MOSIBuffer[2];
	MOSIBuffer[0] = address | 0x80;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	733b      	strb	r3, [r7, #12]
	MOSIBuffer[1] = value;
 8004f2e:	78bb      	ldrb	r3, [r7, #2]
 8004f30:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_RESET);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68d8      	ldr	r0, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8a1b      	ldrh	r3, [r3, #16]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7fc f8af 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (_hspi, MOSIBuffer, 2, 100);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6858      	ldr	r0, [r3, #4]
 8004f46:	f107 010c 	add.w	r1, r7, #12
 8004f4a:	2364      	movs	r3, #100	; 0x64
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f7fd fc29 	bl	80027a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_nss_gpio_port, _nss_pin, GPIO_PIN_SET);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68d8      	ldr	r0, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8a1b      	ldrh	r3, [r3, #16]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7fc f89f 	bl	80010a0 <HAL_GPIO_WritePin>
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_ZN9LoRaClass10onDio0RiseEv>:
  return response;
}

//handleDio0Rise()
void LoRaClass::onDio0Rise()
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  handleDio0Rise();
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff ff59 	bl	8004e2a <_ZN9LoRaClass14handleDio0RiseEv>
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <_ZN9LoRaClass5printEPKc>:

/**
 * print methods
 */
size_t LoRaClass::print(const char str[])
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  return write(str);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff f958 	bl	8004242 <_ZN9LoRaClass5writeEPKc>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <_ZN9LoRaClass5printEc>:

size_t LoRaClass::print(char c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
 8004fb6:	4603      	mov	r3, r0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <_ZN9LoRaClass5printEli>:
{
  return print((unsigned long) n, base);
}

size_t LoRaClass::print(long n, int base)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <_ZN9LoRaClass5printEli+0x26>
    return write(n);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	4798      	blx	r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	e028      	b.n	8005038 <_ZN9LoRaClass5printEli+0x78>
  } else if (base == 10) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b0a      	cmp	r3, #10
 8004fea:	d11d      	bne.n	8005028 <_ZN9LoRaClass5printEli+0x68>
    if (n < 0) {
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	da12      	bge.n	8005018 <_ZN9LoRaClass5printEli+0x58>
      int t = print('-');
 8004ff2:	212d      	movs	r1, #45	; 0x2d
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ffd1 	bl	8004f9c <_ZN9LoRaClass5printEc>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	617b      	str	r3, [r7, #20]
      n = -n;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	425b      	negs	r3, r3
 8005002:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	220a      	movs	r2, #10
 8005008:	4619      	mov	r1, r3
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f818 	bl	8005040 <_ZN9LoRaClass11printNumberEmh>
 8005010:	4602      	mov	r2, r0
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	4413      	add	r3, r2
 8005016:	e00f      	b.n	8005038 <_ZN9LoRaClass5printEli+0x78>
    }
    return printNumber(n, 10);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	220a      	movs	r2, #10
 800501c:	4619      	mov	r1, r3
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f80e 	bl	8005040 <_ZN9LoRaClass11printNumberEmh>
 8005024:	4603      	mov	r3, r0
 8005026:	e007      	b.n	8005038 <_ZN9LoRaClass5printEli+0x78>
  } else {
    return printNumber(n, base);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	4619      	mov	r1, r3
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f805 	bl	8005040 <_ZN9LoRaClass11printNumberEmh>
 8005036:	4603      	mov	r3, r0
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZN9LoRaClass11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t LoRaClass::printNumber(unsigned long n, uint8_t base)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	; 0x38
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800504e:	f107 0310 	add.w	r3, r7, #16
 8005052:	3320      	adds	r3, #32
 8005054:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d801      	bhi.n	8005066 <_ZN9LoRaClass11printNumberEmh+0x26>
 8005062:	230a      	movs	r3, #10
 8005064:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
 8005066:	79fa      	ldrb	r2, [r7, #7]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	fbb3 f1f2 	udiv	r1, r3, r2
 800506e:	fb02 f201 	mul.w	r2, r2, r1
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8005082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005086:	2b09      	cmp	r3, #9
 8005088:	d804      	bhi.n	8005094 <_ZN9LoRaClass11printNumberEmh+0x54>
 800508a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800508e:	3330      	adds	r3, #48	; 0x30
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e003      	b.n	800509c <_ZN9LoRaClass11printNumberEmh+0x5c>
 8005094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005098:	3337      	adds	r3, #55	; 0x37
 800509a:	b2db      	uxtb	r3, r3
 800509c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800509e:	3a01      	subs	r2, #1
 80050a0:	637a      	str	r2, [r7, #52]	; 0x34
 80050a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a4:	7013      	strb	r3, [r2, #0]
  } while(n);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d000      	beq.n	80050ae <_ZN9LoRaClass11printNumberEmh+0x6e>
  do {
 80050ac:	e7db      	b.n	8005066 <_ZN9LoRaClass11printNumberEmh+0x26>

  return write(str);
 80050ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff f8c6 	bl	8004242 <_ZN9LoRaClass5writeEPKc>
 80050b6:	4603      	mov	r3, r0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3738      	adds	r7, #56	; 0x38
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050c6:	f7fb fc9f 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050ca:	f000 f923 	bl	8005314 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050ce:	f000 fa7f 	bl	80055d0 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 80050d2:	f000 f9a9 	bl	8005428 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80050d6:	f000 f9e9 	bl	80054ac <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80050da:	f000 fa45 	bl	8005568 <_ZL19MX_USART2_UART_Initv>
  // Falta verificar como a interupcao (DIO0) funciona
  // O receptor do lora nao foi testado no stm
  // Adicionar pinos de reset

  //Inicializacao RX
  loraRX.setPins(SS_COMM_RX_GPIO_Port, SS_COMM_RX_Pin, RESET_COMM_RX_GPIO_Port, RESET_COMM_RX_Pin, EXTI15_10_IRQn);
 80050de:	2328      	movs	r3, #40	; 0x28
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4b74      	ldr	r3, [pc, #464]	; (80052bc <main+0x1fc>)
 80050ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050ee:	4973      	ldr	r1, [pc, #460]	; (80052bc <main+0x1fc>)
 80050f0:	4873      	ldr	r0, [pc, #460]	; (80052c0 <main+0x200>)
 80050f2:	f7ff fe31 	bl	8004d58 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
  loraRX.setSPI(&hspi2);
 80050f6:	4973      	ldr	r1, [pc, #460]	; (80052c4 <main+0x204>)
 80050f8:	4871      	ldr	r0, [pc, #452]	; (80052c0 <main+0x200>)
 80050fa:	f7ff fe4a 	bl	8004d92 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
  loraRX.setTIM(&htim3);
 80050fe:	4972      	ldr	r1, [pc, #456]	; (80052c8 <main+0x208>)
 8005100:	486f      	ldr	r0, [pc, #444]	; (80052c0 <main+0x200>)
 8005102:	f7ff fe54 	bl	8004dae <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

  if (!loraRX.begin(433.123E6)) {
 8005106:	4971      	ldr	r1, [pc, #452]	; (80052cc <main+0x20c>)
 8005108:	486d      	ldr	r0, [pc, #436]	; (80052c0 <main+0x200>)
 800510a:	f7ff f951 	bl	80043b0 <_ZN9LoRaClass5beginEl>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d000      	beq.n	8005120 <main+0x60>
   	  //printf("Starting LoRa RX failed!\n");
	  //memcpy(consoleData, "Starting LoRa RX failed!\n", 26);
	  //HAL_UART_Transmit(&huart2, consoleData, 26, 100);
   	  while (1);
 800511e:	e7fe      	b.n	800511e <main+0x5e>
  }

  loraRX.setSignalBandwidth(125E3);
 8005120:	496b      	ldr	r1, [pc, #428]	; (80052d0 <main+0x210>)
 8005122:	4867      	ldr	r0, [pc, #412]	; (80052c0 <main+0x200>)
 8005124:	f7ff fcd4 	bl	8004ad0 <_ZN9LoRaClass18setSignalBandwidthEl>
  loraRX.setSpreadingFactor(11);
 8005128:	210b      	movs	r1, #11
 800512a:	4865      	ldr	r0, [pc, #404]	; (80052c0 <main+0x200>)
 800512c:	f7ff fc3c 	bl	80049a8 <_ZN9LoRaClass18setSpreadingFactorEi>
  loraRX.enableCrc();
 8005130:	4863      	ldr	r0, [pc, #396]	; (80052c0 <main+0x200>)
 8005132:	f7ff fdc8 	bl	8004cc6 <_ZN9LoRaClass9enableCrcEv>
  loraRX.receive();
 8005136:	2100      	movs	r1, #0
 8005138:	4861      	ldr	r0, [pc, #388]	; (80052c0 <main+0x200>)
 800513a:	f7ff fb55 	bl	80047e8 <_ZN9LoRaClass7receiveEi>
  //printf("LoRa RX started\n");
  //memcpy(consoleData, "LoRa RX started\n", 17);
  //HAL_UART_Transmit(&huart2, consoleData, 17, 100);

  //Inicializacao TX
  loraTX.setPins(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin, EXTI9_5_IRQn);
 800513e:	2317      	movs	r3, #23
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4b62      	ldr	r3, [pc, #392]	; (80052d4 <main+0x214>)
 800514a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800514e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8005152:	4861      	ldr	r0, [pc, #388]	; (80052d8 <main+0x218>)
 8005154:	f7ff fe00 	bl	8004d58 <_ZN9LoRaClass7setPinsEP12GPIO_TypeDeftS1_t9IRQn_Type>
  loraTX.setSPI(&hspi2);
 8005158:	495a      	ldr	r1, [pc, #360]	; (80052c4 <main+0x204>)
 800515a:	485f      	ldr	r0, [pc, #380]	; (80052d8 <main+0x218>)
 800515c:	f7ff fe19 	bl	8004d92 <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDef>
  loraTX.setTIM(&htim3);
 8005160:	4959      	ldr	r1, [pc, #356]	; (80052c8 <main+0x208>)
 8005162:	485d      	ldr	r0, [pc, #372]	; (80052d8 <main+0x218>)
 8005164:	f7ff fe23 	bl	8004dae <_ZN9LoRaClass6setTIMEP17TIM_HandleTypeDef>

  if (!loraTX.begin(433.123E6)) {
 8005168:	4958      	ldr	r1, [pc, #352]	; (80052cc <main+0x20c>)
 800516a:	485b      	ldr	r0, [pc, #364]	; (80052d8 <main+0x218>)
 800516c:	f7ff f920 	bl	80043b0 <_ZN9LoRaClass5beginEl>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <main+0xc8>
     printf("Starting LoRa RX failed!\n");
 8005180:	4856      	ldr	r0, [pc, #344]	; (80052dc <main+0x21c>)
 8005182:	f000 fddf 	bl	8005d44 <puts>
     while (1);
 8005186:	e7fe      	b.n	8005186 <main+0xc6>
  }
  loraTX.setTxPower(20, 1);
 8005188:	2201      	movs	r2, #1
 800518a:	2114      	movs	r1, #20
 800518c:	4852      	ldr	r0, [pc, #328]	; (80052d8 <main+0x218>)
 800518e:	f7ff fb64 	bl	800485a <_ZN9LoRaClass10setTxPowerEii>
  loraTX.setSignalBandwidth(125E3);
 8005192:	494f      	ldr	r1, [pc, #316]	; (80052d0 <main+0x210>)
 8005194:	4850      	ldr	r0, [pc, #320]	; (80052d8 <main+0x218>)
 8005196:	f7ff fc9b 	bl	8004ad0 <_ZN9LoRaClass18setSignalBandwidthEl>
  loraTX.setSpreadingFactor(11);
 800519a:	210b      	movs	r1, #11
 800519c:	484e      	ldr	r0, [pc, #312]	; (80052d8 <main+0x218>)
 800519e:	f7ff fc03 	bl	80049a8 <_ZN9LoRaClass18setSpreadingFactorEi>
  loraTX.enableCrc();
 80051a2:	484d      	ldr	r0, [pc, #308]	; (80052d8 <main+0x218>)
 80051a4:	f7ff fd8f 	bl	8004cc6 <_ZN9LoRaClass9enableCrcEv>
  printf("LoRa TX started\n");
 80051a8:	484d      	ldr	r0, [pc, #308]	; (80052e0 <main+0x220>)
 80051aa:	f000 fdcb 	bl	8005d44 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Testes com funcoes proprias
	  uint8_t teste[32] = "Teste";
 80051ae:	4a4d      	ldr	r2, [pc, #308]	; (80052e4 <main+0x224>)
 80051b0:	463b      	mov	r3, r7
 80051b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051b6:	6018      	str	r0, [r3, #0]
 80051b8:	3304      	adds	r3, #4
 80051ba:	8019      	strh	r1, [r3, #0]
 80051bc:	1dbb      	adds	r3, r7, #6
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	609a      	str	r2, [r3, #8]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	611a      	str	r2, [r3, #16]
 80051ca:	615a      	str	r2, [r3, #20]
 80051cc:	831a      	strh	r2, [r3, #24]
	  loraTX.sendPacket(teste, sizeof(teste));
 80051ce:	463b      	mov	r3, r7
 80051d0:	2220      	movs	r2, #32
 80051d2:	4619      	mov	r1, r3
 80051d4:	4840      	ldr	r0, [pc, #256]	; (80052d8 <main+0x218>)
 80051d6:	f7ff f86b 	bl	80042b0 <_ZN9LoRaClass10sendPacketEPvj>
	  loraRX.readPacket(RxData, sizeof(RxData));
 80051da:	2280      	movs	r2, #128	; 0x80
 80051dc:	4942      	ldr	r1, [pc, #264]	; (80052e8 <main+0x228>)
 80051de:	4838      	ldr	r0, [pc, #224]	; (80052c0 <main+0x200>)
 80051e0:	f7ff f88b 	bl	80042fa <_ZN9LoRaClass10readPacketEPvj>

	  t1.a = counter;
 80051e4:	4b41      	ldr	r3, [pc, #260]	; (80052ec <main+0x22c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <main+0x230>)
 80051ec:	601a      	str	r2, [r3, #0]
	  t1.b = -75;
 80051ee:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <main+0x230>)
 80051f0:	f06f 024a 	mvn.w	r2, #74	; 0x4a
 80051f4:	605a      	str	r2, [r3, #4]
	  t1.c = '#';
 80051f6:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <main+0x230>)
 80051f8:	2223      	movs	r2, #35	; 0x23
 80051fa:	721a      	strb	r2, [r3, #8]
	  t1.d = 128;
 80051fc:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <main+0x230>)
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	725a      	strb	r2, [r3, #9]
	  t1.e = RxData;
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <main+0x230>)
 8005204:	4a38      	ldr	r2, [pc, #224]	; (80052e8 <main+0x228>)
 8005206:	60da      	str	r2, [r3, #12]

	  loraTX.sendPacket(&t1, sizeof(t1));
 8005208:	2210      	movs	r2, #16
 800520a:	4939      	ldr	r1, [pc, #228]	; (80052f0 <main+0x230>)
 800520c:	4832      	ldr	r0, [pc, #200]	; (80052d8 <main+0x218>)
 800520e:	f7ff f84f 	bl	80042b0 <_ZN9LoRaClass10sendPacketEPvj>
	  loraRX.readPacket(&t2, sizeof(t2));
 8005212:	2210      	movs	r2, #16
 8005214:	4937      	ldr	r1, [pc, #220]	; (80052f4 <main+0x234>)
 8005216:	482a      	ldr	r0, [pc, #168]	; (80052c0 <main+0x200>)
 8005218:	f7ff f86f 	bl	80042fa <_ZN9LoRaClass10readPacketEPvj>

	  //Transmissao de pacote
	  printf("Sending packet: %d\n", counter);
 800521c:	4b33      	ldr	r3, [pc, #204]	; (80052ec <main+0x22c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4835      	ldr	r0, [pc, #212]	; (80052f8 <main+0x238>)
 8005224:	f000 fd1a 	bl	8005c5c <iprintf>

	  // send packet
	  loraTX.beginPacket();
 8005228:	2100      	movs	r1, #0
 800522a:	482b      	ldr	r0, [pc, #172]	; (80052d8 <main+0x218>)
 800522c:	f7ff f91c 	bl	8004468 <_ZN9LoRaClass11beginPacketEi>
	  loraTX.print("alo ");
 8005230:	4932      	ldr	r1, [pc, #200]	; (80052fc <main+0x23c>)
 8005232:	4829      	ldr	r0, [pc, #164]	; (80052d8 <main+0x218>)
 8005234:	f7ff fea4 	bl	8004f80 <_ZN9LoRaClass5printEPKc>
	  loraTX.print(counter);
 8005238:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <main+0x22c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	220a      	movs	r2, #10
 800523e:	4619      	mov	r1, r3
 8005240:	4825      	ldr	r0, [pc, #148]	; (80052d8 <main+0x218>)
 8005242:	f7ff febd 	bl	8004fc0 <_ZN9LoRaClass5printEli>
	  loraTX.print("\n");
 8005246:	492e      	ldr	r1, [pc, #184]	; (8005300 <main+0x240>)
 8005248:	4823      	ldr	r0, [pc, #140]	; (80052d8 <main+0x218>)
 800524a:	f7ff fe99 	bl	8004f80 <_ZN9LoRaClass5printEPKc>
	  loraTX.print("LF working");
 800524e:	492d      	ldr	r1, [pc, #180]	; (8005304 <main+0x244>)
 8005250:	4821      	ldr	r0, [pc, #132]	; (80052d8 <main+0x218>)
 8005252:	f7ff fe95 	bl	8004f80 <_ZN9LoRaClass5printEPKc>
	  loraTX.endPacket();
 8005256:	2100      	movs	r1, #0
 8005258:	481f      	ldr	r0, [pc, #124]	; (80052d8 <main+0x218>)
 800525a:	f7ff f94b 	bl	80044f4 <_ZN9LoRaClass9endPacketEb>

	  counter++;
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <main+0x22c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a21      	ldr	r2, [pc, #132]	; (80052ec <main+0x22c>)
 8005266:	6013      	str	r3, [r2, #0]

	  //Recepcao de pacote
	  packetSize = loraRX.parsePacket();
 8005268:	2100      	movs	r1, #0
 800526a:	4815      	ldr	r0, [pc, #84]	; (80052c0 <main+0x200>)
 800526c:	f7ff f99a 	bl	80045a4 <_ZN9LoRaClass11parsePacketEi>
 8005270:	4602      	mov	r2, r0
 8005272:	4b25      	ldr	r3, [pc, #148]	; (8005308 <main+0x248>)
 8005274:	601a      	str	r2, [r3, #0]

	  if (packetSize) {
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <main+0x248>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <main+0x1c4>
	  	printf("Recieved LoRa Packet:\n");
 800527e:	4823      	ldr	r0, [pc, #140]	; (800530c <main+0x24c>)
 8005280:	f000 fd60 	bl	8005d44 <puts>
	  }

	  while (loraRX.available()) {
 8005284:	480e      	ldr	r0, [pc, #56]	; (80052c0 <main+0x200>)
 8005286:	f7ff fa44 	bl	8004712 <_ZN9LoRaClass9availableEv>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <main+0x1f2>
	  	//printf("%c", (char)loraRX.read());
		RxData[RxDataLength++] = (char)loraRX.read();
 800529a:	4809      	ldr	r0, [pc, #36]	; (80052c0 <main+0x200>)
 800529c:	f7ff fa4a 	bl	8004734 <_ZN9LoRaClass4readEv>
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <main+0x250>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	491a      	ldr	r1, [pc, #104]	; (8005310 <main+0x250>)
 80052a8:	600a      	str	r2, [r1, #0]
 80052aa:	b2c1      	uxtb	r1, r0
 80052ac:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <main+0x228>)
 80052ae:	54d1      	strb	r1, [r2, r3]
	  while (loraRX.available()) {
 80052b0:	e7e8      	b.n	8005284 <main+0x1c4>
	  }
	  HAL_Delay(1500);
 80052b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052b6:	f7fb fc17 	bl	8000ae8 <HAL_Delay>
  }
 80052ba:	e778      	b.n	80051ae <main+0xee>
 80052bc:	48000400 	.word	0x48000400
 80052c0:	200001b0 	.word	0x200001b0
 80052c4:	2000008c 	.word	0x2000008c
 80052c8:	200000f0 	.word	0x200000f0
 80052cc:	19d0eeb8 	.word	0x19d0eeb8
 80052d0:	0001e848 	.word	0x0001e848
 80052d4:	48000800 	.word	0x48000800
 80052d8:	200001dc 	.word	0x200001dc
 80052dc:	08006b04 	.word	0x08006b04
 80052e0:	08006b20 	.word	0x08006b20
 80052e4:	08006b74 	.word	0x08006b74
 80052e8:	20000210 	.word	0x20000210
 80052ec:	2000020c 	.word	0x2000020c
 80052f0:	20000294 	.word	0x20000294
 80052f4:	200002a4 	.word	0x200002a4
 80052f8:	08006b30 	.word	0x08006b30
 80052fc:	08006b44 	.word	0x08006b44
 8005300:	08006b4c 	.word	0x08006b4c
 8005304:	08006b50 	.word	0x08006b50
 8005308:	20000208 	.word	0x20000208
 800530c:	08006b5c 	.word	0x08006b5c
 8005310:	20000290 	.word	0x20000290

08005314 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b0b8      	sub	sp, #224	; 0xe0
 8005318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800531a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800531e:	2244      	movs	r2, #68	; 0x44
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc92 	bl	8005c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005328:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005338:	463b      	mov	r3, r7
 800533a:	2288      	movs	r2, #136	; 0x88
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fc84 	bl	8005c4c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005344:	2302      	movs	r3, #2
 8005346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800534a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800534e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005352:	2310      	movs	r3, #16
 8005354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005358:	2302      	movs	r3, #2
 800535a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800535e:	2302      	movs	r3, #2
 8005360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005364:	2301      	movs	r3, #1
 8005366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800536a:	230a      	movs	r3, #10
 800536c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005370:	2307      	movs	r3, #7
 8005372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005376:	2302      	movs	r3, #2
 8005378:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800537c:	2302      	movs	r3, #2
 800537e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb ff1e 	bl	80011c8 <HAL_RCC_OscConfig>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800539c:	f000 f9e0 	bl	8005760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053a0:	230f      	movs	r3, #15
 80053a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053a6:	2303      	movs	r3, #3
 80053a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80053be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80053c2:	2104      	movs	r1, #4
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fc faaf 	bl	8001928 <HAL_RCC_ClockConfig>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80053da:	f000 f9c1 	bl	8005760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80053de:	2302      	movs	r3, #2
 80053e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053e6:	463b      	mov	r3, r7
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fc fca1 	bl	8001d30 <HAL_RCCEx_PeriphCLKConfig>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80053fe:	f000 f9af 	bl	8005760 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005406:	f7fb fe89 	bl	800111c <HAL_PWREx_ControlVoltageScaling>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 800541a:	f000 f9a1 	bl	8005760 <Error_Handler>
  }
}
 800541e:	bf00      	nop
 8005420:	37e0      	adds	r7, #224	; 0xe0
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 800542e:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <_ZL12MX_SPI2_Initv+0x80>)
 8005430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800543a:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 800543c:	2200      	movs	r2, #0
 800543e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005440:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005442:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005446:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005448:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 800544a:	2200      	movs	r2, #0
 800544c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005450:	2200      	movs	r2, #0
 8005452:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 800545e:	2220      	movs	r2, #32
 8005460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005464:	2200      	movs	r2, #0
 8005466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 800546a:	2200      	movs	r2, #0
 800546c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005470:	2200      	movs	r2, #0
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005476:	2207      	movs	r2, #7
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005482:	2208      	movs	r2, #8
 8005484:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005486:	4807      	ldr	r0, [pc, #28]	; (80054a4 <_ZL12MX_SPI2_Initv+0x7c>)
 8005488:	f7fd f902 	bl	8002690 <HAL_SPI_Init>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800549c:	f000 f960 	bl	8005760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80054a0:	bf00      	nop
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	2000008c 	.word	0x2000008c
 80054a8:	40003800 	.word	0x40003800

080054ac <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054b2:	f107 0310 	add.w	r3, r7, #16
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054ca:	4b25      	ldr	r3, [pc, #148]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <_ZL12MX_TIM3_Initv+0xb8>)
 80054ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80054d0:	4b23      	ldr	r3, [pc, #140]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054d2:	224f      	movs	r2, #79	; 0x4f
 80054d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054d6:	4b22      	ldr	r3, [pc, #136]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054d8:	2200      	movs	r2, #0
 80054da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054e4:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054ea:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80054f0:	481b      	ldr	r0, [pc, #108]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 80054f2:	f7fd ff6d 	bl	80033d0 <HAL_TIM_Base_Init>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8005506:	f000 f92b 	bl	8005760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800550a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800550e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005510:	f107 0310 	add.w	r3, r7, #16
 8005514:	4619      	mov	r1, r3
 8005516:	4812      	ldr	r0, [pc, #72]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 8005518:	f7fd ff85 	bl	8003426 <HAL_TIM_ConfigClockSource>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf14      	ite	ne
 8005522:	2301      	movne	r3, #1
 8005524:	2300      	moveq	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 800552c:	f000 f918 	bl	8005760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005530:	2300      	movs	r3, #0
 8005532:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4808      	ldr	r0, [pc, #32]	; (8005560 <_ZL12MX_TIM3_Initv+0xb4>)
 800553e:	f7fe f95f 	bl	8003800 <HAL_TIMEx_MasterConfigSynchronization>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8005552:	f000 f905 	bl	8005760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005556:	bf00      	nop
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	200000f0 	.word	0x200000f0
 8005564:	40000400 	.word	0x40000400

08005568 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800556c:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <_ZL19MX_USART2_UART_Initv+0x64>)
 8005570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800557c:	2200      	movs	r2, #0
 800557e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005588:	2200      	movs	r2, #0
 800558a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800558e:	220c      	movs	r2, #12
 8005590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800559a:	2200      	movs	r2, #0
 800559c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055a4:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055aa:	4807      	ldr	r0, [pc, #28]	; (80055c8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80055ac:	f7fe f984 	bl	80038b8 <HAL_UART_Init>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80055c0:	f000 f8ce 	bl	8005760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055c4:	bf00      	nop
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000130 	.word	0x20000130
 80055cc:	40004400 	.word	0x40004400

080055d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055e6:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 80055e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ea:	4a4b      	ldr	r2, [pc, #300]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 80055ec:	f043 0304 	orr.w	r3, r3, #4
 80055f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055f2:	4b49      	ldr	r3, [pc, #292]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 80055f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055fe:	4b46      	ldr	r3, [pc, #280]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	4a45      	ldr	r2, [pc, #276]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800560a:	4b43      	ldr	r3, [pc, #268]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005616:	4b40      	ldr	r3, [pc, #256]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 8005618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561a:	4a3f      	ldr	r2, [pc, #252]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005622:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <_ZL12MX_GPIO_Initv+0x148>)
 8005624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_COMM_RX_Pin|SS_COMM_RX_Pin, GPIO_PIN_SET);
 800562e:	2201      	movs	r2, #1
 8005630:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005634:	4839      	ldr	r0, [pc, #228]	; (800571c <_ZL12MX_GPIO_Initv+0x14c>)
 8005636:	f7fb fd33 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 800563a:	2200      	movs	r2, #0
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	4838      	ldr	r0, [pc, #224]	; (8005720 <_ZL12MX_GPIO_Initv+0x150>)
 8005640:	f7fb fd2e 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_COMM_TX_GPIO_Port, RESET_COMM_TX_Pin, GPIO_PIN_SET);
 8005644:	2201      	movs	r2, #1
 8005646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800564a:	4835      	ldr	r0, [pc, #212]	; (8005720 <_ZL12MX_GPIO_Initv+0x150>)
 800564c:	f7fb fd28 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_COMM_TX_GPIO_Port, SS_COMM_TX_Pin, GPIO_PIN_SET);
 8005650:	2201      	movs	r2, #1
 8005652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800565a:	f7fb fd21 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_COMM_RX_Pin SS_COMM_RX_Pin */
  GPIO_InitStruct.Pin = RESET_COMM_RX_Pin|SS_COMM_RX_Pin;
 800565e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005664:	2301      	movs	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	4619      	mov	r1, r3
 8005676:	4829      	ldr	r0, [pc, #164]	; (800571c <_ZL12MX_GPIO_Initv+0x14c>)
 8005678:	f7fb fb6a 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_RX_Pin */
  GPIO_InitStruct.Pin = DIO0_RX_Pin;
 800567c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <_ZL12MX_GPIO_Initv+0x154>)
 8005684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_RX_GPIO_Port, &GPIO_InitStruct);
 800568a:	f107 030c 	add.w	r3, r7, #12
 800568e:	4619      	mov	r1, r3
 8005690:	4822      	ldr	r0, [pc, #136]	; (800571c <_ZL12MX_GPIO_Initv+0x14c>)
 8005692:	f7fb fb5d 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_LED_Pin RESET_COMM_TX_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|RESET_COMM_TX_Pin;
 8005696:	f44f 7310 	mov.w	r3, #576	; 0x240
 800569a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800569c:	2301      	movs	r3, #1
 800569e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	4619      	mov	r1, r3
 80056ae:	481c      	ldr	r0, [pc, #112]	; (8005720 <_ZL12MX_GPIO_Initv+0x150>)
 80056b0:	f7fb fb4e 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_COMM_TX_Pin */
  GPIO_InitStruct.Pin = SS_COMM_TX_Pin;
 80056b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ba:	2301      	movs	r3, #1
 80056bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SS_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 80056c6:	f107 030c 	add.w	r3, r7, #12
 80056ca:	4619      	mov	r1, r3
 80056cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056d0:	f7fb fb3e 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_COMM_TX_Pin */
  GPIO_InitStruct.Pin = DIO0_COMM_TX_Pin;
 80056d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <_ZL12MX_GPIO_Initv+0x154>)
 80056dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_COMM_TX_GPIO_Port, &GPIO_InitStruct);
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	4619      	mov	r1, r3
 80056e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056ec:	f7fb fb30 	bl	8000d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80056f0:	2200      	movs	r2, #0
 80056f2:	2100      	movs	r1, #0
 80056f4:	2017      	movs	r0, #23
 80056f6:	f7fb faf4 	bl	8000ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80056fa:	2017      	movs	r0, #23
 80056fc:	f7fb fb0d 	bl	8000d1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	2028      	movs	r0, #40	; 0x28
 8005706:	f7fb faec 	bl	8000ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800570a:	2028      	movs	r0, #40	; 0x28
 800570c:	f7fb fb05 	bl	8000d1a <HAL_NVIC_EnableIRQ>

}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	48000400 	.word	0x48000400
 8005720:	48000800 	.word	0x48000800
 8005724:	10110000 	.word	0x10110000

08005728 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_COMM_TX_Pin){
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d102      	bne.n	8005740 <HAL_GPIO_EXTI_Callback+0x18>
		loraTX.onDio0Rise();
 800573a:	4807      	ldr	r0, [pc, #28]	; (8005758 <HAL_GPIO_EXTI_Callback+0x30>)
 800573c:	f7ff fc15 	bl	8004f6a <_ZN9LoRaClass10onDio0RiseEv>
	}
	if(GPIO_Pin == DIO0_RX_Pin){
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005746:	d102      	bne.n	800574e <HAL_GPIO_EXTI_Callback+0x26>
		loraRX.onDio0Rise();
 8005748:	4804      	ldr	r0, [pc, #16]	; (800575c <HAL_GPIO_EXTI_Callback+0x34>)
 800574a:	f7ff fc0e 	bl	8004f6a <_ZN9LoRaClass10onDio0RiseEv>
	}
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	200001dc 	.word	0x200001dc
 800575c:	200001b0 	.word	0x200001b0

08005760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <_Z41__static_initialization_and_destruction_0ii>:
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10a      	bne.n	8005796 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005786:	4293      	cmp	r3, r2
 8005788:	d105      	bne.n	8005796 <_Z41__static_initialization_and_destruction_0ii+0x26>
LoRaClass loraRX, loraTX;
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800578c:	f7fe fd74 	bl	8004278 <_ZN9LoRaClassC1Ev>
 8005790:	4804      	ldr	r0, [pc, #16]	; (80057a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8005792:	f7fe fd71 	bl	8004278 <_ZN9LoRaClassC1Ev>
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200001b0 	.word	0x200001b0
 80057a4:	200001dc 	.word	0x200001dc

080057a8 <_GLOBAL__sub_I_hspi2>:
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7ff ffdd 	bl	8005770 <_Z41__static_initialization_and_destruction_0ii>
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <HAL_MspInit+0x44>)
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <HAL_MspInit+0x44>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6613      	str	r3, [r2, #96]	; 0x60
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <HAL_MspInit+0x44>)
 80057cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_MspInit+0x44>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	4a08      	ldr	r2, [pc, #32]	; (80057fc <HAL_MspInit+0x44>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6593      	str	r3, [r2, #88]	; 0x58
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_MspInit+0x44>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000

08005800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <HAL_SPI_MspInit+0xb4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d144      	bne.n	80058ac <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582c:	6593      	str	r3, [r2, #88]	; 0x58
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800583a:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005840:	f043 0304 	orr.w	r3, r3, #4
 8005844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005846:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800585e:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <HAL_SPI_MspInit+0xb8>)
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = MISO_COMM_Pin|MOSI_COMM_Pin;
 800586a:	230c      	movs	r3, #12
 800586c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586e:	2302      	movs	r3, #2
 8005870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005876:	2303      	movs	r3, #3
 8005878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800587a:	2305      	movs	r3, #5
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800587e:	f107 0314 	add.w	r3, r7, #20
 8005882:	4619      	mov	r1, r3
 8005884:	480d      	ldr	r0, [pc, #52]	; (80058bc <HAL_SPI_MspInit+0xbc>)
 8005886:	f7fb fa63 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_COMM_Pin;
 800588a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800588e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005890:	2302      	movs	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005898:	2303      	movs	r3, #3
 800589a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800589c:	2305      	movs	r3, #5
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCK_COMM_GPIO_Port, &GPIO_InitStruct);
 80058a0:	f107 0314 	add.w	r3, r7, #20
 80058a4:	4619      	mov	r1, r3
 80058a6:	4806      	ldr	r0, [pc, #24]	; (80058c0 <HAL_SPI_MspInit+0xc0>)
 80058a8:	f7fb fa52 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80058ac:	bf00      	nop
 80058ae:	3728      	adds	r7, #40	; 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40003800 	.word	0x40003800
 80058b8:	40021000 	.word	0x40021000
 80058bc:	48000800 	.word	0x48000800
 80058c0:	48000400 	.word	0x48000400

080058c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <HAL_TIM_Base_MspInit+0x38>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d10b      	bne.n	80058ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_TIM_Base_MspInit+0x3c>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	4a09      	ldr	r2, [pc, #36]	; (8005900 <HAL_TIM_Base_MspInit+0x3c>)
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6593      	str	r3, [r2, #88]	; 0x58
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_TIM_Base_MspInit+0x3c>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40000400 	.word	0x40000400
 8005900:	40021000 	.word	0x40021000

08005904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <HAL_UART_MspInit+0x7c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d128      	bne.n	8005978 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005926:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_UART_MspInit+0x80>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <HAL_UART_MspInit+0x80>)
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	6593      	str	r3, [r2, #88]	; 0x58
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <HAL_UART_MspInit+0x80>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <HAL_UART_MspInit+0x80>)
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	4a10      	ldr	r2, [pc, #64]	; (8005984 <HAL_UART_MspInit+0x80>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800594a:	4b0e      	ldr	r3, [pc, #56]	; (8005984 <HAL_UART_MspInit+0x80>)
 800594c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005956:	230c      	movs	r3, #12
 8005958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005962:	2303      	movs	r3, #3
 8005964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005966:	2307      	movs	r3, #7
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800596a:	f107 0314 	add.w	r3, r7, #20
 800596e:	4619      	mov	r1, r3
 8005970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005974:	f7fb f9ec 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005978:	bf00      	nop
 800597a:	3728      	adds	r7, #40	; 0x28
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40004400 	.word	0x40004400
 8005984:	40021000 	.word	0x40021000

08005988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005996:	b480      	push	{r7}
 8005998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800599a:	e7fe      	b.n	800599a <HardFault_Handler+0x4>

0800599c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059a0:	e7fe      	b.n	80059a0 <MemManage_Handler+0x4>

080059a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059a2:	b480      	push	{r7}
 80059a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059a6:	e7fe      	b.n	80059a6 <BusFault_Handler+0x4>

080059a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059ac:	e7fe      	b.n	80059ac <UsageFault_Handler+0x4>

080059ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059dc:	f7fb f866 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059e0:	bf00      	nop
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80059e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80059ec:	f7fb fb70 	bl	80010d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80059f0:	bf00      	nop
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80059f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80059fc:	f7fb fb68 	bl	80010d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e00a      	b.n	8005a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a16:	f3af 8000 	nop.w
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	60ba      	str	r2, [r7, #8]
 8005a22:	b2ca      	uxtb	r2, r1
 8005a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	dbf0      	blt.n	8005a16 <_read+0x12>
	}

return len;
 8005a34:	687b      	ldr	r3, [r7, #4]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e009      	b.n	8005a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	60ba      	str	r2, [r7, #8]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	3301      	adds	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	dbf1      	blt.n	8005a50 <_write+0x12>
	}
	return len;
 8005a6c:	687b      	ldr	r3, [r7, #4]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_close>:

int _close(int file)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <_isatty>:

int _isatty(int file)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8005ab6:	2301      	movs	r3, #1
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
	return 0;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <_sbrk+0x50>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <_sbrk+0x16>
		heap_end = &end;
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <_sbrk+0x50>)
 8005af2:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <_sbrk+0x54>)
 8005af4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <_sbrk+0x50>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005afc:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <_sbrk+0x50>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	466a      	mov	r2, sp
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d907      	bls.n	8005b1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b0a:	f000 f875 	bl	8005bf8 <__errno>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	230c      	movs	r3, #12
 8005b12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	e006      	b.n	8005b28 <_sbrk+0x48>
	}

	heap_end += incr;
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <_sbrk+0x50>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	4a03      	ldr	r2, [pc, #12]	; (8005b30 <_sbrk+0x50>)
 8005b24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	200002b4 	.word	0x200002b4
 8005b34:	200002c8 	.word	0x200002c8

08005b38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <SystemInit+0x64>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	4a16      	ldr	r2, [pc, #88]	; (8005b9c <SystemInit+0x64>)
 8005b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <SystemInit+0x68>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <SystemInit+0x68>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <SystemInit+0x68>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <SystemInit+0x68>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <SystemInit+0x68>)
 8005b64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005b68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005b6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <SystemInit+0x68>)
 8005b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <SystemInit+0x68>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <SystemInit+0x68>)
 8005b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <SystemInit+0x68>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <SystemInit+0x64>)
 8005b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000ed00 	.word	0xe000ed00
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bdc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005ba8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005baa:	e003      	b.n	8005bb4 <LoopCopyDataInit>

08005bac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005bae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005bb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005bb2:	3104      	adds	r1, #4

08005bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005bb4:	480b      	ldr	r0, [pc, #44]	; (8005be4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005bb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005bba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005bbc:	d3f6      	bcc.n	8005bac <CopyDataInit>
	ldr	r2, =_sbss
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <LoopForever+0x12>)
	b	LoopFillZerobss
 8005bc0:	e002      	b.n	8005bc8 <LoopFillZerobss>

08005bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005bc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005bc4:	f842 3b04 	str.w	r3, [r2], #4

08005bc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <LoopForever+0x16>)
	cmp	r2, r3
 8005bca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005bcc:	d3f9      	bcc.n	8005bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bce:	f7ff ffb3 	bl	8005b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bd2:	f000 f817 	bl	8005c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bd6:	f7ff fa73 	bl	80050c0 <main>

08005bda <LoopForever>:

LoopForever:
    b LoopForever
 8005bda:	e7fe      	b.n	8005bda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005bdc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005be0:	08006ca8 	.word	0x08006ca8
	ldr	r0, =_sdata
 8005be4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005be8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8005bec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8005bf0:	200002c8 	.word	0x200002c8

08005bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bf4:	e7fe      	b.n	8005bf4 <ADC1_2_IRQHandler>
	...

08005bf8 <__errno>:
 8005bf8:	4b01      	ldr	r3, [pc, #4]	; (8005c00 <__errno+0x8>)
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	2000000c 	.word	0x2000000c

08005c04 <__libc_init_array>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	4e0d      	ldr	r6, [pc, #52]	; (8005c3c <__libc_init_array+0x38>)
 8005c08:	4c0d      	ldr	r4, [pc, #52]	; (8005c40 <__libc_init_array+0x3c>)
 8005c0a:	1ba4      	subs	r4, r4, r6
 8005c0c:	10a4      	asrs	r4, r4, #2
 8005c0e:	2500      	movs	r5, #0
 8005c10:	42a5      	cmp	r5, r4
 8005c12:	d109      	bne.n	8005c28 <__libc_init_array+0x24>
 8005c14:	4e0b      	ldr	r6, [pc, #44]	; (8005c44 <__libc_init_array+0x40>)
 8005c16:	4c0c      	ldr	r4, [pc, #48]	; (8005c48 <__libc_init_array+0x44>)
 8005c18:	f000 ff68 	bl	8006aec <_init>
 8005c1c:	1ba4      	subs	r4, r4, r6
 8005c1e:	10a4      	asrs	r4, r4, #2
 8005c20:	2500      	movs	r5, #0
 8005c22:	42a5      	cmp	r5, r4
 8005c24:	d105      	bne.n	8005c32 <__libc_init_array+0x2e>
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c2c:	4798      	blx	r3
 8005c2e:	3501      	adds	r5, #1
 8005c30:	e7ee      	b.n	8005c10 <__libc_init_array+0xc>
 8005c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c36:	4798      	blx	r3
 8005c38:	3501      	adds	r5, #1
 8005c3a:	e7f2      	b.n	8005c22 <__libc_init_array+0x1e>
 8005c3c:	08006c9c 	.word	0x08006c9c
 8005c40:	08006c9c 	.word	0x08006c9c
 8005c44:	08006c9c 	.word	0x08006c9c
 8005c48:	08006ca4 	.word	0x08006ca4

08005c4c <memset>:
 8005c4c:	4402      	add	r2, r0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d100      	bne.n	8005c56 <memset+0xa>
 8005c54:	4770      	bx	lr
 8005c56:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5a:	e7f9      	b.n	8005c50 <memset+0x4>

08005c5c <iprintf>:
 8005c5c:	b40f      	push	{r0, r1, r2, r3}
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <iprintf+0x2c>)
 8005c60:	b513      	push	{r0, r1, r4, lr}
 8005c62:	681c      	ldr	r4, [r3, #0]
 8005c64:	b124      	cbz	r4, 8005c70 <iprintf+0x14>
 8005c66:	69a3      	ldr	r3, [r4, #24]
 8005c68:	b913      	cbnz	r3, 8005c70 <iprintf+0x14>
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fa22 	bl	80060b4 <__sinit>
 8005c70:	ab05      	add	r3, sp, #20
 8005c72:	9a04      	ldr	r2, [sp, #16]
 8005c74:	68a1      	ldr	r1, [r4, #8]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fbdb 	bl	8006434 <_vfiprintf_r>
 8005c7e:	b002      	add	sp, #8
 8005c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c84:	b004      	add	sp, #16
 8005c86:	4770      	bx	lr
 8005c88:	2000000c 	.word	0x2000000c

08005c8c <_puts_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	460e      	mov	r6, r1
 8005c90:	4605      	mov	r5, r0
 8005c92:	b118      	cbz	r0, 8005c9c <_puts_r+0x10>
 8005c94:	6983      	ldr	r3, [r0, #24]
 8005c96:	b90b      	cbnz	r3, 8005c9c <_puts_r+0x10>
 8005c98:	f000 fa0c 	bl	80060b4 <__sinit>
 8005c9c:	69ab      	ldr	r3, [r5, #24]
 8005c9e:	68ac      	ldr	r4, [r5, #8]
 8005ca0:	b913      	cbnz	r3, 8005ca8 <_puts_r+0x1c>
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fa06 	bl	80060b4 <__sinit>
 8005ca8:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <_puts_r+0xac>)
 8005caa:	429c      	cmp	r4, r3
 8005cac:	d117      	bne.n	8005cde <_puts_r+0x52>
 8005cae:	686c      	ldr	r4, [r5, #4]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	071b      	lsls	r3, r3, #28
 8005cb4:	d51d      	bpl.n	8005cf2 <_puts_r+0x66>
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	b1db      	cbz	r3, 8005cf2 <_puts_r+0x66>
 8005cba:	3e01      	subs	r6, #1
 8005cbc:	68a3      	ldr	r3, [r4, #8]
 8005cbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60a3      	str	r3, [r4, #8]
 8005cc6:	b9e9      	cbnz	r1, 8005d04 <_puts_r+0x78>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da2e      	bge.n	8005d2a <_puts_r+0x9e>
 8005ccc:	4622      	mov	r2, r4
 8005cce:	210a      	movs	r1, #10
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 f83f 	bl	8005d54 <__swbuf_r>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d011      	beq.n	8005cfe <_puts_r+0x72>
 8005cda:	200a      	movs	r0, #10
 8005cdc:	e011      	b.n	8005d02 <_puts_r+0x76>
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <_puts_r+0xb0>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d101      	bne.n	8005ce8 <_puts_r+0x5c>
 8005ce4:	68ac      	ldr	r4, [r5, #8]
 8005ce6:	e7e3      	b.n	8005cb0 <_puts_r+0x24>
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <_puts_r+0xb4>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	bf08      	it	eq
 8005cee:	68ec      	ldreq	r4, [r5, #12]
 8005cf0:	e7de      	b.n	8005cb0 <_puts_r+0x24>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f87f 	bl	8005df8 <__swsetup_r>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0dd      	beq.n	8005cba <_puts_r+0x2e>
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da04      	bge.n	8005d12 <_puts_r+0x86>
 8005d08:	69a2      	ldr	r2, [r4, #24]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	dc06      	bgt.n	8005d1c <_puts_r+0x90>
 8005d0e:	290a      	cmp	r1, #10
 8005d10:	d004      	beq.n	8005d1c <_puts_r+0x90>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	6022      	str	r2, [r4, #0]
 8005d18:	7019      	strb	r1, [r3, #0]
 8005d1a:	e7cf      	b.n	8005cbc <_puts_r+0x30>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f818 	bl	8005d54 <__swbuf_r>
 8005d24:	3001      	adds	r0, #1
 8005d26:	d1c9      	bne.n	8005cbc <_puts_r+0x30>
 8005d28:	e7e9      	b.n	8005cfe <_puts_r+0x72>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	200a      	movs	r0, #10
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	6022      	str	r2, [r4, #0]
 8005d32:	7018      	strb	r0, [r3, #0]
 8005d34:	e7e5      	b.n	8005d02 <_puts_r+0x76>
 8005d36:	bf00      	nop
 8005d38:	08006c20 	.word	0x08006c20
 8005d3c:	08006c40 	.word	0x08006c40
 8005d40:	08006c00 	.word	0x08006c00

08005d44 <puts>:
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <puts+0xc>)
 8005d46:	4601      	mov	r1, r0
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f7ff bf9f 	b.w	8005c8c <_puts_r>
 8005d4e:	bf00      	nop
 8005d50:	2000000c 	.word	0x2000000c

08005d54 <__swbuf_r>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	460e      	mov	r6, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	b118      	cbz	r0, 8005d66 <__swbuf_r+0x12>
 8005d5e:	6983      	ldr	r3, [r0, #24]
 8005d60:	b90b      	cbnz	r3, 8005d66 <__swbuf_r+0x12>
 8005d62:	f000 f9a7 	bl	80060b4 <__sinit>
 8005d66:	4b21      	ldr	r3, [pc, #132]	; (8005dec <__swbuf_r+0x98>)
 8005d68:	429c      	cmp	r4, r3
 8005d6a:	d12a      	bne.n	8005dc2 <__swbuf_r+0x6e>
 8005d6c:	686c      	ldr	r4, [r5, #4]
 8005d6e:	69a3      	ldr	r3, [r4, #24]
 8005d70:	60a3      	str	r3, [r4, #8]
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	071a      	lsls	r2, r3, #28
 8005d76:	d52e      	bpl.n	8005dd6 <__swbuf_r+0x82>
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	b363      	cbz	r3, 8005dd6 <__swbuf_r+0x82>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	6820      	ldr	r0, [r4, #0]
 8005d80:	1ac0      	subs	r0, r0, r3
 8005d82:	6963      	ldr	r3, [r4, #20]
 8005d84:	b2f6      	uxtb	r6, r6
 8005d86:	4283      	cmp	r3, r0
 8005d88:	4637      	mov	r7, r6
 8005d8a:	dc04      	bgt.n	8005d96 <__swbuf_r+0x42>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f926 	bl	8005fe0 <_fflush_r>
 8005d94:	bb28      	cbnz	r0, 8005de2 <__swbuf_r+0x8e>
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	60a3      	str	r3, [r4, #8]
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	701e      	strb	r6, [r3, #0]
 8005da4:	6963      	ldr	r3, [r4, #20]
 8005da6:	3001      	adds	r0, #1
 8005da8:	4283      	cmp	r3, r0
 8005daa:	d004      	beq.n	8005db6 <__swbuf_r+0x62>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	07db      	lsls	r3, r3, #31
 8005db0:	d519      	bpl.n	8005de6 <__swbuf_r+0x92>
 8005db2:	2e0a      	cmp	r6, #10
 8005db4:	d117      	bne.n	8005de6 <__swbuf_r+0x92>
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f911 	bl	8005fe0 <_fflush_r>
 8005dbe:	b190      	cbz	r0, 8005de6 <__swbuf_r+0x92>
 8005dc0:	e00f      	b.n	8005de2 <__swbuf_r+0x8e>
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <__swbuf_r+0x9c>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d101      	bne.n	8005dcc <__swbuf_r+0x78>
 8005dc8:	68ac      	ldr	r4, [r5, #8]
 8005dca:	e7d0      	b.n	8005d6e <__swbuf_r+0x1a>
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <__swbuf_r+0xa0>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	bf08      	it	eq
 8005dd2:	68ec      	ldreq	r4, [r5, #12]
 8005dd4:	e7cb      	b.n	8005d6e <__swbuf_r+0x1a>
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 f80d 	bl	8005df8 <__swsetup_r>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d0cc      	beq.n	8005d7c <__swbuf_r+0x28>
 8005de2:	f04f 37ff 	mov.w	r7, #4294967295
 8005de6:	4638      	mov	r0, r7
 8005de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dea:	bf00      	nop
 8005dec:	08006c20 	.word	0x08006c20
 8005df0:	08006c40 	.word	0x08006c40
 8005df4:	08006c00 	.word	0x08006c00

08005df8 <__swsetup_r>:
 8005df8:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <__swsetup_r+0xcc>)
 8005dfa:	b570      	push	{r4, r5, r6, lr}
 8005dfc:	681d      	ldr	r5, [r3, #0]
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	b125      	cbz	r5, 8005e0e <__swsetup_r+0x16>
 8005e04:	69ab      	ldr	r3, [r5, #24]
 8005e06:	b913      	cbnz	r3, 8005e0e <__swsetup_r+0x16>
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 f953 	bl	80060b4 <__sinit>
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <__swsetup_r+0xd0>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	d10f      	bne.n	8005e34 <__swsetup_r+0x3c>
 8005e14:	686c      	ldr	r4, [r5, #4]
 8005e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	0715      	lsls	r5, r2, #28
 8005e1e:	d42c      	bmi.n	8005e7a <__swsetup_r+0x82>
 8005e20:	06d0      	lsls	r0, r2, #27
 8005e22:	d411      	bmi.n	8005e48 <__swsetup_r+0x50>
 8005e24:	2209      	movs	r2, #9
 8005e26:	6032      	str	r2, [r6, #0]
 8005e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e32:	e03e      	b.n	8005eb2 <__swsetup_r+0xba>
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <__swsetup_r+0xd4>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d101      	bne.n	8005e3e <__swsetup_r+0x46>
 8005e3a:	68ac      	ldr	r4, [r5, #8]
 8005e3c:	e7eb      	b.n	8005e16 <__swsetup_r+0x1e>
 8005e3e:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <__swsetup_r+0xd8>)
 8005e40:	429c      	cmp	r4, r3
 8005e42:	bf08      	it	eq
 8005e44:	68ec      	ldreq	r4, [r5, #12]
 8005e46:	e7e6      	b.n	8005e16 <__swsetup_r+0x1e>
 8005e48:	0751      	lsls	r1, r2, #29
 8005e4a:	d512      	bpl.n	8005e72 <__swsetup_r+0x7a>
 8005e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e4e:	b141      	cbz	r1, 8005e62 <__swsetup_r+0x6a>
 8005e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e54:	4299      	cmp	r1, r3
 8005e56:	d002      	beq.n	8005e5e <__swsetup_r+0x66>
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 fa19 	bl	8006290 <_free_r>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6363      	str	r3, [r4, #52]	; 0x34
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	f043 0308 	orr.w	r3, r3, #8
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	b94b      	cbnz	r3, 8005e92 <__swsetup_r+0x9a>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e88:	d003      	beq.n	8005e92 <__swsetup_r+0x9a>
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f000 f9bf 	bl	8006210 <__smakebuf_r>
 8005e92:	89a2      	ldrh	r2, [r4, #12]
 8005e94:	f012 0301 	ands.w	r3, r2, #1
 8005e98:	d00c      	beq.n	8005eb4 <__swsetup_r+0xbc>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60a3      	str	r3, [r4, #8]
 8005e9e:	6963      	ldr	r3, [r4, #20]
 8005ea0:	425b      	negs	r3, r3
 8005ea2:	61a3      	str	r3, [r4, #24]
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	b953      	cbnz	r3, 8005ebe <__swsetup_r+0xc6>
 8005ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005eb0:	d1ba      	bne.n	8005e28 <__swsetup_r+0x30>
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	0792      	lsls	r2, r2, #30
 8005eb6:	bf58      	it	pl
 8005eb8:	6963      	ldrpl	r3, [r4, #20]
 8005eba:	60a3      	str	r3, [r4, #8]
 8005ebc:	e7f2      	b.n	8005ea4 <__swsetup_r+0xac>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e7f7      	b.n	8005eb2 <__swsetup_r+0xba>
 8005ec2:	bf00      	nop
 8005ec4:	2000000c 	.word	0x2000000c
 8005ec8:	08006c20 	.word	0x08006c20
 8005ecc:	08006c40 	.word	0x08006c40
 8005ed0:	08006c00 	.word	0x08006c00

08005ed4 <__sflush_r>:
 8005ed4:	898a      	ldrh	r2, [r1, #12]
 8005ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	4605      	mov	r5, r0
 8005edc:	0710      	lsls	r0, r2, #28
 8005ede:	460c      	mov	r4, r1
 8005ee0:	d458      	bmi.n	8005f94 <__sflush_r+0xc0>
 8005ee2:	684b      	ldr	r3, [r1, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc05      	bgt.n	8005ef4 <__sflush_r+0x20>
 8005ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dc02      	bgt.n	8005ef4 <__sflush_r+0x20>
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d0f9      	beq.n	8005eee <__sflush_r+0x1a>
 8005efa:	2300      	movs	r3, #0
 8005efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f00:	682f      	ldr	r7, [r5, #0]
 8005f02:	6a21      	ldr	r1, [r4, #32]
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	d032      	beq.n	8005f6e <__sflush_r+0x9a>
 8005f08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	075a      	lsls	r2, r3, #29
 8005f0e:	d505      	bpl.n	8005f1c <__sflush_r+0x48>
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	1ac0      	subs	r0, r0, r3
 8005f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f16:	b10b      	cbz	r3, 8005f1c <__sflush_r+0x48>
 8005f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f1a:	1ac0      	subs	r0, r0, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f22:	6a21      	ldr	r1, [r4, #32]
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b0      	blx	r6
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	d106      	bne.n	8005f3c <__sflush_r+0x68>
 8005f2e:	6829      	ldr	r1, [r5, #0]
 8005f30:	291d      	cmp	r1, #29
 8005f32:	d848      	bhi.n	8005fc6 <__sflush_r+0xf2>
 8005f34:	4a29      	ldr	r2, [pc, #164]	; (8005fdc <__sflush_r+0x108>)
 8005f36:	40ca      	lsrs	r2, r1
 8005f38:	07d6      	lsls	r6, r2, #31
 8005f3a:	d544      	bpl.n	8005fc6 <__sflush_r+0xf2>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	6062      	str	r2, [r4, #4]
 8005f40:	04d9      	lsls	r1, r3, #19
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	d504      	bpl.n	8005f52 <__sflush_r+0x7e>
 8005f48:	1c42      	adds	r2, r0, #1
 8005f4a:	d101      	bne.n	8005f50 <__sflush_r+0x7c>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b903      	cbnz	r3, 8005f52 <__sflush_r+0x7e>
 8005f50:	6560      	str	r0, [r4, #84]	; 0x54
 8005f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f54:	602f      	str	r7, [r5, #0]
 8005f56:	2900      	cmp	r1, #0
 8005f58:	d0c9      	beq.n	8005eee <__sflush_r+0x1a>
 8005f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	d002      	beq.n	8005f68 <__sflush_r+0x94>
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 f994 	bl	8006290 <_free_r>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005f6c:	e7c0      	b.n	8005ef0 <__sflush_r+0x1c>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b0      	blx	r6
 8005f74:	1c41      	adds	r1, r0, #1
 8005f76:	d1c8      	bne.n	8005f0a <__sflush_r+0x36>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0c5      	beq.n	8005f0a <__sflush_r+0x36>
 8005f7e:	2b1d      	cmp	r3, #29
 8005f80:	d001      	beq.n	8005f86 <__sflush_r+0xb2>
 8005f82:	2b16      	cmp	r3, #22
 8005f84:	d101      	bne.n	8005f8a <__sflush_r+0xb6>
 8005f86:	602f      	str	r7, [r5, #0]
 8005f88:	e7b1      	b.n	8005eee <__sflush_r+0x1a>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	e7ad      	b.n	8005ef0 <__sflush_r+0x1c>
 8005f94:	690f      	ldr	r7, [r1, #16]
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	d0a9      	beq.n	8005eee <__sflush_r+0x1a>
 8005f9a:	0793      	lsls	r3, r2, #30
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	bf08      	it	eq
 8005fa0:	694b      	ldreq	r3, [r1, #20]
 8005fa2:	600f      	str	r7, [r1, #0]
 8005fa4:	bf18      	it	ne
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	eba6 0807 	sub.w	r8, r6, r7
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	f1b8 0f00 	cmp.w	r8, #0
 8005fb2:	dd9c      	ble.n	8005eee <__sflush_r+0x1a>
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	6a21      	ldr	r1, [r4, #32]
 8005fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b0      	blx	r6
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	dc06      	bgt.n	8005fd2 <__sflush_r+0xfe>
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	e78e      	b.n	8005ef0 <__sflush_r+0x1c>
 8005fd2:	4407      	add	r7, r0
 8005fd4:	eba8 0800 	sub.w	r8, r8, r0
 8005fd8:	e7e9      	b.n	8005fae <__sflush_r+0xda>
 8005fda:	bf00      	nop
 8005fdc:	20400001 	.word	0x20400001

08005fe0 <_fflush_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b1db      	cbz	r3, 8006022 <_fflush_r+0x42>
 8005fea:	b118      	cbz	r0, 8005ff4 <_fflush_r+0x14>
 8005fec:	6983      	ldr	r3, [r0, #24]
 8005fee:	b90b      	cbnz	r3, 8005ff4 <_fflush_r+0x14>
 8005ff0:	f000 f860 	bl	80060b4 <__sinit>
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <_fflush_r+0x48>)
 8005ff6:	429c      	cmp	r4, r3
 8005ff8:	d109      	bne.n	800600e <_fflush_r+0x2e>
 8005ffa:	686c      	ldr	r4, [r5, #4]
 8005ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006000:	b17b      	cbz	r3, 8006022 <_fflush_r+0x42>
 8006002:	4621      	mov	r1, r4
 8006004:	4628      	mov	r0, r5
 8006006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800600a:	f7ff bf63 	b.w	8005ed4 <__sflush_r>
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <_fflush_r+0x4c>)
 8006010:	429c      	cmp	r4, r3
 8006012:	d101      	bne.n	8006018 <_fflush_r+0x38>
 8006014:	68ac      	ldr	r4, [r5, #8]
 8006016:	e7f1      	b.n	8005ffc <_fflush_r+0x1c>
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <_fflush_r+0x50>)
 800601a:	429c      	cmp	r4, r3
 800601c:	bf08      	it	eq
 800601e:	68ec      	ldreq	r4, [r5, #12]
 8006020:	e7ec      	b.n	8005ffc <_fflush_r+0x1c>
 8006022:	2000      	movs	r0, #0
 8006024:	bd38      	pop	{r3, r4, r5, pc}
 8006026:	bf00      	nop
 8006028:	08006c20 	.word	0x08006c20
 800602c:	08006c40 	.word	0x08006c40
 8006030:	08006c00 	.word	0x08006c00

08006034 <std>:
 8006034:	2300      	movs	r3, #0
 8006036:	b510      	push	{r4, lr}
 8006038:	4604      	mov	r4, r0
 800603a:	e9c0 3300 	strd	r3, r3, [r0]
 800603e:	6083      	str	r3, [r0, #8]
 8006040:	8181      	strh	r1, [r0, #12]
 8006042:	6643      	str	r3, [r0, #100]	; 0x64
 8006044:	81c2      	strh	r2, [r0, #14]
 8006046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604a:	6183      	str	r3, [r0, #24]
 800604c:	4619      	mov	r1, r3
 800604e:	2208      	movs	r2, #8
 8006050:	305c      	adds	r0, #92	; 0x5c
 8006052:	f7ff fdfb 	bl	8005c4c <memset>
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <std+0x38>)
 8006058:	6263      	str	r3, [r4, #36]	; 0x24
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <std+0x3c>)
 800605c:	62a3      	str	r3, [r4, #40]	; 0x28
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <std+0x40>)
 8006060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <std+0x44>)
 8006064:	6224      	str	r4, [r4, #32]
 8006066:	6323      	str	r3, [r4, #48]	; 0x30
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	08006991 	.word	0x08006991
 8006070:	080069b3 	.word	0x080069b3
 8006074:	080069eb 	.word	0x080069eb
 8006078:	08006a0f 	.word	0x08006a0f

0800607c <_cleanup_r>:
 800607c:	4901      	ldr	r1, [pc, #4]	; (8006084 <_cleanup_r+0x8>)
 800607e:	f000 b885 	b.w	800618c <_fwalk_reent>
 8006082:	bf00      	nop
 8006084:	08005fe1 	.word	0x08005fe1

08006088 <__sfmoreglue>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	1e4a      	subs	r2, r1, #1
 800608c:	2568      	movs	r5, #104	; 0x68
 800608e:	4355      	muls	r5, r2
 8006090:	460e      	mov	r6, r1
 8006092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006096:	f000 f949 	bl	800632c <_malloc_r>
 800609a:	4604      	mov	r4, r0
 800609c:	b140      	cbz	r0, 80060b0 <__sfmoreglue+0x28>
 800609e:	2100      	movs	r1, #0
 80060a0:	e9c0 1600 	strd	r1, r6, [r0]
 80060a4:	300c      	adds	r0, #12
 80060a6:	60a0      	str	r0, [r4, #8]
 80060a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060ac:	f7ff fdce 	bl	8005c4c <memset>
 80060b0:	4620      	mov	r0, r4
 80060b2:	bd70      	pop	{r4, r5, r6, pc}

080060b4 <__sinit>:
 80060b4:	6983      	ldr	r3, [r0, #24]
 80060b6:	b510      	push	{r4, lr}
 80060b8:	4604      	mov	r4, r0
 80060ba:	bb33      	cbnz	r3, 800610a <__sinit+0x56>
 80060bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80060c0:	6503      	str	r3, [r0, #80]	; 0x50
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <__sinit+0x58>)
 80060c4:	4a12      	ldr	r2, [pc, #72]	; (8006110 <__sinit+0x5c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6282      	str	r2, [r0, #40]	; 0x28
 80060ca:	4298      	cmp	r0, r3
 80060cc:	bf04      	itt	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	6183      	streq	r3, [r0, #24]
 80060d2:	f000 f81f 	bl	8006114 <__sfp>
 80060d6:	6060      	str	r0, [r4, #4]
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 f81b 	bl	8006114 <__sfp>
 80060de:	60a0      	str	r0, [r4, #8]
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f817 	bl	8006114 <__sfp>
 80060e6:	2200      	movs	r2, #0
 80060e8:	60e0      	str	r0, [r4, #12]
 80060ea:	2104      	movs	r1, #4
 80060ec:	6860      	ldr	r0, [r4, #4]
 80060ee:	f7ff ffa1 	bl	8006034 <std>
 80060f2:	2201      	movs	r2, #1
 80060f4:	2109      	movs	r1, #9
 80060f6:	68a0      	ldr	r0, [r4, #8]
 80060f8:	f7ff ff9c 	bl	8006034 <std>
 80060fc:	2202      	movs	r2, #2
 80060fe:	2112      	movs	r1, #18
 8006100:	68e0      	ldr	r0, [r4, #12]
 8006102:	f7ff ff97 	bl	8006034 <std>
 8006106:	2301      	movs	r3, #1
 8006108:	61a3      	str	r3, [r4, #24]
 800610a:	bd10      	pop	{r4, pc}
 800610c:	08006bfc 	.word	0x08006bfc
 8006110:	0800607d 	.word	0x0800607d

08006114 <__sfp>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <__sfp+0x70>)
 8006118:	681e      	ldr	r6, [r3, #0]
 800611a:	69b3      	ldr	r3, [r6, #24]
 800611c:	4607      	mov	r7, r0
 800611e:	b913      	cbnz	r3, 8006126 <__sfp+0x12>
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff ffc7 	bl	80060b4 <__sinit>
 8006126:	3648      	adds	r6, #72	; 0x48
 8006128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800612c:	3b01      	subs	r3, #1
 800612e:	d503      	bpl.n	8006138 <__sfp+0x24>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	b133      	cbz	r3, 8006142 <__sfp+0x2e>
 8006134:	6836      	ldr	r6, [r6, #0]
 8006136:	e7f7      	b.n	8006128 <__sfp+0x14>
 8006138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800613c:	b16d      	cbz	r5, 800615a <__sfp+0x46>
 800613e:	3468      	adds	r4, #104	; 0x68
 8006140:	e7f4      	b.n	800612c <__sfp+0x18>
 8006142:	2104      	movs	r1, #4
 8006144:	4638      	mov	r0, r7
 8006146:	f7ff ff9f 	bl	8006088 <__sfmoreglue>
 800614a:	6030      	str	r0, [r6, #0]
 800614c:	2800      	cmp	r0, #0
 800614e:	d1f1      	bne.n	8006134 <__sfp+0x20>
 8006150:	230c      	movs	r3, #12
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4604      	mov	r4, r0
 8006156:	4620      	mov	r0, r4
 8006158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <__sfp+0x74>)
 800615c:	6665      	str	r5, [r4, #100]	; 0x64
 800615e:	e9c4 5500 	strd	r5, r5, [r4]
 8006162:	60a5      	str	r5, [r4, #8]
 8006164:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006168:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800616c:	2208      	movs	r2, #8
 800616e:	4629      	mov	r1, r5
 8006170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006174:	f7ff fd6a 	bl	8005c4c <memset>
 8006178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800617c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006180:	e7e9      	b.n	8006156 <__sfp+0x42>
 8006182:	bf00      	nop
 8006184:	08006bfc 	.word	0x08006bfc
 8006188:	ffff0001 	.word	0xffff0001

0800618c <_fwalk_reent>:
 800618c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006190:	4680      	mov	r8, r0
 8006192:	4689      	mov	r9, r1
 8006194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006198:	2600      	movs	r6, #0
 800619a:	b914      	cbnz	r4, 80061a2 <_fwalk_reent+0x16>
 800619c:	4630      	mov	r0, r6
 800619e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061a6:	3f01      	subs	r7, #1
 80061a8:	d501      	bpl.n	80061ae <_fwalk_reent+0x22>
 80061aa:	6824      	ldr	r4, [r4, #0]
 80061ac:	e7f5      	b.n	800619a <_fwalk_reent+0xe>
 80061ae:	89ab      	ldrh	r3, [r5, #12]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d907      	bls.n	80061c4 <_fwalk_reent+0x38>
 80061b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061b8:	3301      	adds	r3, #1
 80061ba:	d003      	beq.n	80061c4 <_fwalk_reent+0x38>
 80061bc:	4629      	mov	r1, r5
 80061be:	4640      	mov	r0, r8
 80061c0:	47c8      	blx	r9
 80061c2:	4306      	orrs	r6, r0
 80061c4:	3568      	adds	r5, #104	; 0x68
 80061c6:	e7ee      	b.n	80061a6 <_fwalk_reent+0x1a>

080061c8 <__swhatbuf_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	460e      	mov	r6, r1
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	2900      	cmp	r1, #0
 80061d2:	b096      	sub	sp, #88	; 0x58
 80061d4:	4614      	mov	r4, r2
 80061d6:	461d      	mov	r5, r3
 80061d8:	da07      	bge.n	80061ea <__swhatbuf_r+0x22>
 80061da:	2300      	movs	r3, #0
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	89b3      	ldrh	r3, [r6, #12]
 80061e0:	061a      	lsls	r2, r3, #24
 80061e2:	d410      	bmi.n	8006206 <__swhatbuf_r+0x3e>
 80061e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e8:	e00e      	b.n	8006208 <__swhatbuf_r+0x40>
 80061ea:	466a      	mov	r2, sp
 80061ec:	f000 fc36 	bl	8006a5c <_fstat_r>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	dbf2      	blt.n	80061da <__swhatbuf_r+0x12>
 80061f4:	9a01      	ldr	r2, [sp, #4]
 80061f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061fe:	425a      	negs	r2, r3
 8006200:	415a      	adcs	r2, r3
 8006202:	602a      	str	r2, [r5, #0]
 8006204:	e7ee      	b.n	80061e4 <__swhatbuf_r+0x1c>
 8006206:	2340      	movs	r3, #64	; 0x40
 8006208:	2000      	movs	r0, #0
 800620a:	6023      	str	r3, [r4, #0]
 800620c:	b016      	add	sp, #88	; 0x58
 800620e:	bd70      	pop	{r4, r5, r6, pc}

08006210 <__smakebuf_r>:
 8006210:	898b      	ldrh	r3, [r1, #12]
 8006212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006214:	079d      	lsls	r5, r3, #30
 8006216:	4606      	mov	r6, r0
 8006218:	460c      	mov	r4, r1
 800621a:	d507      	bpl.n	800622c <__smakebuf_r+0x1c>
 800621c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	2301      	movs	r3, #1
 8006226:	6163      	str	r3, [r4, #20]
 8006228:	b002      	add	sp, #8
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	ab01      	add	r3, sp, #4
 800622e:	466a      	mov	r2, sp
 8006230:	f7ff ffca 	bl	80061c8 <__swhatbuf_r>
 8006234:	9900      	ldr	r1, [sp, #0]
 8006236:	4605      	mov	r5, r0
 8006238:	4630      	mov	r0, r6
 800623a:	f000 f877 	bl	800632c <_malloc_r>
 800623e:	b948      	cbnz	r0, 8006254 <__smakebuf_r+0x44>
 8006240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006244:	059a      	lsls	r2, r3, #22
 8006246:	d4ef      	bmi.n	8006228 <__smakebuf_r+0x18>
 8006248:	f023 0303 	bic.w	r3, r3, #3
 800624c:	f043 0302 	orr.w	r3, r3, #2
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	e7e3      	b.n	800621c <__smakebuf_r+0xc>
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <__smakebuf_r+0x7c>)
 8006256:	62b3      	str	r3, [r6, #40]	; 0x28
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	6020      	str	r0, [r4, #0]
 800625c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	9b00      	ldr	r3, [sp, #0]
 8006264:	6163      	str	r3, [r4, #20]
 8006266:	9b01      	ldr	r3, [sp, #4]
 8006268:	6120      	str	r0, [r4, #16]
 800626a:	b15b      	cbz	r3, 8006284 <__smakebuf_r+0x74>
 800626c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006270:	4630      	mov	r0, r6
 8006272:	f000 fc05 	bl	8006a80 <_isatty_r>
 8006276:	b128      	cbz	r0, 8006284 <__smakebuf_r+0x74>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	81a3      	strh	r3, [r4, #12]
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	431d      	orrs	r5, r3
 8006288:	81a5      	strh	r5, [r4, #12]
 800628a:	e7cd      	b.n	8006228 <__smakebuf_r+0x18>
 800628c:	0800607d 	.word	0x0800607d

08006290 <_free_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4605      	mov	r5, r0
 8006294:	2900      	cmp	r1, #0
 8006296:	d045      	beq.n	8006324 <_free_r+0x94>
 8006298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629c:	1f0c      	subs	r4, r1, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bfb8      	it	lt
 80062a2:	18e4      	addlt	r4, r4, r3
 80062a4:	f000 fc0e 	bl	8006ac4 <__malloc_lock>
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <_free_r+0x98>)
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	4610      	mov	r0, r2
 80062ae:	b933      	cbnz	r3, 80062be <_free_r+0x2e>
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	6014      	str	r4, [r2, #0]
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ba:	f000 bc04 	b.w	8006ac6 <__malloc_unlock>
 80062be:	42a3      	cmp	r3, r4
 80062c0:	d90c      	bls.n	80062dc <_free_r+0x4c>
 80062c2:	6821      	ldr	r1, [r4, #0]
 80062c4:	1862      	adds	r2, r4, r1
 80062c6:	4293      	cmp	r3, r2
 80062c8:	bf04      	itt	eq
 80062ca:	681a      	ldreq	r2, [r3, #0]
 80062cc:	685b      	ldreq	r3, [r3, #4]
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	bf04      	itt	eq
 80062d2:	1852      	addeq	r2, r2, r1
 80062d4:	6022      	streq	r2, [r4, #0]
 80062d6:	6004      	str	r4, [r0, #0]
 80062d8:	e7ec      	b.n	80062b4 <_free_r+0x24>
 80062da:	4613      	mov	r3, r2
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	b10a      	cbz	r2, 80062e4 <_free_r+0x54>
 80062e0:	42a2      	cmp	r2, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x4a>
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	1858      	adds	r0, r3, r1
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x74>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	4401      	add	r1, r0
 80062f0:	1858      	adds	r0, r3, r1
 80062f2:	4282      	cmp	r2, r0
 80062f4:	6019      	str	r1, [r3, #0]
 80062f6:	d1dd      	bne.n	80062b4 <_free_r+0x24>
 80062f8:	6810      	ldr	r0, [r2, #0]
 80062fa:	6852      	ldr	r2, [r2, #4]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	4401      	add	r1, r0
 8006300:	6019      	str	r1, [r3, #0]
 8006302:	e7d7      	b.n	80062b4 <_free_r+0x24>
 8006304:	d902      	bls.n	800630c <_free_r+0x7c>
 8006306:	230c      	movs	r3, #12
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	e7d3      	b.n	80062b4 <_free_r+0x24>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	1821      	adds	r1, r4, r0
 8006310:	428a      	cmp	r2, r1
 8006312:	bf04      	itt	eq
 8006314:	6811      	ldreq	r1, [r2, #0]
 8006316:	6852      	ldreq	r2, [r2, #4]
 8006318:	6062      	str	r2, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1809      	addeq	r1, r1, r0
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	605c      	str	r4, [r3, #4]
 8006322:	e7c7      	b.n	80062b4 <_free_r+0x24>
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	200002b8 	.word	0x200002b8

0800632c <_malloc_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	1ccd      	adds	r5, r1, #3
 8006330:	f025 0503 	bic.w	r5, r5, #3
 8006334:	3508      	adds	r5, #8
 8006336:	2d0c      	cmp	r5, #12
 8006338:	bf38      	it	cc
 800633a:	250c      	movcc	r5, #12
 800633c:	2d00      	cmp	r5, #0
 800633e:	4606      	mov	r6, r0
 8006340:	db01      	blt.n	8006346 <_malloc_r+0x1a>
 8006342:	42a9      	cmp	r1, r5
 8006344:	d903      	bls.n	800634e <_malloc_r+0x22>
 8006346:	230c      	movs	r3, #12
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	2000      	movs	r0, #0
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	f000 fbb9 	bl	8006ac4 <__malloc_lock>
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <_malloc_r+0xac>)
 8006354:	6814      	ldr	r4, [r2, #0]
 8006356:	4621      	mov	r1, r4
 8006358:	b991      	cbnz	r1, 8006380 <_malloc_r+0x54>
 800635a:	4c20      	ldr	r4, [pc, #128]	; (80063dc <_malloc_r+0xb0>)
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	b91b      	cbnz	r3, 8006368 <_malloc_r+0x3c>
 8006360:	4630      	mov	r0, r6
 8006362:	f000 fb05 	bl	8006970 <_sbrk_r>
 8006366:	6020      	str	r0, [r4, #0]
 8006368:	4629      	mov	r1, r5
 800636a:	4630      	mov	r0, r6
 800636c:	f000 fb00 	bl	8006970 <_sbrk_r>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d124      	bne.n	80063be <_malloc_r+0x92>
 8006374:	230c      	movs	r3, #12
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	4630      	mov	r0, r6
 800637a:	f000 fba4 	bl	8006ac6 <__malloc_unlock>
 800637e:	e7e4      	b.n	800634a <_malloc_r+0x1e>
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	1b5b      	subs	r3, r3, r5
 8006384:	d418      	bmi.n	80063b8 <_malloc_r+0x8c>
 8006386:	2b0b      	cmp	r3, #11
 8006388:	d90f      	bls.n	80063aa <_malloc_r+0x7e>
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	50cd      	str	r5, [r1, r3]
 800638e:	18cc      	adds	r4, r1, r3
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fb98 	bl	8006ac6 <__malloc_unlock>
 8006396:	f104 000b 	add.w	r0, r4, #11
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	f020 0007 	bic.w	r0, r0, #7
 80063a0:	1ac3      	subs	r3, r0, r3
 80063a2:	d0d3      	beq.n	800634c <_malloc_r+0x20>
 80063a4:	425a      	negs	r2, r3
 80063a6:	50e2      	str	r2, [r4, r3]
 80063a8:	e7d0      	b.n	800634c <_malloc_r+0x20>
 80063aa:	428c      	cmp	r4, r1
 80063ac:	684b      	ldr	r3, [r1, #4]
 80063ae:	bf16      	itet	ne
 80063b0:	6063      	strne	r3, [r4, #4]
 80063b2:	6013      	streq	r3, [r2, #0]
 80063b4:	460c      	movne	r4, r1
 80063b6:	e7eb      	b.n	8006390 <_malloc_r+0x64>
 80063b8:	460c      	mov	r4, r1
 80063ba:	6849      	ldr	r1, [r1, #4]
 80063bc:	e7cc      	b.n	8006358 <_malloc_r+0x2c>
 80063be:	1cc4      	adds	r4, r0, #3
 80063c0:	f024 0403 	bic.w	r4, r4, #3
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	d005      	beq.n	80063d4 <_malloc_r+0xa8>
 80063c8:	1a21      	subs	r1, r4, r0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f000 fad0 	bl	8006970 <_sbrk_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d0cf      	beq.n	8006374 <_malloc_r+0x48>
 80063d4:	6025      	str	r5, [r4, #0]
 80063d6:	e7db      	b.n	8006390 <_malloc_r+0x64>
 80063d8:	200002b8 	.word	0x200002b8
 80063dc:	200002bc 	.word	0x200002bc

080063e0 <__sfputc_r>:
 80063e0:	6893      	ldr	r3, [r2, #8]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	b410      	push	{r4}
 80063e8:	6093      	str	r3, [r2, #8]
 80063ea:	da08      	bge.n	80063fe <__sfputc_r+0x1e>
 80063ec:	6994      	ldr	r4, [r2, #24]
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	db01      	blt.n	80063f6 <__sfputc_r+0x16>
 80063f2:	290a      	cmp	r1, #10
 80063f4:	d103      	bne.n	80063fe <__sfputc_r+0x1e>
 80063f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063fa:	f7ff bcab 	b.w	8005d54 <__swbuf_r>
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	1c58      	adds	r0, r3, #1
 8006402:	6010      	str	r0, [r2, #0]
 8006404:	7019      	strb	r1, [r3, #0]
 8006406:	4608      	mov	r0, r1
 8006408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640c:	4770      	bx	lr

0800640e <__sfputs_r>:
 800640e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006410:	4606      	mov	r6, r0
 8006412:	460f      	mov	r7, r1
 8006414:	4614      	mov	r4, r2
 8006416:	18d5      	adds	r5, r2, r3
 8006418:	42ac      	cmp	r4, r5
 800641a:	d101      	bne.n	8006420 <__sfputs_r+0x12>
 800641c:	2000      	movs	r0, #0
 800641e:	e007      	b.n	8006430 <__sfputs_r+0x22>
 8006420:	463a      	mov	r2, r7
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ffda 	bl	80063e0 <__sfputc_r>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d1f3      	bne.n	8006418 <__sfputs_r+0xa>
 8006430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006434 <_vfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	460c      	mov	r4, r1
 800643a:	b09d      	sub	sp, #116	; 0x74
 800643c:	4617      	mov	r7, r2
 800643e:	461d      	mov	r5, r3
 8006440:	4606      	mov	r6, r0
 8006442:	b118      	cbz	r0, 800644c <_vfiprintf_r+0x18>
 8006444:	6983      	ldr	r3, [r0, #24]
 8006446:	b90b      	cbnz	r3, 800644c <_vfiprintf_r+0x18>
 8006448:	f7ff fe34 	bl	80060b4 <__sinit>
 800644c:	4b7c      	ldr	r3, [pc, #496]	; (8006640 <_vfiprintf_r+0x20c>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d158      	bne.n	8006504 <_vfiprintf_r+0xd0>
 8006452:	6874      	ldr	r4, [r6, #4]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	0718      	lsls	r0, r3, #28
 8006458:	d55e      	bpl.n	8006518 <_vfiprintf_r+0xe4>
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05b      	beq.n	8006518 <_vfiprintf_r+0xe4>
 8006460:	2300      	movs	r3, #0
 8006462:	9309      	str	r3, [sp, #36]	; 0x24
 8006464:	2320      	movs	r3, #32
 8006466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800646a:	2330      	movs	r3, #48	; 0x30
 800646c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006470:	9503      	str	r5, [sp, #12]
 8006472:	f04f 0b01 	mov.w	fp, #1
 8006476:	46b8      	mov	r8, r7
 8006478:	4645      	mov	r5, r8
 800647a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800647e:	b10b      	cbz	r3, 8006484 <_vfiprintf_r+0x50>
 8006480:	2b25      	cmp	r3, #37	; 0x25
 8006482:	d154      	bne.n	800652e <_vfiprintf_r+0xfa>
 8006484:	ebb8 0a07 	subs.w	sl, r8, r7
 8006488:	d00b      	beq.n	80064a2 <_vfiprintf_r+0x6e>
 800648a:	4653      	mov	r3, sl
 800648c:	463a      	mov	r2, r7
 800648e:	4621      	mov	r1, r4
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff ffbc 	bl	800640e <__sfputs_r>
 8006496:	3001      	adds	r0, #1
 8006498:	f000 80c2 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	4453      	add	r3, sl
 80064a0:	9309      	str	r3, [sp, #36]	; 0x24
 80064a2:	f898 3000 	ldrb.w	r3, [r8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80ba 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
 80064b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064be:	931a      	str	r3, [sp, #104]	; 0x68
 80064c0:	46a8      	mov	r8, r5
 80064c2:	2205      	movs	r2, #5
 80064c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80064c8:	485e      	ldr	r0, [pc, #376]	; (8006644 <_vfiprintf_r+0x210>)
 80064ca:	f7f9 fe89 	bl	80001e0 <memchr>
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	bb78      	cbnz	r0, 8006532 <_vfiprintf_r+0xfe>
 80064d2:	06d9      	lsls	r1, r3, #27
 80064d4:	bf44      	itt	mi
 80064d6:	2220      	movmi	r2, #32
 80064d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064dc:	071a      	lsls	r2, r3, #28
 80064de:	bf44      	itt	mi
 80064e0:	222b      	movmi	r2, #43	; 0x2b
 80064e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064e6:	782a      	ldrb	r2, [r5, #0]
 80064e8:	2a2a      	cmp	r2, #42	; 0x2a
 80064ea:	d02a      	beq.n	8006542 <_vfiprintf_r+0x10e>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	46a8      	mov	r8, r5
 80064f0:	2000      	movs	r0, #0
 80064f2:	250a      	movs	r5, #10
 80064f4:	4641      	mov	r1, r8
 80064f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fa:	3b30      	subs	r3, #48	; 0x30
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d969      	bls.n	80065d4 <_vfiprintf_r+0x1a0>
 8006500:	b360      	cbz	r0, 800655c <_vfiprintf_r+0x128>
 8006502:	e024      	b.n	800654e <_vfiprintf_r+0x11a>
 8006504:	4b50      	ldr	r3, [pc, #320]	; (8006648 <_vfiprintf_r+0x214>)
 8006506:	429c      	cmp	r4, r3
 8006508:	d101      	bne.n	800650e <_vfiprintf_r+0xda>
 800650a:	68b4      	ldr	r4, [r6, #8]
 800650c:	e7a2      	b.n	8006454 <_vfiprintf_r+0x20>
 800650e:	4b4f      	ldr	r3, [pc, #316]	; (800664c <_vfiprintf_r+0x218>)
 8006510:	429c      	cmp	r4, r3
 8006512:	bf08      	it	eq
 8006514:	68f4      	ldreq	r4, [r6, #12]
 8006516:	e79d      	b.n	8006454 <_vfiprintf_r+0x20>
 8006518:	4621      	mov	r1, r4
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff fc6c 	bl	8005df8 <__swsetup_r>
 8006520:	2800      	cmp	r0, #0
 8006522:	d09d      	beq.n	8006460 <_vfiprintf_r+0x2c>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	b01d      	add	sp, #116	; 0x74
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	46a8      	mov	r8, r5
 8006530:	e7a2      	b.n	8006478 <_vfiprintf_r+0x44>
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <_vfiprintf_r+0x210>)
 8006534:	1a80      	subs	r0, r0, r2
 8006536:	fa0b f000 	lsl.w	r0, fp, r0
 800653a:	4318      	orrs	r0, r3
 800653c:	9004      	str	r0, [sp, #16]
 800653e:	4645      	mov	r5, r8
 8006540:	e7be      	b.n	80064c0 <_vfiprintf_r+0x8c>
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	1d11      	adds	r1, r2, #4
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	9103      	str	r1, [sp, #12]
 800654a:	2a00      	cmp	r2, #0
 800654c:	db01      	blt.n	8006552 <_vfiprintf_r+0x11e>
 800654e:	9207      	str	r2, [sp, #28]
 8006550:	e004      	b.n	800655c <_vfiprintf_r+0x128>
 8006552:	4252      	negs	r2, r2
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	9207      	str	r2, [sp, #28]
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	f898 3000 	ldrb.w	r3, [r8]
 8006560:	2b2e      	cmp	r3, #46	; 0x2e
 8006562:	d10e      	bne.n	8006582 <_vfiprintf_r+0x14e>
 8006564:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006568:	2b2a      	cmp	r3, #42	; 0x2a
 800656a:	d138      	bne.n	80065de <_vfiprintf_r+0x1aa>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9203      	str	r2, [sp, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfb8      	it	lt
 8006578:	f04f 33ff 	movlt.w	r3, #4294967295
 800657c:	f108 0802 	add.w	r8, r8, #2
 8006580:	9305      	str	r3, [sp, #20]
 8006582:	4d33      	ldr	r5, [pc, #204]	; (8006650 <_vfiprintf_r+0x21c>)
 8006584:	f898 1000 	ldrb.w	r1, [r8]
 8006588:	2203      	movs	r2, #3
 800658a:	4628      	mov	r0, r5
 800658c:	f7f9 fe28 	bl	80001e0 <memchr>
 8006590:	b140      	cbz	r0, 80065a4 <_vfiprintf_r+0x170>
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	1b40      	subs	r0, r0, r5
 8006596:	fa03 f000 	lsl.w	r0, r3, r0
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	4303      	orrs	r3, r0
 800659e:	f108 0801 	add.w	r8, r8, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	f898 1000 	ldrb.w	r1, [r8]
 80065a8:	482a      	ldr	r0, [pc, #168]	; (8006654 <_vfiprintf_r+0x220>)
 80065aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ae:	2206      	movs	r2, #6
 80065b0:	f108 0701 	add.w	r7, r8, #1
 80065b4:	f7f9 fe14 	bl	80001e0 <memchr>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d037      	beq.n	800662c <_vfiprintf_r+0x1f8>
 80065bc:	4b26      	ldr	r3, [pc, #152]	; (8006658 <_vfiprintf_r+0x224>)
 80065be:	bb1b      	cbnz	r3, 8006608 <_vfiprintf_r+0x1d4>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	3307      	adds	r3, #7
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	3308      	adds	r3, #8
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	444b      	add	r3, r9
 80065d0:	9309      	str	r3, [sp, #36]	; 0x24
 80065d2:	e750      	b.n	8006476 <_vfiprintf_r+0x42>
 80065d4:	fb05 3202 	mla	r2, r5, r2, r3
 80065d8:	2001      	movs	r0, #1
 80065da:	4688      	mov	r8, r1
 80065dc:	e78a      	b.n	80064f4 <_vfiprintf_r+0xc0>
 80065de:	2300      	movs	r3, #0
 80065e0:	f108 0801 	add.w	r8, r8, #1
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	4619      	mov	r1, r3
 80065e8:	250a      	movs	r5, #10
 80065ea:	4640      	mov	r0, r8
 80065ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f0:	3a30      	subs	r2, #48	; 0x30
 80065f2:	2a09      	cmp	r2, #9
 80065f4:	d903      	bls.n	80065fe <_vfiprintf_r+0x1ca>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0c3      	beq.n	8006582 <_vfiprintf_r+0x14e>
 80065fa:	9105      	str	r1, [sp, #20]
 80065fc:	e7c1      	b.n	8006582 <_vfiprintf_r+0x14e>
 80065fe:	fb05 2101 	mla	r1, r5, r1, r2
 8006602:	2301      	movs	r3, #1
 8006604:	4680      	mov	r8, r0
 8006606:	e7f0      	b.n	80065ea <_vfiprintf_r+0x1b6>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4622      	mov	r2, r4
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <_vfiprintf_r+0x228>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	4630      	mov	r0, r6
 8006614:	f3af 8000 	nop.w
 8006618:	f1b0 3fff 	cmp.w	r0, #4294967295
 800661c:	4681      	mov	r9, r0
 800661e:	d1d5      	bne.n	80065cc <_vfiprintf_r+0x198>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	065b      	lsls	r3, r3, #25
 8006624:	f53f af7e 	bmi.w	8006524 <_vfiprintf_r+0xf0>
 8006628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662a:	e77d      	b.n	8006528 <_vfiprintf_r+0xf4>
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4622      	mov	r2, r4
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <_vfiprintf_r+0x228>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4630      	mov	r0, r6
 8006638:	f000 f888 	bl	800674c <_printf_i>
 800663c:	e7ec      	b.n	8006618 <_vfiprintf_r+0x1e4>
 800663e:	bf00      	nop
 8006640:	08006c20 	.word	0x08006c20
 8006644:	08006c60 	.word	0x08006c60
 8006648:	08006c40 	.word	0x08006c40
 800664c:	08006c00 	.word	0x08006c00
 8006650:	08006c66 	.word	0x08006c66
 8006654:	08006c6a 	.word	0x08006c6a
 8006658:	00000000 	.word	0x00000000
 800665c:	0800640f 	.word	0x0800640f

08006660 <_printf_common>:
 8006660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	4691      	mov	r9, r2
 8006666:	461f      	mov	r7, r3
 8006668:	688a      	ldr	r2, [r1, #8]
 800666a:	690b      	ldr	r3, [r1, #16]
 800666c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006670:	4293      	cmp	r3, r2
 8006672:	bfb8      	it	lt
 8006674:	4613      	movlt	r3, r2
 8006676:	f8c9 3000 	str.w	r3, [r9]
 800667a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800667e:	4606      	mov	r6, r0
 8006680:	460c      	mov	r4, r1
 8006682:	b112      	cbz	r2, 800668a <_printf_common+0x2a>
 8006684:	3301      	adds	r3, #1
 8006686:	f8c9 3000 	str.w	r3, [r9]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	0699      	lsls	r1, r3, #26
 800668e:	bf42      	ittt	mi
 8006690:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006694:	3302      	addmi	r3, #2
 8006696:	f8c9 3000 	strmi.w	r3, [r9]
 800669a:	6825      	ldr	r5, [r4, #0]
 800669c:	f015 0506 	ands.w	r5, r5, #6
 80066a0:	d107      	bne.n	80066b2 <_printf_common+0x52>
 80066a2:	f104 0a19 	add.w	sl, r4, #25
 80066a6:	68e3      	ldr	r3, [r4, #12]
 80066a8:	f8d9 2000 	ldr.w	r2, [r9]
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	42ab      	cmp	r3, r5
 80066b0:	dc28      	bgt.n	8006704 <_printf_common+0xa4>
 80066b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	3300      	adds	r3, #0
 80066ba:	bf18      	it	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	0692      	lsls	r2, r2, #26
 80066c0:	d42d      	bmi.n	800671e <_printf_common+0xbe>
 80066c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066c6:	4639      	mov	r1, r7
 80066c8:	4630      	mov	r0, r6
 80066ca:	47c0      	blx	r8
 80066cc:	3001      	adds	r0, #1
 80066ce:	d020      	beq.n	8006712 <_printf_common+0xb2>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	68e5      	ldr	r5, [r4, #12]
 80066d4:	f8d9 2000 	ldr.w	r2, [r9]
 80066d8:	f003 0306 	and.w	r3, r3, #6
 80066dc:	2b04      	cmp	r3, #4
 80066de:	bf08      	it	eq
 80066e0:	1aad      	subeq	r5, r5, r2
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	bf0c      	ite	eq
 80066e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ec:	2500      	movne	r5, #0
 80066ee:	4293      	cmp	r3, r2
 80066f0:	bfc4      	itt	gt
 80066f2:	1a9b      	subgt	r3, r3, r2
 80066f4:	18ed      	addgt	r5, r5, r3
 80066f6:	f04f 0900 	mov.w	r9, #0
 80066fa:	341a      	adds	r4, #26
 80066fc:	454d      	cmp	r5, r9
 80066fe:	d11a      	bne.n	8006736 <_printf_common+0xd6>
 8006700:	2000      	movs	r0, #0
 8006702:	e008      	b.n	8006716 <_printf_common+0xb6>
 8006704:	2301      	movs	r3, #1
 8006706:	4652      	mov	r2, sl
 8006708:	4639      	mov	r1, r7
 800670a:	4630      	mov	r0, r6
 800670c:	47c0      	blx	r8
 800670e:	3001      	adds	r0, #1
 8006710:	d103      	bne.n	800671a <_printf_common+0xba>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671a:	3501      	adds	r5, #1
 800671c:	e7c3      	b.n	80066a6 <_printf_common+0x46>
 800671e:	18e1      	adds	r1, r4, r3
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	2030      	movs	r0, #48	; 0x30
 8006724:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006728:	4422      	add	r2, r4
 800672a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800672e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006732:	3302      	adds	r3, #2
 8006734:	e7c5      	b.n	80066c2 <_printf_common+0x62>
 8006736:	2301      	movs	r3, #1
 8006738:	4622      	mov	r2, r4
 800673a:	4639      	mov	r1, r7
 800673c:	4630      	mov	r0, r6
 800673e:	47c0      	blx	r8
 8006740:	3001      	adds	r0, #1
 8006742:	d0e6      	beq.n	8006712 <_printf_common+0xb2>
 8006744:	f109 0901 	add.w	r9, r9, #1
 8006748:	e7d8      	b.n	80066fc <_printf_common+0x9c>
	...

0800674c <_printf_i>:
 800674c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006750:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006754:	460c      	mov	r4, r1
 8006756:	7e09      	ldrb	r1, [r1, #24]
 8006758:	b085      	sub	sp, #20
 800675a:	296e      	cmp	r1, #110	; 0x6e
 800675c:	4617      	mov	r7, r2
 800675e:	4606      	mov	r6, r0
 8006760:	4698      	mov	r8, r3
 8006762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006764:	f000 80b3 	beq.w	80068ce <_printf_i+0x182>
 8006768:	d822      	bhi.n	80067b0 <_printf_i+0x64>
 800676a:	2963      	cmp	r1, #99	; 0x63
 800676c:	d036      	beq.n	80067dc <_printf_i+0x90>
 800676e:	d80a      	bhi.n	8006786 <_printf_i+0x3a>
 8006770:	2900      	cmp	r1, #0
 8006772:	f000 80b9 	beq.w	80068e8 <_printf_i+0x19c>
 8006776:	2958      	cmp	r1, #88	; 0x58
 8006778:	f000 8083 	beq.w	8006882 <_printf_i+0x136>
 800677c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006780:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006784:	e032      	b.n	80067ec <_printf_i+0xa0>
 8006786:	2964      	cmp	r1, #100	; 0x64
 8006788:	d001      	beq.n	800678e <_printf_i+0x42>
 800678a:	2969      	cmp	r1, #105	; 0x69
 800678c:	d1f6      	bne.n	800677c <_printf_i+0x30>
 800678e:	6820      	ldr	r0, [r4, #0]
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	0605      	lsls	r5, r0, #24
 8006794:	f103 0104 	add.w	r1, r3, #4
 8006798:	d52a      	bpl.n	80067f0 <_printf_i+0xa4>
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	da03      	bge.n	80067aa <_printf_i+0x5e>
 80067a2:	222d      	movs	r2, #45	; 0x2d
 80067a4:	425b      	negs	r3, r3
 80067a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067aa:	486f      	ldr	r0, [pc, #444]	; (8006968 <_printf_i+0x21c>)
 80067ac:	220a      	movs	r2, #10
 80067ae:	e039      	b.n	8006824 <_printf_i+0xd8>
 80067b0:	2973      	cmp	r1, #115	; 0x73
 80067b2:	f000 809d 	beq.w	80068f0 <_printf_i+0x1a4>
 80067b6:	d808      	bhi.n	80067ca <_printf_i+0x7e>
 80067b8:	296f      	cmp	r1, #111	; 0x6f
 80067ba:	d020      	beq.n	80067fe <_printf_i+0xb2>
 80067bc:	2970      	cmp	r1, #112	; 0x70
 80067be:	d1dd      	bne.n	800677c <_printf_i+0x30>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	f043 0320 	orr.w	r3, r3, #32
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	e003      	b.n	80067d2 <_printf_i+0x86>
 80067ca:	2975      	cmp	r1, #117	; 0x75
 80067cc:	d017      	beq.n	80067fe <_printf_i+0xb2>
 80067ce:	2978      	cmp	r1, #120	; 0x78
 80067d0:	d1d4      	bne.n	800677c <_printf_i+0x30>
 80067d2:	2378      	movs	r3, #120	; 0x78
 80067d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067d8:	4864      	ldr	r0, [pc, #400]	; (800696c <_printf_i+0x220>)
 80067da:	e055      	b.n	8006888 <_printf_i+0x13c>
 80067dc:	6813      	ldr	r3, [r2, #0]
 80067de:	1d19      	adds	r1, r3, #4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6011      	str	r1, [r2, #0]
 80067e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067ec:	2301      	movs	r3, #1
 80067ee:	e08c      	b.n	800690a <_printf_i+0x1be>
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6011      	str	r1, [r2, #0]
 80067f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067f8:	bf18      	it	ne
 80067fa:	b21b      	sxthne	r3, r3
 80067fc:	e7cf      	b.n	800679e <_printf_i+0x52>
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	6825      	ldr	r5, [r4, #0]
 8006802:	1d18      	adds	r0, r3, #4
 8006804:	6010      	str	r0, [r2, #0]
 8006806:	0628      	lsls	r0, r5, #24
 8006808:	d501      	bpl.n	800680e <_printf_i+0xc2>
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	e002      	b.n	8006814 <_printf_i+0xc8>
 800680e:	0668      	lsls	r0, r5, #25
 8006810:	d5fb      	bpl.n	800680a <_printf_i+0xbe>
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	4854      	ldr	r0, [pc, #336]	; (8006968 <_printf_i+0x21c>)
 8006816:	296f      	cmp	r1, #111	; 0x6f
 8006818:	bf14      	ite	ne
 800681a:	220a      	movne	r2, #10
 800681c:	2208      	moveq	r2, #8
 800681e:	2100      	movs	r1, #0
 8006820:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006824:	6865      	ldr	r5, [r4, #4]
 8006826:	60a5      	str	r5, [r4, #8]
 8006828:	2d00      	cmp	r5, #0
 800682a:	f2c0 8095 	blt.w	8006958 <_printf_i+0x20c>
 800682e:	6821      	ldr	r1, [r4, #0]
 8006830:	f021 0104 	bic.w	r1, r1, #4
 8006834:	6021      	str	r1, [r4, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d13d      	bne.n	80068b6 <_printf_i+0x16a>
 800683a:	2d00      	cmp	r5, #0
 800683c:	f040 808e 	bne.w	800695c <_printf_i+0x210>
 8006840:	4665      	mov	r5, ip
 8006842:	2a08      	cmp	r2, #8
 8006844:	d10b      	bne.n	800685e <_printf_i+0x112>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	d508      	bpl.n	800685e <_printf_i+0x112>
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	6862      	ldr	r2, [r4, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	bfde      	ittt	le
 8006854:	2330      	movle	r3, #48	; 0x30
 8006856:	f805 3c01 	strble.w	r3, [r5, #-1]
 800685a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800685e:	ebac 0305 	sub.w	r3, ip, r5
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	f8cd 8000 	str.w	r8, [sp]
 8006868:	463b      	mov	r3, r7
 800686a:	aa03      	add	r2, sp, #12
 800686c:	4621      	mov	r1, r4
 800686e:	4630      	mov	r0, r6
 8006870:	f7ff fef6 	bl	8006660 <_printf_common>
 8006874:	3001      	adds	r0, #1
 8006876:	d14d      	bne.n	8006914 <_printf_i+0x1c8>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	b005      	add	sp, #20
 800687e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006882:	4839      	ldr	r0, [pc, #228]	; (8006968 <_printf_i+0x21c>)
 8006884:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006888:	6813      	ldr	r3, [r2, #0]
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	1d1d      	adds	r5, r3, #4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6015      	str	r5, [r2, #0]
 8006892:	060a      	lsls	r2, r1, #24
 8006894:	d50b      	bpl.n	80068ae <_printf_i+0x162>
 8006896:	07ca      	lsls	r2, r1, #31
 8006898:	bf44      	itt	mi
 800689a:	f041 0120 	orrmi.w	r1, r1, #32
 800689e:	6021      	strmi	r1, [r4, #0]
 80068a0:	b91b      	cbnz	r3, 80068aa <_printf_i+0x15e>
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	f022 0220 	bic.w	r2, r2, #32
 80068a8:	6022      	str	r2, [r4, #0]
 80068aa:	2210      	movs	r2, #16
 80068ac:	e7b7      	b.n	800681e <_printf_i+0xd2>
 80068ae:	064d      	lsls	r5, r1, #25
 80068b0:	bf48      	it	mi
 80068b2:	b29b      	uxthmi	r3, r3
 80068b4:	e7ef      	b.n	8006896 <_printf_i+0x14a>
 80068b6:	4665      	mov	r5, ip
 80068b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80068bc:	fb02 3311 	mls	r3, r2, r1, r3
 80068c0:	5cc3      	ldrb	r3, [r0, r3]
 80068c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068c6:	460b      	mov	r3, r1
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d1f5      	bne.n	80068b8 <_printf_i+0x16c>
 80068cc:	e7b9      	b.n	8006842 <_printf_i+0xf6>
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	6825      	ldr	r5, [r4, #0]
 80068d2:	6961      	ldr	r1, [r4, #20]
 80068d4:	1d18      	adds	r0, r3, #4
 80068d6:	6010      	str	r0, [r2, #0]
 80068d8:	0628      	lsls	r0, r5, #24
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	d501      	bpl.n	80068e2 <_printf_i+0x196>
 80068de:	6019      	str	r1, [r3, #0]
 80068e0:	e002      	b.n	80068e8 <_printf_i+0x19c>
 80068e2:	066a      	lsls	r2, r5, #25
 80068e4:	d5fb      	bpl.n	80068de <_printf_i+0x192>
 80068e6:	8019      	strh	r1, [r3, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	6123      	str	r3, [r4, #16]
 80068ec:	4665      	mov	r5, ip
 80068ee:	e7b9      	b.n	8006864 <_printf_i+0x118>
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	1d19      	adds	r1, r3, #4
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	681d      	ldr	r5, [r3, #0]
 80068f8:	6862      	ldr	r2, [r4, #4]
 80068fa:	2100      	movs	r1, #0
 80068fc:	4628      	mov	r0, r5
 80068fe:	f7f9 fc6f 	bl	80001e0 <memchr>
 8006902:	b108      	cbz	r0, 8006908 <_printf_i+0x1bc>
 8006904:	1b40      	subs	r0, r0, r5
 8006906:	6060      	str	r0, [r4, #4]
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	6123      	str	r3, [r4, #16]
 800690c:	2300      	movs	r3, #0
 800690e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006912:	e7a7      	b.n	8006864 <_printf_i+0x118>
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	462a      	mov	r2, r5
 8006918:	4639      	mov	r1, r7
 800691a:	4630      	mov	r0, r6
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d0aa      	beq.n	8006878 <_printf_i+0x12c>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	079b      	lsls	r3, r3, #30
 8006926:	d413      	bmi.n	8006950 <_printf_i+0x204>
 8006928:	68e0      	ldr	r0, [r4, #12]
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	4298      	cmp	r0, r3
 800692e:	bfb8      	it	lt
 8006930:	4618      	movlt	r0, r3
 8006932:	e7a3      	b.n	800687c <_printf_i+0x130>
 8006934:	2301      	movs	r3, #1
 8006936:	464a      	mov	r2, r9
 8006938:	4639      	mov	r1, r7
 800693a:	4630      	mov	r0, r6
 800693c:	47c0      	blx	r8
 800693e:	3001      	adds	r0, #1
 8006940:	d09a      	beq.n	8006878 <_printf_i+0x12c>
 8006942:	3501      	adds	r5, #1
 8006944:	68e3      	ldr	r3, [r4, #12]
 8006946:	9a03      	ldr	r2, [sp, #12]
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	42ab      	cmp	r3, r5
 800694c:	dcf2      	bgt.n	8006934 <_printf_i+0x1e8>
 800694e:	e7eb      	b.n	8006928 <_printf_i+0x1dc>
 8006950:	2500      	movs	r5, #0
 8006952:	f104 0919 	add.w	r9, r4, #25
 8006956:	e7f5      	b.n	8006944 <_printf_i+0x1f8>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ac      	bne.n	80068b6 <_printf_i+0x16a>
 800695c:	7803      	ldrb	r3, [r0, #0]
 800695e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006962:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006966:	e76c      	b.n	8006842 <_printf_i+0xf6>
 8006968:	08006c71 	.word	0x08006c71
 800696c:	08006c82 	.word	0x08006c82

08006970 <_sbrk_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4c06      	ldr	r4, [pc, #24]	; (800698c <_sbrk_r+0x1c>)
 8006974:	2300      	movs	r3, #0
 8006976:	4605      	mov	r5, r0
 8006978:	4608      	mov	r0, r1
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	f7ff f8b0 	bl	8005ae0 <_sbrk>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_sbrk_r+0x1a>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	b103      	cbz	r3, 800698a <_sbrk_r+0x1a>
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	200002c4 	.word	0x200002c4

08006990 <__sread>:
 8006990:	b510      	push	{r4, lr}
 8006992:	460c      	mov	r4, r1
 8006994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006998:	f000 f896 	bl	8006ac8 <_read_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	bfab      	itete	ge
 80069a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069a2:	89a3      	ldrhlt	r3, [r4, #12]
 80069a4:	181b      	addge	r3, r3, r0
 80069a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069aa:	bfac      	ite	ge
 80069ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ae:	81a3      	strhlt	r3, [r4, #12]
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <__swrite>:
 80069b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b6:	461f      	mov	r7, r3
 80069b8:	898b      	ldrh	r3, [r1, #12]
 80069ba:	05db      	lsls	r3, r3, #23
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	4616      	mov	r6, r2
 80069c2:	d505      	bpl.n	80069d0 <__swrite+0x1e>
 80069c4:	2302      	movs	r3, #2
 80069c6:	2200      	movs	r2, #0
 80069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069cc:	f000 f868 	bl	8006aa0 <_lseek_r>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	f000 b817 	b.w	8006a18 <_write_r>

080069ea <__sseek>:
 80069ea:	b510      	push	{r4, lr}
 80069ec:	460c      	mov	r4, r1
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 f855 	bl	8006aa0 <_lseek_r>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	bf15      	itete	ne
 80069fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a06:	81a3      	strheq	r3, [r4, #12]
 8006a08:	bf18      	it	ne
 8006a0a:	81a3      	strhne	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__sclose>:
 8006a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a12:	f000 b813 	b.w	8006a3c <_close_r>
	...

08006a18 <_write_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4c07      	ldr	r4, [pc, #28]	; (8006a38 <_write_r+0x20>)
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	4608      	mov	r0, r1
 8006a20:	4611      	mov	r1, r2
 8006a22:	2200      	movs	r2, #0
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f7ff f809 	bl	8005a3e <_write>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_write_r+0x1e>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_write_r+0x1e>
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	200002c4 	.word	0x200002c4

08006a3c <_close_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4c06      	ldr	r4, [pc, #24]	; (8006a58 <_close_r+0x1c>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4605      	mov	r5, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	f7ff f815 	bl	8005a76 <_close>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_close_r+0x1a>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_close_r+0x1a>
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	200002c4 	.word	0x200002c4

08006a5c <_fstat_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4c07      	ldr	r4, [pc, #28]	; (8006a7c <_fstat_r+0x20>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4605      	mov	r5, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	f7ff f810 	bl	8005a8e <_fstat>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	d102      	bne.n	8006a78 <_fstat_r+0x1c>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	b103      	cbz	r3, 8006a78 <_fstat_r+0x1c>
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	bd38      	pop	{r3, r4, r5, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200002c4 	.word	0x200002c4

08006a80 <_isatty_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4c06      	ldr	r4, [pc, #24]	; (8006a9c <_isatty_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4605      	mov	r5, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	f7ff f80f 	bl	8005aae <_isatty>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_isatty_r+0x1a>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_isatty_r+0x1a>
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	200002c4 	.word	0x200002c4

08006aa0 <_lseek_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4c07      	ldr	r4, [pc, #28]	; (8006ac0 <_lseek_r+0x20>)
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6022      	str	r2, [r4, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7ff f808 	bl	8005ac4 <_lseek>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_lseek_r+0x1e>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_lseek_r+0x1e>
 8006abc:	602b      	str	r3, [r5, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	200002c4 	.word	0x200002c4

08006ac4 <__malloc_lock>:
 8006ac4:	4770      	bx	lr

08006ac6 <__malloc_unlock>:
 8006ac6:	4770      	bx	lr

08006ac8 <_read_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4c07      	ldr	r4, [pc, #28]	; (8006ae8 <_read_r+0x20>)
 8006acc:	4605      	mov	r5, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fe ff94 	bl	8005a04 <_read>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_read_r+0x1e>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_read_r+0x1e>
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200002c4 	.word	0x200002c4

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
